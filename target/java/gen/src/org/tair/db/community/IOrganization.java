/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: IDbDto.vsl

package org.tair.db.community;

import com.poesys.db.dto.IDbDto;

import org.tair.db.community.ICommunity;


/**
 * <p>
 * A data-access layer data-transfer-object interface for the Organization. 
 * The data-transfer-object class and proxy class implement this interface, as
 * does the business-layer data-transfer-object class.
 * </p>
 * <p>
 * An organization that is a member of the community
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: false
 * </p>
 * 
 * @author Poesys/DB Cartridge
 */
public interface IOrganization extends IDbDto, ICommunity {
  

  /**
   * <p>
   * the name of the organization
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: name
   * </p>
   * @return a java.lang.String name
   */
  public java.lang.String getName();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * the kind of organization:
   * </p>
   * <p>
   * lab
   * </p>
   * <p>
   * institute
   * </p>
   * <p>
   * organization
   * </p>
   * <p>
   * project
   * </p>
   * <p>
   * university
   * </p>
   * <p>
   * other
   * </p>
   * <p>
   * high_school
   * </p>
   * <p>
   * education_outreach_program
   * </p>
   * <p>
   * foundation
   * </p>
   * <p>
   * company
   * </p>
   * <p>
   * facility
   * </p>
   * <p>
   * stock_center
   * </p>
   * <p>
   * center
   * </p>
   * <p>
   * community_college
   * </p>
   * <p>
   * collaboration
   * </p>
   * <p>
   * middle_school
   * </p>
   * <p>
   * committee
   * </p>
   * <p>
   * unknown
   * </p>
   * <p>
   * database
   * </p>
   * <p>
   * 4_year_college
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: organizationType
   * </p>
   * @return a java.lang.String organizationType
   */
  public java.lang.String getOrganizationType();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * a text describing the organization
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: description
   * </p>
   * @return a java.lang.String description
   */
  public java.lang.String getDescription();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * whether this is a commercial organization
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: commercial
   * </p>
   * @return a java.lang.Boolean commercial
   */
  public java.lang.Boolean getCommercial();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * the set of people affiliated with the organization
   * </p>
   * <p>
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * Owning DTO: Person
   * Owning package: org.tair.db.community
   * Property prefix: affiliates
   * </p>
   * <p>
   * This property loads lazily on demand rather than when you first query the 
   * IOrganization object.
   * </p>
   * @return a java.util.Collection<org.tair.db.community.IPerson> affiliate
   * @throws java.sql.SQLException when the method can't get a SQL connection to 
   *                               load the property lazily
   */
  public java.util.Collection<org.tair.db.community.IPerson> getAffiliate() throws java.sql.SQLException;

  /**
   * Clear the affiliate so that it will lazily reload.
   */
  public void clearAffiliate();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   * <p>
   * Added by AddAssociationClassCollectionProperties
   * Owning DTO: Affiliation
   * Owning package: org.tair.db.community
   * Property prefix: affiliates
   * </p>
   * <p>
   * This property loads lazily on demand rather than when you first query the 
   * IOrganization object.
   * </p>
   * @return a java.util.Collection<org.tair.db.community.IAffiliation> affiliation
   * @throws java.sql.SQLException when the method can't get a SQL connection to 
   *                               load the property lazily
   */
  public java.util.Collection<org.tair.db.community.IAffiliation> getAffiliation() throws java.sql.SQLException;

  /**
   * Clear the affiliation so that it will lazily reload.
   */
  public void clearAffiliation();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: true
}