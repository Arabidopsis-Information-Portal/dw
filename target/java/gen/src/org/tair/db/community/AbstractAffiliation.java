/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package org.tair.db.community;


import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;
import com.poesys.db.dto.DtoStatusException;


/**
 * <p>
 * A data-access layer data-transfer object for the Affiliation. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * a link between a person and an organization
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>AssociationKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: false
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractAffiliation extends AbstractDto implements IAffiliation {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  // Setter strategy nested classes for single-object associations
  
  /**
   * Nested class that manages the organization association data
   *
   * Source: AddAssociationKeyObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryOrganizationSetter extends com.poesys.db.dto.AbstractObjectSetter<org.tair.db.community.IOrganization> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryOrganizationSetter object.
     */
    public QueryOrganizationSetter() {
      super("org.tair.db.community", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.community.Organization.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return organizationKey;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.community.IOrganization> getSql() {
      return new org.tair.db.community.sql.QueryOrganization();
    }

    @Override
    protected void set(org.tair.db.community.IOrganization dto) {
      // No status change, this is just filling in the object data.
      organization = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated organization is not null
      return organization != null;
    }
  }


  /**
   * Foreign key object used by QueryOrganizationSetter nested class to query object
   */
  private IPrimaryKey organizationKey;
  
  /**
   * Set the foreign key organizationKey. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param organizationKey the foreign key
   */
  void setOrganizationKey(IPrimaryKey organizationKey) {
    this.organizationKey = organizationKey;
  }

  /**
   * Nested class that manages the affiliate association data
   *
   * Source: AddAssociationKeyObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryAffiliateSetter extends com.poesys.db.dto.AbstractObjectSetter<org.tair.db.community.IPerson> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryAffiliateSetter object.
     */
    public QueryAffiliateSetter() {
      super("org.tair.db.community", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.community.Person.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return affiliateKey;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.community.IPerson> getSql() {
      return new org.tair.db.community.sql.QueryPerson();
    }

    @Override
    protected void set(org.tair.db.community.IPerson dto) {
      // No status change, this is just filling in the object data.
      affiliate = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated affiliate is not null
      return affiliate != null;
    }
  }


  /**
   * Foreign key object used by QueryAffiliateSetter nested class to query object
   */
  private IPrimaryKey affiliateKey;
  
  /**
   * Set the foreign key affiliateKey. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param affiliateKey the foreign key
   */
  void setAffiliateKey(IPrimaryKey affiliateKey) {
    this.affiliateKey = affiliateKey;
  }


  /**
   * Create an empty Affiliation for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractAffiliation() {
    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();

    // Add the setters for the organization property.
    querySetters.add(new QueryOrganizationSetter());

    // Add the setters for the affiliate property.
    querySetters.add(new QueryAffiliateSetter());
  }

  /**
   * Create a Affiliation. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the Affiliation
   * @param affiliatesObject wraps an associated IPerson object
   * @param organizationsObject wraps an associated IOrganization object
   * @param organizationsCommunityId Attribute that is part of the association key
   * @param affiliatesCommunityId Attribute that is part of the association key
   * @param jobTitle the person's job title within this organization, if any
   * @param pi whether the person acts in the role of a principal investigator for the
organization
   */
  public AbstractAffiliation(IPrimaryKey key, org.tair.db.community.IPerson affiliatesObject, org.tair.db.community.IOrganization organizationsObject, java.math.BigInteger organizationsCommunityId, java.math.BigInteger affiliatesCommunityId, java.lang.String jobTitle, java.lang.Boolean pi) {
    this.key = key;

    this.organizationsCommunityId = organizationsCommunityId;

    if (organizationsCommunityId == null) {
      throw new com.poesys.db.InvalidParametersException("organizationsCommunityId is required for " + key.getValueList());
    }
    
    this.affiliatesCommunityId = affiliatesCommunityId;

    if (affiliatesCommunityId == null) {
      throw new com.poesys.db.InvalidParametersException("affiliatesCommunityId is required for " + key.getValueList());
    }
    
    this.jobTitle = jobTitle;

    this.pi = pi;

    // Associated key object
    affiliate = affiliatesObject;
    
    // Associated key object
    organization = organizationsObject;
    
    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    
    // Add the setters for the organization property.
    querySetters.add(new QueryOrganizationSetter());
    
    // Set the internal key data member for the organization object retrieval.
    organizationKey = org.tair.db.community.CommunityFactory.getOrganizationPrimaryKey(organizationsCommunityId/* Source: AddGeneratedKeyProperties + AddInheritedKeyProperties + getAssociatedKeys Key: true */);
    // Add a setter to instantiate the required organization object before insert.
    insertQuerySetters.add(new QueryOrganizationSetter());
    
    // Add the setters for the affiliate property.
    querySetters.add(new QueryAffiliateSetter());
    
    // Set the internal key data member for the affiliate object retrieval.
    affiliateKey = org.tair.db.community.CommunityFactory.getPersonPrimaryKey(affiliatesCommunityId/* Source: AddGeneratedKeyProperties + AddInheritedKeyProperties + getAssociatedKeys Key: true */);
    // Add a setter to instantiate the required affiliate object before insert.
    insertQuerySetters.add(new QueryAffiliateSetter());
  }

  @Override
  public boolean equals(Object arg0) {
    AbstractAffiliation other = (AbstractAffiliation)arg0;
    return other.key.equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    AbstractAffiliation other = (AbstractAffiliation)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.key.compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "org.tair.db.community";
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  @Override
  public java.sql.Connection getConnection() throws java.sql.SQLException {
    java.sql.Connection connection = null;
    
	/* 
	 * The resource bundle for the DTO's subsystem contains the suffix that
	 * distinguishes multiple versions of the subsystem in the database.properties
	 * file, such as "prod" or "test". Most database.properties files have only
	 * one implementation and use external facilities to switch between the
	 * databases (JNDI, for example, or producing different database.properties
	 * files in different setups). Use the subsystem resource bundle to get the
	 * suffix, then use the full subsystem name to get a connection factory for
	 * the DTO's subsystem, then use that factory to get a JDBC connection.
	 */
	java.util.ResourceBundle rb = 
	  java.util.ResourceBundle.getBundle("org.tair.db.community");
    String subsystem =
      "org.tair.db.community"
          + (rb.getString("suffix") == null
             || rb.getString("suffix").length() == 0 ? ""
              : "." + rb.getString("suffix"));
	  
	try {
	  connection = 
	    com.poesys.db.connection.ConnectionFactoryFactory.getInstance(subsystem).getConnection();
	} catch (com.poesys.db.InvalidParametersException e) {
	  throw new java.sql.SQLException(e.getMessage());
	} catch (java.io.IOException e) {
	  throw new java.sql.SQLException(e.getMessage());
	}
	
	return connection;
  }

  /**
   * Nested property jobTitle
   *
   * <p>
   * the person's job title within this organization, if any
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String jobTitle;
  

  public java.lang.String getJobTitle() {
    return jobTitle;
  }

  /**
   * Clear the jobTitle data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearJobTitle() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property pi
   *
   * <p>
   * whether the person acts in the role of a principal investigator for the
   * organization
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Boolean pi;
  

  public java.lang.Boolean getPi() {
    return pi;
  }

  /**
   * Clear the pi data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearPi() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property organization
   *
   * <p>
   * Associated object
   * </p>
   *
   * Added by AddAssociationKeyObjectProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private org.tair.db.community.IOrganization organization;
  

  public org.tair.db.community.IOrganization getOrganization() {
    return organization;
  }

  /**
   * Clear the organization data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearOrganization() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property affiliate
   *
   * <p>
   * Associated object
   * </p>
   *
   * Added by AddAssociationKeyObjectProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private org.tair.db.community.IPerson affiliate;
  

  public org.tair.db.community.IPerson getAffiliate() {
    return affiliate;
  }

  /**
   * Clear the affiliate data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearAffiliate() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property organizationsCommunityId
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddGeneratedKeyProperties + AddInheritedKeyProperties + AddAssociationKeyAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.math.BigInteger organizationsCommunityId;
  

  public java.math.BigInteger getOrganizationsCommunityId() {
    return organizationsCommunityId;
  }

  /**
   * Clear the organizationsCommunityId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearOrganizationsCommunityId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property affiliatesCommunityId
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddGeneratedKeyProperties + AddInheritedKeyProperties + AddAssociationKeyAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.math.BigInteger affiliatesCommunityId;
  

  public java.math.BigInteger getAffiliatesCommunityId() {
    return affiliatesCommunityId;
  }

  /**
   * Clear the affiliatesCommunityId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearAffiliatesCommunityId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {
  }
}