/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package org.tair.db.community;


import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;
import com.poesys.db.dto.DtoStatusException;


/**
 * <p>
 * A data-access layer data-transfer object for the Community. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * A member of the community
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>Persistent</li>
 *     <li>SequenceKey</li>
 * </ul>
 * <p>
 * Class is read/write: false
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractCommunity extends AbstractDto implements ICommunity {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  // Setter strategy nested classes for single-object associations
  
  /**
   * Nested class that manages the country association data
   *
   * Source: AddToOneAssociationRequiredObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryCountrySetter extends com.poesys.db.dto.AbstractObjectSetter<org.tair.db.community.ICountry> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryCountrySetter object.
     */
    public QueryCountrySetter() {
      super("org.tair.db.community", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.community.Country.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return countryKey;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.community.ICountry> getSql() {
      return new org.tair.db.community.sql.QueryCountry();
    }

    @Override
    protected void set(org.tair.db.community.ICountry dto) {
      // No status change, this is just filling in the object data.
      country = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated country is not null
      return country != null;
    }
  }


  /**
   * Foreign key object used by QueryCountrySetter nested class to query object
   */
  private IPrimaryKey countryKey;
  
  /**
   * Set the foreign key countryKey. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param countryKey the foreign key
   */
  void setCountryKey(IPrimaryKey countryKey) {
    this.countryKey = countryKey;
  }

  // Setter strategy nested classes for multiple-object associations

  /**
   * Query setter for querying nested aliases
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.community.sql.QueryAliasesByCommunity
   */
  private class QueryAliasesSetter 
      extends com.poesys.db.dto.AbstractListSetter<org.tair.db.community.ICommunityAlias, ICommunity, java.util.Collection<org.tair.db.community.ICommunityAlias>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryAliasesSetter object.
     */
    public QueryAliasesSetter() {
      super("org.tair.db.community", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.community.CommunityAlias.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ICommunity getParametersDto() {
      return AbstractCommunity.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.tair.db.community.ICommunityAlias, ICommunity> getSql() {
      return new org.tair.db.community.sql.QueryAliasesByCommunity();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.community.ICommunityAlias> list) {
      // No status change; this is just filling in the object data.
      aliases = list;
      // Add the primary keys to the serialized key list if there are any.
      if (aliases != null) {
        for (com.poesys.db.dto.IDbDto object : aliases) {
          aliasesKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated aliases list is not null
      return aliases != null;
    }
  }
   
  /**
   * Query setter for querying nested keywords
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.community.sql.QueryKeywordsByCommunity
   */
  private class QueryKeywordsSetter 
      extends com.poesys.db.dto.AbstractListSetter<org.tair.db.community.ICommunityKeyword, ICommunity, java.util.Collection<org.tair.db.community.ICommunityKeyword>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryKeywordsSetter object.
     */
    public QueryKeywordsSetter() {
      super("org.tair.db.community", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.community.CommunityKeyword.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ICommunity getParametersDto() {
      return AbstractCommunity.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.tair.db.community.ICommunityKeyword, ICommunity> getSql() {
      return new org.tair.db.community.sql.QueryKeywordsByCommunity();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.community.ICommunityKeyword> list) {
      // No status change; this is just filling in the object data.
      keywords = list;
      // Add the primary keys to the serialized key list if there are any.
      if (keywords != null) {
        for (com.poesys.db.dto.IDbDto object : keywords) {
          keywordsKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated keywords list is not null
      return keywords != null;
    }
  }
   
   
   
  /**
   * Create an empty Community for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractCommunity() {
    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();

    // Add the setters for the country property.
    querySetters.add(new QueryCountrySetter());
    
    // Add the many-to-many collection setters for the aliases property.
    querySetters.add(new QueryAliasesSetter());
    
    // Add the many-to-many collection setters for the keywords property.
    querySetters.add(new QueryKeywordsSetter());
    
    // Add the many-to-many collection setters for the publications property.
    
    // Add the many-to-many collection setters for the attributions property.
  }

  /**
   * Create a Community. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the Community
   * @param communityId primary key attribute
   * @param communityType the kind of community member this is: person or organization
   * @param email the email address of the community member
   * @param memberStatus the current status of the community member: new, active, inactive.
A new member is one who has registered but not been activated.
An active member has been activated.
An inactive member has been inactivated.
   * @param countryId foreign key used by setter to query associated object
   */
  public AbstractCommunity(IPrimaryKey key, java.math.BigInteger communityId, java.lang.String communityType, java.lang.String email, java.lang.String memberStatus, java.math.BigInteger countryId) {
    this.key = key;

    this.communityId = communityId;

    if (communityId == null) {
      throw new com.poesys.db.InvalidParametersException("communityId is required for " + key.getValueList());
    }
    
    this.communityType = communityType;

    if (communityType == null) {
      throw new com.poesys.db.InvalidParametersException("communityType is required for " + key.getValueList());
    }
    
    this.email = email;

    this.memberStatus = memberStatus;

    if (memberStatus == null) {
      throw new com.poesys.db.InvalidParametersException("memberStatus is required for " + key.getValueList());
    }
    
    this.countryId = countryId;

    if (countryId == null) {
      throw new com.poesys.db.InvalidParametersException("countryId is required for " + key.getValueList());
    }
    
    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    
    // Add the setters for the country property.
    querySetters.add(new QueryCountrySetter());
    
    // Set the internal key data member for the country object retrieval.
    countryKey = org.tair.db.community.CommunityFactory.getCountryPrimaryKey(countryId/* Source: AddGeneratedKeyProperties + addAssociationForeignKeys: countryId Key: false */);
    // Add a setter to instantiate the required country object before insert.
    insertQuerySetters.add(new QueryCountrySetter());
    
    // Add the many-to-many collection setters for the aliases property.
    querySetters.add(new QueryAliasesSetter());
    
    // Add the many-to-many collection setters for the keywords property.
    querySetters.add(new QueryKeywordsSetter());
    
    // Add the many-to-many collection setters for the publications property.
    
    // Add the many-to-many collection setters for the attributions property.
  }

  @Override
  public boolean equals(Object arg0) {
    AbstractCommunity other = (AbstractCommunity)arg0;
    return other.key.equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    AbstractCommunity other = (AbstractCommunity)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.key.compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "org.tair.db.community";
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
    // Only process deletes if child exists.
    if (aliases != null) {
      for (com.poesys.db.dto.IDbDto dto : aliases) {
        dto.cascadeDelete();
      }
    }
    // Only process deletes if child exists.
    if (keywords != null) {
      for (com.poesys.db.dto.IDbDto dto : keywords) {
        dto.cascadeDelete();
      }
    }
    // Only process deletes if child exists.
    if (publications != null) {
      for (com.poesys.db.dto.IDbDto dto : publications) {
        dto.cascadeDelete();
      }
    }
    // Only process deletes if child exists.
    if (attributions != null) {
      for (com.poesys.db.dto.IDbDto dto : attributions) {
        dto.cascadeDelete();
      }
    }
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  @Override
  public java.sql.Connection getConnection() throws java.sql.SQLException {
    java.sql.Connection connection = null;
    
	/* 
	 * The resource bundle for the DTO's subsystem contains the suffix that
	 * distinguishes multiple versions of the subsystem in the database.properties
	 * file, such as "prod" or "test". Most database.properties files have only
	 * one implementation and use external facilities to switch between the
	 * databases (JNDI, for example, or producing different database.properties
	 * files in different setups). Use the subsystem resource bundle to get the
	 * suffix, then use the full subsystem name to get a connection factory for
	 * the DTO's subsystem, then use that factory to get a JDBC connection.
	 */
	java.util.ResourceBundle rb = 
	  java.util.ResourceBundle.getBundle("org.tair.db.community");
    String subsystem =
      "org.tair.db.community"
          + (rb.getString("suffix") == null
             || rb.getString("suffix").length() == 0 ? ""
              : "." + rb.getString("suffix"));
	  
	try {
	  connection = 
	    com.poesys.db.connection.ConnectionFactoryFactory.getInstance(subsystem).getConnection();
	} catch (com.poesys.db.InvalidParametersException e) {
	  throw new java.sql.SQLException(e.getMessage());
	} catch (java.io.IOException e) {
	  throw new java.sql.SQLException(e.getMessage());
	}
	
	return connection;
  }

  /**
   * Nested property communityId
   *
   * <p>
   * Primary key attribute
   * </p>
   *
   * Added by AddGeneratedKeyProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.math.BigInteger communityId;
  

  public java.math.BigInteger getCommunityId() {
    return communityId;
  }

  /**
   * Clear the communityId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearCommunityId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property communityType
   *
   * <p>
   * the kind of community member this is: person or organization
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String communityType;
  

  public java.lang.String getCommunityType() {
    return communityType;
  }

  /**
   * Clear the communityType data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearCommunityType() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property email
   *
   * <p>
   * the email address of the community member
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String email;
  

  public java.lang.String getEmail() {
    return email;
  }

  /**
   * Clear the email data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearEmail() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property memberStatus
   *
   * <p>
   * the current status of the community member: new, active, inactive.
   * </p>
   * <p>
   * A new member is one who has registered but not been activated.
   * </p>
   * <p>
   * An active member has been activated.
   * </p>
   * <p>
   * An inactive member has been inactivated.
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String memberStatus;
  

  public java.lang.String getMemberStatus() {
    return memberStatus;
  }

  /**
   * Clear the memberStatus data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearMemberStatus() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property country
   *
   * <p>
   * the person's country
   * </p>
   *
   * Added by AddToOneAssociationRequiredObjectProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private org.tair.db.community.ICountry country;
  

  public org.tair.db.community.ICountry getCountry() {
    return country;
  }

  /**
   * Clear the country data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearCountry() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property countryId
   *
   * <p>
   * Foreign key used by setter to query associated object
   * </p>
   *
   * Added by AddGeneratedKeyProperties + AddToOneAssociationAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.math.BigInteger countryId;
  

  public java.math.BigInteger getCountryId() {
    return countryId;
  }

  /**
   * Clear the countryId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearCountryId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property aliases
   *
   * <p>
   * the set of alternative names for the community member
   * </p>
   *
   * Added by AddToManyChildCollectionProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.tair.db.community.ICommunityAlias> aliases;
  // Ordered list of keys of the objects in the $property.uniquename list
  java.util.List<com.poesys.db.pk.IPrimaryKey> aliasesKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  

  public java.util.Collection<org.tair.db.community.ICommunityAlias> getAliases() {
    return aliases;
  }

  /**
   * Clear the aliases data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearAliases() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property keywords
   *
   * <p>
   * the set of keywords associated with the community member
   * </p>
   *
   * Added by AddToManyChildCollectionProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.tair.db.community.ICommunityKeyword> keywords;
  // Ordered list of keys of the objects in the $property.uniquename list
  java.util.List<com.poesys.db.pk.IPrimaryKey> keywordsKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  

  public java.util.Collection<org.tair.db.community.ICommunityKeyword> getKeywords() {
    return keywords;
  }

  /**
   * Clear the keywords data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearKeywords() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property publications
   *
   * <p>
   * an ordered list of references authored by the community member
   * </p>
   *
   * Added by AddToManyChildCollectionProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: true
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.List<org.tair.db.community.ICommunityReference> publications;
  // Ordered list of keys of the objects in the $property.uniquename list
  java.util.List<com.poesys.db.pk.IPrimaryKey> publicationsKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  

  public java.util.List<org.tair.db.community.ICommunityReference> getPublications() throws java.sql.SQLException {
    return publications;
  }

  /**
   * Clear the publications data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearPublications() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  public void setPublications(java.util.List<org.tair.db.community.ICommunityReference> publications) {
    this.publications = publications;
    // Add the primary keys of the new collection to the serialized key list.
    publicationsKeys.clear();
    if (publications != null) {
      for (com.poesys.db.dto.IDbDto object : publications) {
        publicationsKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }

  /**
   * Nested property attributions
   *
   * <p>
   * the ordered list of objects attributed to this community member, ordered by
   * order of addition to the database
   * </p>
   *
   * Added by AddToManyChildCollectionProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: true
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.List<org.tair.db.community.ICommunityAttribution> attributions;
  // Ordered list of keys of the objects in the $property.uniquename list
  java.util.List<com.poesys.db.pk.IPrimaryKey> attributionsKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  

  public java.util.List<org.tair.db.community.ICommunityAttribution> getAttributions() throws java.sql.SQLException {
    return attributions;
  }

  /**
   * Clear the attributions data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearAttributions() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  public void setAttributions(java.util.List<org.tair.db.community.ICommunityAttribution> attributions) {
    this.attributions = attributions;
    // Add the primary keys of the new collection to the serialized key list.
    attributionsKeys.clear();
    if (attributions != null) {
      for (com.poesys.db.dto.IDbDto object : attributions) {
        attributionsKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {

    // Clean up aliases.
    if (subject != null && subject instanceof org.tair.db.community.ICommunityAlias && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        aliases != null) {
      // Delete to-many aliases child from collection
      aliases.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Clean up keywords.
    if (subject != null && subject instanceof org.tair.db.community.ICommunityKeyword && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        keywords != null) {
      // Delete to-many keywords child from collection
      keywords.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Clean up publications.
    if (subject != null && subject instanceof org.tair.db.community.ICommunityReference && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        publications != null) {
      // Delete to-many publications child from collection
      publications.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Clean up attributions.
    if (subject != null && subject instanceof org.tair.db.community.ICommunityAttribution && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        attributions != null) {
      // Delete to-many attributions child from collection
      attributions.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }
  }
}