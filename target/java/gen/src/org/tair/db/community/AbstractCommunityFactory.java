/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractSubsystemFactory.vsl

package org.tair.db.community;


import java.sql.ResultSet;
import java.sql.SQLException;

import com.poesys.db.InvalidParametersException;
import com.poesys.db.pk.IPrimaryKey;


/**
 * <p>
 * A separate, shareable set of factory methods for all the community
 * classes, including JDBC data-setting, parameter-setting, and
 * primary-key-generation methods. This class is abstract and has a single
 * concrete subclass, CommunityFactory, that you can modify to override
 * the default behavior in the abstract class or implement an as-yet 
 * unimplemented method.
 * </p>
 * 
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractCommunityFactory {
  /**
   * Retrieve the CommunityKeyword data from the result set's current row and create
   * a CommunityKeyword object.
   * 
   * @param key the primary key for the Community
   * @param rs the query result set
   * @return a CommunityKeyword instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ICommunityKeyword getCommunityKeywordData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument communityId gets the JDBC value with a function call.
    java.math.BigInteger communityIdValue = rs.getBigDecimal("communityId") == null ? null : rs.getBigDecimal("communityId").toBigInteger();;
    // Constructor argument keyword gets the JDBC value with a function call.
    java.lang.String keywordValue = rs.getString("keyword");
    // Constructor argument keywordType gets the JDBC value with a function call.
    java.lang.String keywordTypeValue = rs.getString("keywordType");
    // CommunityKeyword has lazily loaded members, so create a Proxy.
    ICommunityKeyword newObject = 
      new CommunityKeywordProxy(new CommunityKeyword(key, communityIdValue, keywordValue, keywordTypeValue));
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a CommunityKeyword based on a result set that must contain
   * the CommunityKeyword primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a CommunityKeyword CompositeKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getCommunityKeywordPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    IPrimaryKey parentKey = getCommunityPrimaryKey(rs, "");
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    java.lang.String keywordValue = rs.getString("keyword");
    list.add(new com.poesys.db.col.StringColumnValue(prefix + "keyword", keywordValue));
	IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.tair.db.community.CommunityKeyword");
    key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "org.tair.db.community.CommunityKeyword");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a CommunityKeyword based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param communityId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param keyword the search keyword that applies to the community member
   * @return a CommunityKeyword CompositeKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getCommunityKeywordPrimaryKey(java.math.BigInteger communityId, java.lang.String keyword)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    IPrimaryKey parentKey = getCommunityPrimaryKey(communityId);

    // Check the parent key; if it is null, the return key should be null.
    if (parentKey != null) {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.StringColumnValue("keyword", keyword));
	  IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.tair.db.community.CommunityKeyword");
      key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "org.tair.db.community.CommunityKeyword");
    }
    return key;
  }

  /**
   * Retrieve the Community data from the result set's current row and create
   * a Community object.
   * 
   * @param key the primary key for the Community
   * @param rs the query result set
   * @return a Community instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ICommunity getCommunityData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument communityId gets the JDBC value with a function call.
    java.math.BigInteger communityIdValue = rs.getBigDecimal("communityId") == null ? null : rs.getBigDecimal("communityId").toBigInteger();;
    // Constructor argument communityType gets the JDBC value with a function call.
    java.lang.String communityTypeValue = rs.getString("communityType");
    // Constructor argument email gets the JDBC value with a function call.
    java.lang.String emailValue = rs.getString("email");
    // Constructor argument memberStatus gets the JDBC value with a function call.
    java.lang.String memberStatusValue = rs.getString("memberStatus");
    // Constructor argument countryId gets the JDBC value with a function call.
    java.math.BigInteger countryIdValue = rs.getBigDecimal("countryId") == null ? null : rs.getBigDecimal("countryId").toBigInteger();;
    // Community has lazily loaded members, so create a Proxy.
    ICommunity newObject = 
      new CommunityProxy(new Community(key, communityIdValue, communityTypeValue, emailValue, memberStatusValue, countryIdValue));
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a Community based on a result set that must contain
   * the Community primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   *     <li>SequenceKey</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a Community SequenceKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getCommunityPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.math.BigInteger communityIdValue = rs.getBigDecimal("communityId") == null ? null : rs.getBigDecimal("communityId").toBigInteger();;
    key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey(prefix + "communityId", communityIdValue, "org.tair.db.community.Community");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a Community based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   *     <li>SequenceKey</li>
   * </ul>
   * 
   * @param communityId primary key attribute
   * @return a Community SequenceKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getCommunityPrimaryKey(java.math.BigInteger communityId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Only create a key if the input value is present.
    if (communityId != null) {
      key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey("communityId", communityId, "org.tair.db.community.Community");
    }
    return key;
  }

  /**
   * Retrieve the CommunityAttribution data from the result set's current row and create
   * a CommunityAttribution object.
   * 
   * @param key the primary key for the Community
   * @param rs the query result set
   * @return a CommunityAttribution instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ICommunityAttribution getCommunityAttributionData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument communityId gets the JDBC value with a function call.
    java.math.BigInteger communityIdValue = rs.getBigDecimal("communityId") == null ? null : rs.getBigDecimal("communityId").toBigInteger();;
    // Constructor argument attributionType gets the JDBC value with a function call.
    java.lang.String attributionTypeValue = rs.getString("attributionType");
    // Constructor argument name gets the JDBC value with a function call.
    java.lang.String nameValue = rs.getString("name");
    // Constructor argument tairObjectId gets the JDBC value with a function call.
    java.lang.Long tairObjectIdValue = rs.getLong("tairObjectId");
    // Constructor argument attributionDate gets the JDBC value with a function call.
    java.sql.Timestamp attributionDateValue = rs.getTimestamp("attributionDate");
    // Constructor argument attributionComment gets the JDBC value with a function call.
    java.lang.String attributionCommentValue = rs.getString("attributionComment");
    // CommunityAttribution has lazily loaded members, so create a Proxy.
    ICommunityAttribution newObject = 
      new CommunityAttributionProxy(new CommunityAttribution(key, communityIdValue, attributionTypeValue, nameValue, tairObjectIdValue, attributionDateValue, attributionCommentValue));
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a CommunityAttribution based on a result set that must contain
   * the CommunityAttribution primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a CommunityAttribution CompositeKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getCommunityAttributionPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    IPrimaryKey parentKey = getCommunityPrimaryKey(rs, "");
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    java.lang.String attributionTypeValue = rs.getString("attributionType");
    list.add(new com.poesys.db.col.StringColumnValue(prefix + "attributionType", attributionTypeValue));
    java.lang.String nameValue = rs.getString("name");
    list.add(new com.poesys.db.col.StringColumnValue(prefix + "name", nameValue));
    java.lang.Long tairObjectIdValue = rs.getLong("tairObjectId");
    list.add(new com.poesys.db.col.LongColumnValue(prefix + "tairObjectId", tairObjectIdValue));
	IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.tair.db.community.CommunityAttribution");
    key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "org.tair.db.community.CommunityAttribution");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a CommunityAttribution based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param attributionType the nature of the attribution, such as "submitted_by" or "available_from"; first
part of the ordering part of the primary sub-key
   * @param communityId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param name the name of the attributed object, such as the AGI number or the germplasm name;
if there is no name, this should contain some kind of descriptive text or
identifier that allows identification of the object;
second part of the ordering part of the primary sub-key
   * @param tairObjectId the unique TAIR identifier for the object being attributed to a community
member; used to link to the object page
   * @return a CommunityAttribution CompositeKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getCommunityAttributionPrimaryKey(java.lang.String attributionType, java.math.BigInteger communityId, java.lang.String name, java.lang.Long tairObjectId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    IPrimaryKey parentKey = getCommunityPrimaryKey(communityId);

    // Check the parent key; if it is null, the return key should be null.
    if (parentKey != null) {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.StringColumnValue("attributionType", attributionType));
      list.add(new com.poesys.db.col.StringColumnValue("name", name));
      list.add(new com.poesys.db.col.LongColumnValue("tairObjectId", tairObjectId));
	  IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.tair.db.community.CommunityAttribution");
      key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "org.tair.db.community.CommunityAttribution");
    }
    return key;
  }

  /**
   * Retrieve the Person data from the result set's current row and create
   * a Person object.
   * 
   * @param key the primary key for the Community
   * @param rs the query result set
   * @return a Person instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static IPerson getPersonData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument communityId gets the JDBC value with a function call.
    java.math.BigInteger communityIdValue = rs.getBigDecimal("communityId") == null ? null : rs.getBigDecimal("communityId").toBigInteger();;
    // Constructor argument communityType gets the JDBC value with a function call.
    java.lang.String communityTypeValue = rs.getString("communityType");
    // Constructor argument email gets the JDBC value with a function call.
    java.lang.String emailValue = rs.getString("email");
    // Constructor argument memberStatus gets the JDBC value with a function call.
    java.lang.String memberStatusValue = rs.getString("memberStatus");
    // Constructor argument countryId gets the JDBC value with a function call.
    java.math.BigInteger countryIdValue = rs.getBigDecimal("countryId") == null ? null : rs.getBigDecimal("countryId").toBigInteger();;
    // Constructor argument userName gets the JDBC value with a function call.
    java.lang.String userNameValue = rs.getString("userName");
    // Constructor argument firstName gets the JDBC value with a function call.
    java.lang.String firstNameValue = rs.getString("firstName");
    // Constructor argument middleName gets the JDBC value with a function call.
    java.lang.String middleNameValue = rs.getString("middleName");
    // Constructor argument lastName gets the JDBC value with a function call.
    java.lang.String lastNameValue = rs.getString("lastName");
    // Constructor argument suffix gets the JDBC value with a function call.
    java.lang.String suffixValue = rs.getString("suffix");
    // Constructor argument researchInterest gets the JDBC value with a function call.
    java.lang.String researchInterestValue = rs.getString("researchInterest");
    // Person has lazily loaded members, so create a Proxy.
    IPerson newObject = 
      new PersonProxy(new Person(key, communityIdValue, communityTypeValue, emailValue, memberStatusValue, countryIdValue, userNameValue, firstNameValue, middleNameValue, lastNameValue, suffixValue, researchInterestValue));
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a Person based on a result set that must contain
   * the Person primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a Person None primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getPersonPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    key = org.tair.db.community.CommunityFactory.getCommunityPrimaryKey(rs, "");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a Person based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param communityId primary key attribute
   * @return a Person None primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getPersonPrimaryKey(java.math.BigInteger communityId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    key = org.tair.db.community.CommunityFactory.getCommunityPrimaryKey(communityId);
    return key;
  }

  /**
   * Retrieve the CommunityAlias data from the result set's current row and create
   * a CommunityAlias object.
   * 
   * @param key the primary key for the Community
   * @param rs the query result set
   * @return a CommunityAlias instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ICommunityAlias getCommunityAliasData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument communityId gets the JDBC value with a function call.
    java.math.BigInteger communityIdValue = rs.getBigDecimal("communityId") == null ? null : rs.getBigDecimal("communityId").toBigInteger();;
    // Constructor argument alias gets the JDBC value with a function call.
    java.lang.String aliasValue = rs.getString("alias");
    // CommunityAlias has lazily loaded members, so create a Proxy.
    ICommunityAlias newObject = 
      new CommunityAliasProxy(new CommunityAlias(key, communityIdValue, aliasValue));
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a CommunityAlias based on a result set that must contain
   * the CommunityAlias primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a CommunityAlias CompositeKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getCommunityAliasPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    IPrimaryKey parentKey = getCommunityPrimaryKey(rs, "");
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    java.lang.String aliasValue = rs.getString("alias");
    list.add(new com.poesys.db.col.StringColumnValue(prefix + "alias", aliasValue));
	IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.tair.db.community.CommunityAlias");
    key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "org.tair.db.community.CommunityAlias");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a CommunityAlias based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param alias an alternate name for the community member
   * @param communityId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @return a CommunityAlias CompositeKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getCommunityAliasPrimaryKey(java.lang.String alias, java.math.BigInteger communityId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    IPrimaryKey parentKey = getCommunityPrimaryKey(communityId);

    // Check the parent key; if it is null, the return key should be null.
    if (parentKey != null) {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.StringColumnValue("alias", alias));
	  IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.tair.db.community.CommunityAlias");
      key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "org.tair.db.community.CommunityAlias");
    }
    return key;
  }

  /**
   * Retrieve the Country data from the result set's current row and create
   * a Country object.
   * 
   * @param key the primary key for the Community
   * @param rs the query result set
   * @return a Country instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ICountry getCountryData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument countryId gets the JDBC value with a function call.
    java.math.BigInteger countryIdValue = rs.getBigDecimal("countryId") == null ? null : rs.getBigDecimal("countryId").toBigInteger();;
    // Constructor argument name gets the JDBC value with a function call.
    java.lang.String nameValue = rs.getString("name");
    // Country has no lazily loaded members, so there is no need for Proxy.
    ICountry newObject = 
      new Country(key, countryIdValue, nameValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a Country based on a result set that must contain
   * the Country primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   *     <li>SequenceKey</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a Country SequenceKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getCountryPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.math.BigInteger countryIdValue = rs.getBigDecimal("countryId") == null ? null : rs.getBigDecimal("countryId").toBigInteger();;
    key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey(prefix + "countryId", countryIdValue, "org.tair.db.community.Country");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a Country based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   *     <li>SequenceKey</li>
   * </ul>
   * 
   * @param countryId primary key attribute
   * @return a Country SequenceKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getCountryPrimaryKey(java.math.BigInteger countryId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Only create a key if the input value is present.
    if (countryId != null) {
      key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey("countryId", countryId, "org.tair.db.community.Country");
    }
    return key;
  }

  /**
   * Retrieve the CommunityReference data from the result set's current row and create
   * a CommunityReference object.
   * 
   * @param key the primary key for the Community
   * @param rs the query result set
   * @return a CommunityReference instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ICommunityReference getCommunityReferenceData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument communityId gets the JDBC value with a function call.
    java.math.BigInteger communityIdValue = rs.getBigDecimal("communityId") == null ? null : rs.getBigDecimal("communityId").toBigInteger();;
    // Constructor argument tairObjectId gets the JDBC value with a function call.
    java.lang.Long tairObjectIdValue = rs.getLong("tairObjectId");
    // Constructor argument title gets the JDBC value with a function call.
    java.lang.String titleValue = rs.getString("title");
    // Constructor argument source gets the JDBC value with a function call.
    java.lang.String sourceValue = rs.getString("source");
    // Constructor argument publicationYear gets the JDBC value with a function call.
    java.lang.Integer publicationYearValue = rs.getInt("publicationYear");
    // CommunityReference has lazily loaded members, so create a Proxy.
    ICommunityReference newObject = 
      new CommunityReferenceProxy(new CommunityReference(key, communityIdValue, tairObjectIdValue, titleValue, sourceValue, publicationYearValue));
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a CommunityReference based on a result set that must contain
   * the CommunityReference primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a CommunityReference CompositeKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getCommunityReferencePrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    IPrimaryKey parentKey = getCommunityPrimaryKey(rs, "");
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    java.lang.Long tairObjectIdValue = rs.getLong("tairObjectId");
    list.add(new com.poesys.db.col.LongColumnValue(prefix + "tairObjectId", tairObjectIdValue));
	IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.tair.db.community.CommunityReference");
    key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "org.tair.db.community.CommunityReference");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a CommunityReference based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param communityId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param tairObjectId the unique TAIR identifier for the reference; used to link to the reference page
   * @return a CommunityReference CompositeKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getCommunityReferencePrimaryKey(java.math.BigInteger communityId, java.lang.Long tairObjectId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    IPrimaryKey parentKey = getCommunityPrimaryKey(communityId);

    // Check the parent key; if it is null, the return key should be null.
    if (parentKey != null) {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.LongColumnValue("tairObjectId", tairObjectId));
	  IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.tair.db.community.CommunityReference");
      key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "org.tair.db.community.CommunityReference");
    }
    return key;
  }

  /**
   * Retrieve the Affiliation data from the result set's current row and create
   * a Affiliation object.
   * 
   * @param key the primary key for the Community
   * @param rs the query result set
   * @return a Affiliation instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static IAffiliation getAffiliationData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Assign null to association key object, as this is set by QuerySetter
    org.tair.db.community.IPerson affiliatesObject = null;
    // Assign null to association key object, as this is set by QuerySetter
    org.tair.db.community.IOrganization organizationsObject = null;
    // Constructor argument organizationsCommunityId gets the JDBC value with a function call.
    java.math.BigInteger organizationsCommunityIdValue = rs.getBigDecimal("organizationCommunityId") == null ? null : rs.getBigDecimal("organizationCommunityId").toBigInteger();;
    // Constructor argument affiliatesCommunityId gets the JDBC value with a function call.
    java.math.BigInteger affiliatesCommunityIdValue = rs.getBigDecimal("affiliateCommunityId") == null ? null : rs.getBigDecimal("affiliateCommunityId").toBigInteger();;
    // Constructor argument jobTitle gets the JDBC value with a function call.
    java.lang.String jobTitleValue = rs.getString("jobTitle");
    // Constructor argument pi gets the JDBC value with a function call.
    java.lang.Boolean piValue = rs.getBoolean("pi");
    if (rs.wasNull()) {
      piValue = null;
    };
    // Affiliation has no lazily loaded members, so there is no need for Proxy.
    IAffiliation newObject = 
      new Affiliation(key, affiliatesObject, organizationsObject, organizationsCommunityIdValue, affiliatesCommunityIdValue, jobTitleValue, piValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a Affiliation based on a result set that must contain
   * the Affiliation primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>AssociationKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a Affiliation AssociationKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getAffiliationPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.util.ArrayList<IPrimaryKey> list =
        new java.util.ArrayList<IPrimaryKey>();
	key = com.poesys.db.pk.PrimaryKeyFactory.createAssociationKey(list, "org.tair.db.community.Affiliation");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a Affiliation based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>AssociationKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param organizationsCommunityId Attribute that is part of the association key
   * @param affiliatesCommunityId Attribute that is part of the association key
   * @return a Affiliation AssociationKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getAffiliationPrimaryKey(java.math.BigInteger organizationsCommunityId, java.math.BigInteger affiliatesCommunityId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Track whether any input keys are null.
    boolean noNulls = true;
    java.util.ArrayList<IPrimaryKey> list =
        new java.util.ArrayList<IPrimaryKey>();
    if (noNulls) {
	  key = com.poesys.db.pk.PrimaryKeyFactory.createAssociationKey(list, "org.tair.db.community.Affiliation");
	}
    return key;
  }

  /**
   * Retrieve the Organization data from the result set's current row and create
   * a Organization object.
   * 
   * @param key the primary key for the Community
   * @param rs the query result set
   * @return a Organization instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static IOrganization getOrganizationData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument communityId gets the JDBC value with a function call.
    java.math.BigInteger communityIdValue = rs.getBigDecimal("communityId") == null ? null : rs.getBigDecimal("communityId").toBigInteger();;
    // Constructor argument communityType gets the JDBC value with a function call.
    java.lang.String communityTypeValue = rs.getString("communityType");
    // Constructor argument email gets the JDBC value with a function call.
    java.lang.String emailValue = rs.getString("email");
    // Constructor argument memberStatus gets the JDBC value with a function call.
    java.lang.String memberStatusValue = rs.getString("memberStatus");
    // Constructor argument countryId gets the JDBC value with a function call.
    java.math.BigInteger countryIdValue = rs.getBigDecimal("countryId") == null ? null : rs.getBigDecimal("countryId").toBigInteger();;
    // Constructor argument name gets the JDBC value with a function call.
    java.lang.String nameValue = rs.getString("name");
    // Constructor argument organizationType gets the JDBC value with a function call.
    java.lang.String organizationTypeValue = rs.getString("organizationType");
    // Constructor argument description gets the JDBC value with a function call.
    java.lang.String descriptionValue = rs.getString("description");
    // Constructor argument commercial gets the JDBC value with a function call.
    java.lang.Boolean commercialValue = rs.getBoolean("commercial");
    if (rs.wasNull()) {
      commercialValue = null;
    };
    // Organization has lazily loaded members, so create a Proxy.
    IOrganization newObject = 
      new OrganizationProxy(new Organization(key, communityIdValue, communityTypeValue, emailValue, memberStatusValue, countryIdValue, nameValue, organizationTypeValue, descriptionValue, commercialValue));
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a Organization based on a result set that must contain
   * the Organization primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a Organization None primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getOrganizationPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    key = org.tair.db.community.CommunityFactory.getCommunityPrimaryKey(rs, "");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a Organization based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param communityId primary key attribute
   * @return a Organization None primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getOrganizationPrimaryKey(java.math.BigInteger communityId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    key = org.tair.db.community.CommunityFactory.getCommunityPrimaryKey(communityId);
    return key;
  }

}