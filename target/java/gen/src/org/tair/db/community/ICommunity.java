/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: IDbDto.vsl

package org.tair.db.community;

import com.poesys.db.dto.IDbDto;

import com.poesys.db.dto.DtoStatusException;
import com.poesys.db.pk.IPrimaryKey;


/**
 * <p>
 * A data-access layer data-transfer-object interface for the Community. 
 * The data-transfer-object class and proxy class implement this interface, as
 * does the business-layer data-transfer-object class.
 * </p>
 * <p>
 * A member of the community
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>Persistent</li>
 *     <li>SequenceKey</li>
 * </ul>
 * <p>
 * Class is read/write: false
 * </p>
 * 
 * @author Poesys/DB Cartridge
 */
public interface ICommunity extends IDbDto {

  boolean equals(Object arg0);

  int hashCode();

  /**
   * <p>
   * Mark any children of this DTO as deleted.
   * </p>
   *
   * @throws DtoStatusException when the child cannot be set to DELETED status
   */
  void markChildrenDeleted() throws DtoStatusException;

  IPrimaryKey getPrimaryKey();
  

  /**
   * <p>
   * Primary key attribute
   * </p>
   * <p>
   * Added by AddGeneratedKeyProperties
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: ${property.prefix}
   * </p>
   * @return a java.math.BigInteger communityId
   */
  public java.math.BigInteger getCommunityId();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not true
// Read/Write property: false

  /**
   * <p>
   * the kind of community member this is: person or organization
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: communityType
   * </p>
   * @return a java.lang.String communityType
   */
  public java.lang.String getCommunityType();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * the email address of the community member
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: email
   * </p>
   * @return a java.lang.String email
   */
  public java.lang.String getEmail();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * the current status of the community member: new, active, inactive.
   * </p>
   * <p>
   * A new member is one who has registered but not been activated.
   * </p>
   * <p>
   * An active member has been activated.
   * </p>
   * <p>
   * An inactive member has been inactivated.
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: memberStatus
   * </p>
   * @return a java.lang.String memberStatus
   */
  public java.lang.String getMemberStatus();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * the person's country
   * </p>
   * <p>
   * Added by AddToOneAssociationRequiredObjectProperties
   * Owning DTO: Country
   * Owning package: org.tair.db.community
   * Property prefix: country
   * </p>
   * @return a org.tair.db.community.ICountry country
   */
  public org.tair.db.community.ICountry getCountry();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * Foreign key used by setter to query associated object
   * </p>
   * <p>
   * Added by AddGeneratedKeyProperties + AddToOneAssociationAttributeProperties
   * Owning DTO: Country
   * Owning package: org.tair.db.community
   * Property prefix: country
   * </p>
   * @return a java.math.BigInteger countryId
   */
  public java.math.BigInteger getCountryId();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not true
// Read/Write property: false

  /**
   * <p>
   * the set of alternative names for the community member
   * </p>
   * <p>
   * Added by AddToManyChildCollectionProperties
   * Owning DTO: CommunityAlias
   * Owning package: org.tair.db.community
   * Property prefix: aliases
   * </p>
   * @return a java.util.Collection<org.tair.db.community.ICommunityAlias> aliases
   */
  public java.util.Collection<org.tair.db.community.ICommunityAlias> getAliases();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * the set of keywords associated with the community member
   * </p>
   * <p>
   * Added by AddToManyChildCollectionProperties
   * Owning DTO: CommunityKeyword
   * Owning package: org.tair.db.community
   * Property prefix: keywords
   * </p>
   * @return a java.util.Collection<org.tair.db.community.ICommunityKeyword> keywords
   */
  public java.util.Collection<org.tair.db.community.ICommunityKeyword> getKeywords();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * an ordered list of references authored by the community member
   * </p>
   * <p>
   * Added by AddToManyChildCollectionProperties
   * Owning DTO: CommunityReference
   * Owning package: org.tair.db.community
   * Property prefix: publications
   * </p>
   * <p>
   * This property loads lazily on demand rather than when you first query the 
   * ICommunity object.
   * </p>
   * @return a java.util.List<org.tair.db.community.ICommunityReference> publications
   * @throws java.sql.SQLException when the method can't get a SQL connection to 
   *                               load the property lazily
   */
  public java.util.List<org.tair.db.community.ICommunityReference> getPublications() throws java.sql.SQLException;

  /**
   * Clear the publications so that it will lazily reload.
   */
  public void clearPublications();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * the ordered list of objects attributed to this community member, ordered by
   * order of addition to the database
   * </p>
   * <p>
   * Added by AddToManyChildCollectionProperties
   * Owning DTO: CommunityAttribution
   * Owning package: org.tair.db.community
   * Property prefix: attributions
   * </p>
   * <p>
   * This property loads lazily on demand rather than when you first query the 
   * ICommunity object.
   * </p>
   * @return a java.util.List<org.tair.db.community.ICommunityAttribution> attributions
   * @throws java.sql.SQLException when the method can't get a SQL connection to 
   *                               load the property lazily
   */
  public java.util.List<org.tair.db.community.ICommunityAttribution> getAttributions() throws java.sql.SQLException;

  /**
   * Clear the attributions so that it will lazily reload.
   */
  public void clearAttributions();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false
}