/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDtoProxy.vsl

package org.tair.db.community;


import com.poesys.db.dto.AbstractLazyLoadingDtoProxy;


/**
 * <p>
 * A data-access layer data-transfer object (DTO) lazy-loading proxy for the 
 * Community. This class is an abstract class that contains AndroMDA 
 * generated code; change nothing in this class. Instead, override any methods 
 * in the concrete subclass generated in the same package. AndroMDA will 
 * overwrite this class each time you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * A member of the community
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractCommunityProxy extends AbstractLazyLoadingDtoProxy implements ICommunity {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;

  // Lazy-loading query setter strategy nested classes for single-object associations
  


  /**
   * Read-Object setter for de-serializing nested aliases collection
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.community.sql.QueryCommunityAlias
   */
  private class ReadAliasesSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.tair.db.community.ICommunityAlias> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadAliasesSetter object to read the aliases collection.
     */
    public ReadAliasesSetter() {
      super("org.tair.db.community", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.community.CommunityAlias.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.community.ICommunityAlias> getObjectCollection() {
      java.util.Collection<org.tair.db.community.ICommunityAlias> aliases =  ((org.tair.db.community.Community)dto).getAliases();
      return aliases;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.tair.db.community.Community)dto).aliasesKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.community.ICommunityAlias> getSql() {
      return new org.tair.db.community.sql.QueryCommunityAlias();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.community.ICommunityAlias> collection) {
      ((org.tair.db.community.Community)dto).aliases = collection;
    }
  }



  /**
   * Read-Object setter for de-serializing nested keywords collection
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.community.sql.QueryCommunityKeyword
   */
  private class ReadKeywordsSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.tair.db.community.ICommunityKeyword> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadKeywordsSetter object to read the keywords collection.
     */
    public ReadKeywordsSetter() {
      super("org.tair.db.community", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.community.CommunityKeyword.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.community.ICommunityKeyword> getObjectCollection() {
      java.util.Collection<org.tair.db.community.ICommunityKeyword> keywords =  ((org.tair.db.community.Community)dto).getKeywords();
      return keywords;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.tair.db.community.Community)dto).keywordsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.community.ICommunityKeyword> getSql() {
      return new org.tair.db.community.sql.QueryCommunityKeyword();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.community.ICommunityKeyword> collection) {
      ((org.tair.db.community.Community)dto).keywords = collection;
    }
  }

    // Setter strategy nested classes for multiple-object associations

  /** Flag indicating whether the publications property has been loaded */
  boolean publicationsLoaded = false;

  /**
   * Query setter for lazily querying nested publications collection
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.community.sql.QueryPublicationsByCommunity
   */
  private class QueryPublicationsSetter 
      extends com.poesys.db.dto.AbstractLazyListSetter<org.tair.db.community.ICommunityReference, ICommunity, java.util.List<org.tair.db.community.ICommunityReference>> {
    /** Serial version UID for Serializable object */
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryPublicationsSetter object.
     */
    public QueryPublicationsSetter() {
      super("org.tair.db.community", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.community.CommunityReference.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ICommunity getParametersDto() {
      return AbstractCommunityProxy.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.tair.db.community.ICommunityReference, ICommunity> getSql() {
      return new org.tair.db.community.sql.QueryPublicationsByCommunity();
    }

    @Override
    protected void set(java.util.List<org.tair.db.community.ICommunityReference> collection) {
      try {
        // Register the observer parent with the subject children.
        for (org.tair.db.community.ICommunityReference child : collection) {
          child.attach(AbstractCommunityProxy.this.dto,
                              com.poesys.db.dao.DataEvent.MARKED_DELETED);
          child.attach(AbstractCommunityProxy.this.dto, com.poesys.db.dao.DataEvent.DELETE);
        }
        setPublications(collection);
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Just lazy loading here, not actually setting. Ignore this exception.        
      }
    }

    @Override
    public boolean isSet() {
      // Set if proxy has loaded publications
      return publicationsLoaded;
    }
  }


  /**
   * Read-Object setter for de-serializing nested publications list
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.community.sql.QueryCommunityReference
   */
  private class ReadPublicationsSetter 
      extends com.poesys.db.dto.AbstractListReadSetter<org.tair.db.community.ICommunityReference> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadPublicationsSetter object to read the publications list.
     */
    public ReadPublicationsSetter() {
      super("org.tair.db.community", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.community.CommunityReference.class.getName();
    }

    @Override
    protected java.util.List<org.tair.db.community.ICommunityReference> getObjectList() {
      java.util.List<org.tair.db.community.ICommunityReference> publications = null;
      try {
        publications = ((org.tair.db.community.Community)dto).getPublications();
      } catch (java.sql.SQLException e) {
        throw new RuntimeException("SQL Exception on list query: " + e.getMessage(), e);
      }
      return publications;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.tair.db.community.Community)dto).publicationsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.community.ICommunityReference> getSql() {
      return new org.tair.db.community.sql.QueryCommunityReference();
    }

    @Override
    protected void set(java.util.List<org.tair.db.community.ICommunityReference> list) {
      ((org.tair.db.community.Community)dto).publications = list;
    }
  }
  

  /** Flag indicating whether the attributions property has been loaded */
  boolean attributionsLoaded = false;

  /**
   * Query setter for lazily querying nested attributions collection
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.community.sql.QueryAttributionsByCommunity
   */
  private class QueryAttributionsSetter 
      extends com.poesys.db.dto.AbstractLazyListSetter<org.tair.db.community.ICommunityAttribution, ICommunity, java.util.List<org.tair.db.community.ICommunityAttribution>> {
    /** Serial version UID for Serializable object */
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryAttributionsSetter object.
     */
    public QueryAttributionsSetter() {
      super("org.tair.db.community", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.community.CommunityAttribution.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ICommunity getParametersDto() {
      return AbstractCommunityProxy.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.tair.db.community.ICommunityAttribution, ICommunity> getSql() {
      return new org.tair.db.community.sql.QueryAttributionsByCommunity();
    }

    @Override
    protected void set(java.util.List<org.tair.db.community.ICommunityAttribution> collection) {
      try {
        // Register the observer parent with the subject children.
        for (org.tair.db.community.ICommunityAttribution child : collection) {
          child.attach(AbstractCommunityProxy.this.dto,
                              com.poesys.db.dao.DataEvent.MARKED_DELETED);
          child.attach(AbstractCommunityProxy.this.dto, com.poesys.db.dao.DataEvent.DELETE);
        }
        setAttributions(collection);
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Just lazy loading here, not actually setting. Ignore this exception.        
      }
    }

    @Override
    public boolean isSet() {
      // Set if proxy has loaded attributions
      return attributionsLoaded;
    }
  }


  /**
   * Read-Object setter for de-serializing nested attributions list
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.community.sql.QueryCommunityAttribution
   */
  private class ReadAttributionsSetter 
      extends com.poesys.db.dto.AbstractListReadSetter<org.tair.db.community.ICommunityAttribution> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadAttributionsSetter object to read the attributions list.
     */
    public ReadAttributionsSetter() {
      super("org.tair.db.community", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.community.CommunityAttribution.class.getName();
    }

    @Override
    protected java.util.List<org.tair.db.community.ICommunityAttribution> getObjectList() {
      java.util.List<org.tair.db.community.ICommunityAttribution> attributions = null;
      try {
        attributions = ((org.tair.db.community.Community)dto).getAttributions();
      } catch (java.sql.SQLException e) {
        throw new RuntimeException("SQL Exception on list query: " + e.getMessage(), e);
      }
      return attributions;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.tair.db.community.Community)dto).attributionsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.community.ICommunityAttribution> getSql() {
      return new org.tair.db.community.sql.QueryCommunityAttribution();
    }

    @Override
    protected void set(java.util.List<org.tair.db.community.ICommunityAttribution> list) {
      ((org.tair.db.community.Community)dto).attributions = list;
    }
  }
  /**
   * Create a CommunityProxy. The concrete subclass must call this constructor.
   *
   * @param dto the DTO to proxy
   */
  public AbstractCommunityProxy(Community dto) {
    super(dto);

    // Setter arrays
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters.add(new ReadAliasesSetter());
    readObjectSetters.add(new ReadKeywordsSetter());
    readObjectSetters.add(new ReadPublicationsSetter());
    readObjectSetters.add(new ReadAttributionsSetter());
  }

  @Override
  public boolean equals(Object obj) {
    AbstractCommunityProxy otherProxy = (AbstractCommunityProxy)obj;
    return ((Community)dto).equals(otherProxy.dto);
  }

  @Override
  public int hashCode() {
    return ((Community)dto).hashCode();
  }

  // Local properties (attributes, associations, and association classes)

  // Source: AddGeneratedKeyProperties
  public java.math.BigInteger getCommunityId() {
    return ((Community)dto).getCommunityId();
  }

  // Source: AddLocalAttributeProperties
  public java.lang.String getCommunityType() {
    return ((Community)dto).getCommunityType();
  }

  // Source: AddLocalAttributeProperties
  public java.lang.String getEmail() {
    return ((Community)dto).getEmail();
  }

  // Source: AddLocalAttributeProperties
  public java.lang.String getMemberStatus() {
    return ((Community)dto).getMemberStatus();
  }

  // Source: AddToOneAssociationRequiredObjectProperties
  public org.tair.db.community.ICountry getCountry() {
    return ((Community)dto).getCountry();
  }

  // Source: AddGeneratedKeyProperties + AddToOneAssociationAttributeProperties
  public java.math.BigInteger getCountryId() {
    return ((Community)dto).getCountryId();
  }

  // Source: AddToManyChildCollectionProperties
  public java.util.Collection<org.tair.db.community.ICommunityAlias> getAliases() {
    return ((Community)dto).getAliases();
  }

  // Source: AddToManyChildCollectionProperties
  public java.util.Collection<org.tair.db.community.ICommunityKeyword> getKeywords() {
    return ((Community)dto).getKeywords();
  }

  // Source: AddToManyChildCollectionProperties
  public java.util.List<org.tair.db.community.ICommunityReference> getPublications() throws java.sql.SQLException {
    // Lazy-load the local property publications if not loaded.
    if (!publicationsLoaded) {
      try {
        com.poesys.db.dto.ISet setter = new QueryPublicationsSetter();
        setter.set(dto.getConnection());
      } catch (com.poesys.db.InvalidParametersException e) {
        throw new java.sql.SQLException(e.getMessage());
      }
    }
    return ((Community)dto).getPublications();
  }

  public void clearPublications() {
    // Only clear if loaded already.
    if (publicationsLoaded) {
      try {
        // Call the local lazy property setter to clear the property.
        ((Community)dto).setPublications(null);
        ((Community)dto).undoStatus();
        publicationsLoaded = false;
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Couldn't set status to CHANGED, ignore because we don't want it set
      }
    }
  }

  /**
   * Set the publications from a lazy-loading proxy. The IDbDto-
   * derived interface does not contain this method.
   *
   * @param publications the lazily loaded value to assign
   */
  void setPublications(java.util.List<org.tair.db.community.ICommunityReference> publications)
      {
    ((Community)dto).setPublications(publications);
    // Mark the property loaded and undo the status change.
    dto.undoStatus();
    publicationsLoaded = true;
  }

  // Source: AddToManyChildCollectionProperties
  public java.util.List<org.tair.db.community.ICommunityAttribution> getAttributions() throws java.sql.SQLException {
    // Lazy-load the local property attributions if not loaded.
    if (!attributionsLoaded) {
      try {
        com.poesys.db.dto.ISet setter = new QueryAttributionsSetter();
        setter.set(dto.getConnection());
      } catch (com.poesys.db.InvalidParametersException e) {
        throw new java.sql.SQLException(e.getMessage());
      }
    }
    return ((Community)dto).getAttributions();
  }

  public void clearAttributions() {
    // Only clear if loaded already.
    if (attributionsLoaded) {
      try {
        // Call the local lazy property setter to clear the property.
        ((Community)dto).setAttributions(null);
        ((Community)dto).undoStatus();
        attributionsLoaded = false;
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Couldn't set status to CHANGED, ignore because we don't want it set
      }
    }
  }

  /**
   * Set the attributions from a lazy-loading proxy. The IDbDto-
   * derived interface does not contain this method.
   *
   * @param attributions the lazily loaded value to assign
   */
  void setAttributions(java.util.List<org.tair.db.community.ICommunityAttribution> attributions)
      {
    ((Community)dto).setAttributions(attributions);
    // Mark the property loaded and undo the status change.
    dto.undoStatus();
    attributionsLoaded = true;
  }

  public void markChildrenDeleted() throws com.poesys.db.dto.DtoStatusException {
  	((Community)dto).markChildrenDeleted();
  }
}