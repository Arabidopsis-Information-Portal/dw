/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDtoProxy.vsl

package org.tair.db.community;


import com.poesys.db.dto.AbstractLazyLoadingDtoProxy;


/**
 * <p>
 * A data-access layer data-transfer object (DTO) lazy-loading proxy for the 
 * Organization. This class is an abstract class that contains AndroMDA 
 * generated code; change nothing in this class. Instead, override any methods 
 * in the concrete subclass generated in the same package. AndroMDA will 
 * overwrite this class each time you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * An organization that is a member of the community
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractOrganizationProxy extends AbstractLazyLoadingDtoProxy implements IOrganization {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  
    // Setter strategy nested classes for multiple-object associations

  /** Flag indicating whether the affiliate property has been loaded */
  boolean affiliateLoaded = false;

  /**
   * Query setter for lazily querying nested affiliate collection
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see org.tair.db.community.sql.QueryAffiliateByOrganization
   */
  private class QueryAffiliateSetter 
      extends com.poesys.db.dto.AbstractLazyListSetter<org.tair.db.community.IPerson, IOrganization, java.util.Collection<org.tair.db.community.IPerson>> {
    /** Serial version UID for Serializable object */
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryAffiliateSetter object.
     */
    public QueryAffiliateSetter() {
      super("org.tair.db.community", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.community.Person.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected IOrganization getParametersDto() {
      return AbstractOrganizationProxy.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.tair.db.community.IPerson, IOrganization> getSql() {
      return new org.tair.db.community.sql.QueryAffiliateByOrganization();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.community.IPerson> collection) {
      try {
        // Register the observer parent with the subject children.
        for (org.tair.db.community.IPerson child : collection) {
          child.attach(AbstractOrganizationProxy.this.dto,
                              com.poesys.db.dao.DataEvent.MARKED_DELETED);
          child.attach(AbstractOrganizationProxy.this.dto, com.poesys.db.dao.DataEvent.DELETE);
        }
        setAffiliate(collection);
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Just lazy loading here, not actually setting. Ignore this exception.        
      }
    }

    @Override
    public boolean isSet() {
      // Set if proxy has loaded affiliate
      return affiliateLoaded;
    }
  }


  /**
   * Read-Object setter for de-serializing nested affiliate collection
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see org.tair.db.community.sql.QueryPerson
   */
  private class ReadAffiliateSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.tair.db.community.IPerson> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadAffiliateSetter object to read the affiliate collection.
     */
    public ReadAffiliateSetter() {
      super("org.tair.db.community", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.community.Person.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.community.IPerson> getObjectCollection() {
      java.util.Collection<org.tair.db.community.IPerson> affiliate = null;
      try {
        affiliate = ((org.tair.db.community.Organization)dto).getAffiliate();
      } catch (java.sql.SQLException e) {
        throw new RuntimeException("SQL Exception on collection query: " + e.getMessage(), e);
      }
      return affiliate;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.tair.db.community.Organization)dto).affiliateKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.community.IPerson> getSql() {
      return new org.tair.db.community.sql.QueryPerson();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.community.IPerson> collection) {
      ((org.tair.db.community.Organization)dto).affiliate = collection;
    }
  }

  

  /** Flag indicating whether the affiliation property has been loaded */
  boolean affiliationLoaded = false;

  /**
   * Query setter for lazily querying nested affiliation collection
   * Source: AddAssociationClassCollectionProperties
   *
   * @see org.tair.db.community.sql.QueryAffiliationByOrganization
   */
  private class QueryAffiliationSetter 
      extends com.poesys.db.dto.AbstractLazyListSetter<org.tair.db.community.IAffiliation, IOrganization, java.util.Collection<org.tair.db.community.IAffiliation>> {
    /** Serial version UID for Serializable object */
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryAffiliationSetter object.
     */
    public QueryAffiliationSetter() {
      super("org.tair.db.community", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.community.Affiliation.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected IOrganization getParametersDto() {
      return AbstractOrganizationProxy.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.tair.db.community.IAffiliation, IOrganization> getSql() {
      return new org.tair.db.community.sql.QueryAffiliationByOrganization();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.community.IAffiliation> collection) {
      try {
        // Register the observer parent with the subject children.
        for (org.tair.db.community.IAffiliation child : collection) {
          child.attach(AbstractOrganizationProxy.this.dto,
                              com.poesys.db.dao.DataEvent.MARKED_DELETED);
          child.attach(AbstractOrganizationProxy.this.dto, com.poesys.db.dao.DataEvent.DELETE);
        }
        setAffiliation(collection);
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Just lazy loading here, not actually setting. Ignore this exception.        
      }
    }

    @Override
    public boolean isSet() {
      // Set if proxy has loaded affiliation
      return affiliationLoaded;
    }
  }


  /**
   * Read-Object setter for de-serializing nested affiliation collection
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see org.tair.db.community.sql.QueryAffiliation
   */
  private class ReadAffiliationSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.tair.db.community.IAffiliation> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadAffiliationSetter object to read the affiliation collection.
     */
    public ReadAffiliationSetter() {
      super("org.tair.db.community", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.community.Affiliation.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.community.IAffiliation> getObjectCollection() {
      java.util.Collection<org.tair.db.community.IAffiliation> affiliation = null;
      try {
        affiliation = ((org.tair.db.community.Organization)dto).getAffiliation();
      } catch (java.sql.SQLException e) {
        throw new RuntimeException("SQL Exception on collection query: " + e.getMessage(), e);
      }
      return affiliation;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.tair.db.community.Organization)dto).affiliationKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.community.IAffiliation> getSql() {
      return new org.tair.db.community.sql.QueryAffiliation();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.community.IAffiliation> collection) {
      ((org.tair.db.community.Organization)dto).affiliation = collection;
    }
  }

  /**
   * Create a OrganizationProxy. The concrete subclass must call this constructor.
   *
   * @param dto the DTO to proxy
   */
  public AbstractOrganizationProxy(Organization dto) {
    super(dto);

    // Setter arrays
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters.add(new ReadAffiliateSetter());
    readObjectSetters.add(new ReadAffiliationSetter());
  }

  @Override
  public boolean equals(Object obj) {
    AbstractOrganizationProxy otherProxy = (AbstractOrganizationProxy)obj;
    return ((Organization)dto).equals(otherProxy.dto);
  }

  @Override
  public int hashCode() {
    return ((Organization)dto).hashCode();
  }
  // Inherited properties

  public java.math.BigInteger getCommunityId() {
    return ((IOrganization)dto).getCommunityId();
  }

  public org.tair.db.community.ICountry getCountry() {
    return ((IOrganization)dto).getCountry();
  }

  public java.util.Collection<org.tair.db.community.ICommunityAlias> getAliases() {
    return ((IOrganization)dto).getAliases();
  }

  public java.util.Collection<org.tair.db.community.ICommunityKeyword> getKeywords() {
    return ((IOrganization)dto).getKeywords();
  }

  /** Flag indicating whether the publications property has been loaded */
  boolean publicationsLoaded = false;

  /**
   * Query setter for lazily querying nested publications collection
   *
   * @see org.tair.db.community.sql.QueryPublicationsByCommunity
   */
  private class QueryPublicationsSetter 
      extends com.poesys.db.dto.AbstractLazyListSetter<org.tair.db.community.ICommunityReference, org.tair.db.community.ICommunity, java.util.List<org.tair.db.community.ICommunityReference>> {
    /** Serial version UID for Serializable object */
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryPublicationsSetter object.
     */
    public QueryPublicationsSetter() {
      super("org.tair.db.community", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.community.CommunityReference.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected IOrganization getParametersDto() {
      return AbstractOrganizationProxy.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.tair.db.community.ICommunityReference, org.tair.db.community.ICommunity> getSql() {
      return new org.tair.db.community.sql.QueryPublicationsByCommunity();
    }

    @Override
    protected void set(java.util.List<org.tair.db.community.ICommunityReference> collection) {
      try {
        // Register the observer parent with the subject children.
        for (org.tair.db.community.ICommunityReference child : collection) {
          child.attach(AbstractOrganizationProxy.this.dto,
                              com.poesys.db.dao.DataEvent.MARKED_DELETED);
          child.attach(AbstractOrganizationProxy.this.dto, 
                       com.poesys.db.dao.DataEvent.DELETE);
        }
        setPublications(collection);
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Just lazy loading here, not actually setting. Ignore this exception.        
      }
    }

    @Override
    public boolean isSet() {
      // Set if proxy has loaded publications
      return publicationsLoaded;
    }
  }

  public java.util.List<org.tair.db.community.ICommunityReference> getPublications() throws java.sql.SQLException {
    // Lazy-load the inherited publications from the Organization 
    // if not loaded and the inherited key is not null.
    if (!publicationsLoaded && ((IOrganization)dto).getCommunityId() != null) {
      try {
        com.poesys.db.dto.ISet setter = new QueryPublicationsSetter();
        setter.set(dto.getConnection());
      } catch (com.poesys.db.InvalidParametersException e) {
        throw new java.sql.SQLException(e.getMessage());
      }
    }
    return ((IOrganization)dto).getPublications();
  }

  /**
   * Clear the lazily-loaded property publications.
   */
  public void clearPublications() {
    // Only clear if loaded already.
    if (publicationsLoaded) {
      try {
        // Call the local lazy property setter to clear the property.
        ((Organization)dto).setPublications(null);
        ((Organization)dto).undoStatus();
        publicationsLoaded = false;
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Couldn't set status to CHANGED, ignore because we don't want it set
      }
    }
  }

  /**
   * Set the lazily loaded property publications and mark it loaded.
   * 
   * @param publications the value for the lazily loaded property
   */
  public void setPublications(java.util.List<org.tair.db.community.ICommunityReference> publications)
      {
    ((Organization)dto).setPublications(publications);
    
    // Mark the property loaded and undo the status change if loading.
    if (!publicationsLoaded) {
      dto.undoStatus();
      publicationsLoaded = true;
    }
  }

  /** Flag indicating whether the attributions property has been loaded */
  boolean attributionsLoaded = false;

  /**
   * Query setter for lazily querying nested attributions collection
   *
   * @see org.tair.db.community.sql.QueryAttributionsByCommunity
   */
  private class QueryAttributionsSetter 
      extends com.poesys.db.dto.AbstractLazyListSetter<org.tair.db.community.ICommunityAttribution, org.tair.db.community.ICommunity, java.util.List<org.tair.db.community.ICommunityAttribution>> {
    /** Serial version UID for Serializable object */
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryAttributionsSetter object.
     */
    public QueryAttributionsSetter() {
      super("org.tair.db.community", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.community.CommunityAttribution.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected IOrganization getParametersDto() {
      return AbstractOrganizationProxy.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.tair.db.community.ICommunityAttribution, org.tair.db.community.ICommunity> getSql() {
      return new org.tair.db.community.sql.QueryAttributionsByCommunity();
    }

    @Override
    protected void set(java.util.List<org.tair.db.community.ICommunityAttribution> collection) {
      try {
        // Register the observer parent with the subject children.
        for (org.tair.db.community.ICommunityAttribution child : collection) {
          child.attach(AbstractOrganizationProxy.this.dto,
                              com.poesys.db.dao.DataEvent.MARKED_DELETED);
          child.attach(AbstractOrganizationProxy.this.dto, 
                       com.poesys.db.dao.DataEvent.DELETE);
        }
        setAttributions(collection);
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Just lazy loading here, not actually setting. Ignore this exception.        
      }
    }

    @Override
    public boolean isSet() {
      // Set if proxy has loaded attributions
      return attributionsLoaded;
    }
  }

  public java.util.List<org.tair.db.community.ICommunityAttribution> getAttributions() throws java.sql.SQLException {
    // Lazy-load the inherited attributions from the Organization 
    // if not loaded and the inherited key is not null.
    if (!attributionsLoaded && ((IOrganization)dto).getCommunityId() != null) {
      try {
        com.poesys.db.dto.ISet setter = new QueryAttributionsSetter();
        setter.set(dto.getConnection());
      } catch (com.poesys.db.InvalidParametersException e) {
        throw new java.sql.SQLException(e.getMessage());
      }
    }
    return ((IOrganization)dto).getAttributions();
  }

  /**
   * Clear the lazily-loaded property attributions.
   */
  public void clearAttributions() {
    // Only clear if loaded already.
    if (attributionsLoaded) {
      try {
        // Call the local lazy property setter to clear the property.
        ((Organization)dto).setAttributions(null);
        ((Organization)dto).undoStatus();
        attributionsLoaded = false;
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Couldn't set status to CHANGED, ignore because we don't want it set
      }
    }
  }

  /**
   * Set the lazily loaded property attributions and mark it loaded.
   * 
   * @param attributions the value for the lazily loaded property
   */
  public void setAttributions(java.util.List<org.tair.db.community.ICommunityAttribution> attributions)
      {
    ((Organization)dto).setAttributions(attributions);
    
    // Mark the property loaded and undo the status change if loading.
    if (!attributionsLoaded) {
      dto.undoStatus();
      attributionsLoaded = true;
    }
  }

  public java.lang.String getCommunityType() {
    return ((IOrganization)dto).getCommunityType();
  }

  public java.lang.String getEmail() {
    return ((IOrganization)dto).getEmail();
  }

  public java.lang.String getMemberStatus() {
    return ((IOrganization)dto).getMemberStatus();
  }

  public java.math.BigInteger getCountryId() {
    return ((IOrganization)dto).getCountryId();
  }

  // Local properties (attributes, associations, and association classes)

  // Source: AddLocalAttributeProperties
  public java.lang.String getName() {
    return ((Organization)dto).getName();
  }

  // Source: AddLocalAttributeProperties
  public java.lang.String getOrganizationType() {
    return ((Organization)dto).getOrganizationType();
  }

  // Source: AddLocalAttributeProperties
  public java.lang.String getDescription() {
    return ((Organization)dto).getDescription();
  }

  // Source: AddLocalAttributeProperties
  public java.lang.Boolean getCommercial() {
    return ((Organization)dto).getCommercial();
  }

  // Source: TransformToProperty + AddToManyAssociationCollectionProperties
  public java.util.Collection<org.tair.db.community.IPerson> getAffiliate() throws java.sql.SQLException {
    // Lazy-load the local property affiliate if not loaded.
    if (!affiliateLoaded) {
      try {
        com.poesys.db.dto.ISet setter = new QueryAffiliateSetter();
        setter.set(dto.getConnection());
      } catch (com.poesys.db.InvalidParametersException e) {
        throw new java.sql.SQLException(e.getMessage());
      }
    }
    return ((Organization)dto).getAffiliate();
  }

  public void clearAffiliate() {
    // Only clear if loaded already.
    if (affiliateLoaded) {
      try {
        // Call the local lazy property setter to clear the property.
        ((Organization)dto).setAffiliate(null);
        ((Organization)dto).undoStatus();
        affiliateLoaded = false;
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Couldn't set status to CHANGED, ignore because we don't want it set
      }
    }
  }

  /**
   * Set the affiliate from a lazy-loading proxy. The IDbDto-
   * derived interface does not contain this method.
   *
   * @param affiliate the lazily loaded value to assign
   */
  void setAffiliate(java.util.Collection<org.tair.db.community.IPerson> affiliate)
      {
    ((Organization)dto).setAffiliate(affiliate);
    // Mark the property loaded and undo the status change.
    dto.undoStatus();
    affiliateLoaded = true;
  }

  // Source: AddAssociationClassCollectionProperties
  public java.util.Collection<org.tair.db.community.IAffiliation> getAffiliation() throws java.sql.SQLException {
    // Lazy-load the local property affiliation if not loaded.
    if (!affiliationLoaded) {
      try {
        com.poesys.db.dto.ISet setter = new QueryAffiliationSetter();
        setter.set(dto.getConnection());
      } catch (com.poesys.db.InvalidParametersException e) {
        throw new java.sql.SQLException(e.getMessage());
      }
    }
    return ((Organization)dto).getAffiliation();
  }

  public void clearAffiliation() {
    // Only clear if loaded already.
    if (affiliationLoaded) {
      try {
        // Call the local lazy property setter to clear the property.
        ((Organization)dto).setAffiliation(null);
        ((Organization)dto).undoStatus();
        affiliationLoaded = false;
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Couldn't set status to CHANGED, ignore because we don't want it set
      }
    }
  }

  /**
   * Set the affiliation from a lazy-loading proxy. The IDbDto-
   * derived interface does not contain this method.
   *
   * @param affiliation the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  public void setAffiliation(java.util.Collection<org.tair.db.community.IAffiliation> affiliation)
      throws com.poesys.db.InvalidParametersException {
    ((Organization)dto).setAffiliation(affiliation);
    // Mark the property loaded and undo the status change.
    dto.undoStatus();
    affiliationLoaded = true;
  }

  public void markChildrenDeleted() throws com.poesys.db.dto.DtoStatusException {
  	((Organization)dto).markChildrenDeleted();
  }
}