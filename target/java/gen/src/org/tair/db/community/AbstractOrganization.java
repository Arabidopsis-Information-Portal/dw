/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package org.tair.db.community;


import com.poesys.db.pk.IPrimaryKey;

/**
 * <p>
 * A data-access layer data-transfer object for the Organization. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * An organization that is a member of the community
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: false
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractOrganization extends org.tair.db.community.Community implements IOrganization {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  
  // Setter strategy nested classes for multiple-object associations

   
   
  /**
   * Create an empty Organization for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractOrganization() {
    super();
    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    
    // Add the many-to-many collection setters for the affiliate property.
    
    // Add the many-to-many collection setters for the affiliation property.
  }

  /**
   * Create a Organization. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the Organization
   * @param communityId primary key attribute
   * @param communityType the kind of community member this is: person or organization
   * @param email the email address of the community member
   * @param memberStatus the current status of the community member: new, active, inactive.
A new member is one who has registered but not been activated.
An active member has been activated.
An inactive member has been inactivated.
   * @param countryId foreign key used by setter to query associated object
   * @param name the name of the organization
   * @param organizationType the kind of organization:
lab
institute
organization
project
university
other
high_school
education_outreach_program
foundation
company
facility
stock_center
center
community_college
collaboration
middle_school
committee
unknown
database
4_year_college
   * @param description a text describing the organization
   * @param commercial whether this is a commercial organization
   */
  public AbstractOrganization(IPrimaryKey key, java.math.BigInteger communityId, java.lang.String communityType, java.lang.String email, java.lang.String memberStatus, java.math.BigInteger countryId, java.lang.String name, java.lang.String organizationType, java.lang.String description, java.lang.Boolean commercial) {
    super(key, communityId, communityType, email, memberStatus, countryId);

    this.name = name;

    if (name == null) {
      throw new com.poesys.db.InvalidParametersException("name is required for " + key.getValueList());
    }
    
    this.organizationType = organizationType;

    if (organizationType == null) {
      throw new com.poesys.db.InvalidParametersException("organizationType is required for " + key.getValueList());
    }
    
    this.description = description;

    this.commercial = commercial;

    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    
    // Add the many-to-many collection setters for the affiliate property.
    
    // Add the many-to-many collection setters for the affiliation property.
  }


  /**
   * Nested property name
   *
   * <p>
   * the name of the organization
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String name;
  

  public java.lang.String getName() {
    return name;
  }

  /**
   * Clear the name data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearName() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property organizationType
   *
   * <p>
   * the kind of organization:
   * </p>
   * <p>
   * lab
   * </p>
   * <p>
   * institute
   * </p>
   * <p>
   * organization
   * </p>
   * <p>
   * project
   * </p>
   * <p>
   * university
   * </p>
   * <p>
   * other
   * </p>
   * <p>
   * high_school
   * </p>
   * <p>
   * education_outreach_program
   * </p>
   * <p>
   * foundation
   * </p>
   * <p>
   * company
   * </p>
   * <p>
   * facility
   * </p>
   * <p>
   * stock_center
   * </p>
   * <p>
   * center
   * </p>
   * <p>
   * community_college
   * </p>
   * <p>
   * collaboration
   * </p>
   * <p>
   * middle_school
   * </p>
   * <p>
   * committee
   * </p>
   * <p>
   * unknown
   * </p>
   * <p>
   * database
   * </p>
   * <p>
   * 4_year_college
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String organizationType;
  

  public java.lang.String getOrganizationType() {
    return organizationType;
  }

  /**
   * Clear the organizationType data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearOrganizationType() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property description
   *
   * <p>
   * a text describing the organization
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String description;
  

  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Clear the description data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearDescription() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property commercial
   *
   * <p>
   * whether this is a commercial organization
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Boolean commercial;
  

  public java.lang.Boolean getCommercial() {
    return commercial;
  }

  /**
   * Clear the commercial data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearCommercial() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property affiliate
   *
   * <p>
   * the set of people affiliated with the organization
   * </p>
   *
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: true
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.tair.db.community.IPerson> affiliate;
  // Ordered list of keys of the objects in the $property.uniquename list
  java.util.List<com.poesys.db.pk.IPrimaryKey> affiliateKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  

  public java.util.Collection<org.tair.db.community.IPerson> getAffiliate() throws java.sql.SQLException {
    return affiliate;
  }

  /**
   * Clear the affiliate data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearAffiliate() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  public void setAffiliate(java.util.Collection<org.tair.db.community.IPerson> affiliate) {
    this.affiliate = affiliate;
    // Add the primary keys of the new collection to the serialized key list.
    affiliateKeys.clear();
    if (affiliate != null) {
      for (com.poesys.db.dto.IDbDto object : affiliate) {
        affiliateKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }

  /**
   * Nested property affiliation
   *
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   *
   * Added by AddAssociationClassCollectionProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: true
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.tair.db.community.IAffiliation> affiliation;
  // Ordered list of keys of the objects in the $property.uniquename list
  java.util.List<com.poesys.db.pk.IPrimaryKey> affiliationKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  

  public java.util.Collection<org.tair.db.community.IAffiliation> getAffiliation() throws java.sql.SQLException {
    return affiliation;
  }

  /**
   * Clear the affiliation data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearAffiliation() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the affiliation.
   * </p>
   * <ul>
   * <li>Read/Write DTO: false</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: true (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   *
   * @param affiliation the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input affiliation is null
   */
  public void setAffiliation(java.util.Collection<org.tair.db.community.IAffiliation> affiliation)
      throws com.poesys.db.InvalidParametersException {
    if (affiliation == null) {
      throw new com.poesys.db.InvalidParametersException("affiliation is required");
    }
    
    this.affiliation = affiliation;
    // Add the primary keys of the new collection to the serialized key list.
    affiliationKeys.clear();
    if (affiliation != null) {
      for (com.poesys.db.dto.IDbDto object : affiliation) {
        affiliationKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {

    // Clean up affiliation.
    if (subject != null && subject instanceof org.tair.db.community.IAffiliation && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        affiliation != null) {
      // Delete to-many affiliation child from collection
      affiliation.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Cascade delete to affiliation.
    if (event == com.poesys.db.dao.DataEvent.MARKED_DELETED &&
        affiliation != null) {
      // Mark affiliation association object cascade-deleted.
      outer: for (org.tair.db.community.IAffiliation value : affiliation) {
        com.poesys.db.pk.AssociationPrimaryKey keys = 
          (com.poesys.db.pk.AssociationPrimaryKey) value.getPrimaryKey();
        for (com.poesys.db.pk.IPrimaryKey key : keys.getKeyListCopy()) {
          if (key.equals(subject.getPrimaryKey())) {
            value.cascadeDelete();
            break outer;
          }
        }
      }
    }
  }
}