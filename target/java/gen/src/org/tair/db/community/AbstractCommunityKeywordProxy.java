/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDtoProxy.vsl

package org.tair.db.community;


import com.poesys.db.dto.AbstractLazyLoadingDtoProxy;


/**
 * <p>
 * A data-access layer data-transfer object (DTO) lazy-loading proxy for the 
 * CommunityKeyword. This class is an abstract class that contains AndroMDA 
 * generated code; change nothing in this class. Instead, override any methods 
 * in the concrete subclass generated in the same package. AndroMDA will 
 * overwrite this class each time you run it but will never overwrite the concrete subclass.
 * </p>
 * 
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractCommunityKeywordProxy extends AbstractLazyLoadingDtoProxy implements ICommunityKeyword {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;

  // Lazy-loading query setter strategy nested classes for single-object associations
  
  /** Flag indicating whether the member property has been loaded */
  boolean memberLoaded = false;

  /**
   * Query setter for lazily querying nested member object
   *
   * @see org.tair.db.community.sql.QueryCommunity
   */
  private class QueryMemberSetter 
      extends com.poesys.db.dto.AbstractLazyObjectSetter<org.tair.db.community.ICommunity> {
    /** Serial version UID for Serializable object */
    private static final long serialVersionUID = 1L;

    /**
     * Create a QueryMemberSetter object.
     */
    public QueryMemberSetter() {
      super("org.tair.db.community", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.community.Community.class.getName();
    }

    @Override
    protected com.poesys.db.pk.IPrimaryKey getKey() {
      // Generate an org.tair.db.community.ICommunity primary key with the value 
      // from the org.tair.db.community.ICommunityKeyword object
      return org.tair.db.community.CommunityFactory.getCommunityPrimaryKey(((ICommunityKeyword)dto).getCommunityId());
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.community.ICommunity> getSql() {
      return new org.tair.db.community.sql.QueryCommunity();
    }

    @Override
    protected void set(org.tair.db.community.ICommunity dto)
         throws com.poesys.db.InvalidParametersException, 
                com.poesys.db.dto.DtoStatusException {
      setMember(dto);
    }

    @Override
    public boolean isSet() {
      // Set if proxy has loaded member
      return memberLoaded;
    }
  }

  /**
   * Create a CommunityKeywordProxy. The concrete subclass must call this constructor.
   *
   * @param dto the DTO to proxy
   */
  public AbstractCommunityKeywordProxy(CommunityKeyword dto) {
    super(dto);

    // Setter arrays
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
  }

  @Override
  public boolean equals(Object obj) {
    AbstractCommunityKeywordProxy otherProxy = (AbstractCommunityKeywordProxy)obj;
    return ((CommunityKeyword)dto).equals(otherProxy.dto);
  }

  @Override
  public int hashCode() {
    return ((CommunityKeyword)dto).hashCode();
  }

  // Local properties (attributes, associations, and association classes)

  // Source: AddGeneratedKeyProperties + AddParentKeyAttributes
  public java.math.BigInteger getCommunityId() {
    return ((CommunityKeyword)dto).getCommunityId();
  }

  // Source: AddExplicitSubKeyProperties + addNaturalSubkeyOnClass
  public java.lang.String getKeyword() {
    return ((CommunityKeyword)dto).getKeyword();
  }

  // Source: AddLocalAttributeProperties
  public java.lang.String getKeywordType() {
    return ((CommunityKeyword)dto).getKeywordType();
  }

  // Source: AddToOneAssociationRequiredObjectProperties
  public org.tair.db.community.ICommunity getMember() throws java.sql.SQLException {
    // Lazy-load the local property member if not loaded and the key member is not null.
    if (!memberLoaded && ((ICommunityKeyword)dto).getCommunityId() != null) {
      try {
        com.poesys.db.dto.ISet setter = new QueryMemberSetter();
        setter.set(dto.getConnection());
      } catch (com.poesys.db.InvalidParametersException e) {
        throw new java.sql.SQLException(e.getMessage());
      }
    } else if (!memberLoaded) {
      // member key attribute is null but is required
      java.util.List<String> args = new java.util.ArrayList<String>(1);
      args.add("member");
      com.poesys.db.NoRequiredValueException e = 
        new com.poesys.db.NoRequiredValueException("com.poesys.db.dto.msg.lazy_load_no_required_value");
      e.setParameters(args);
      throw e;
    }

    return ((CommunityKeyword)dto).getMember();
  }

  public void clearMember() {
    // Only clear if loaded already.
    if (memberLoaded) {
      try {
        // Call the local lazy property setter to clear the property.
        ((CommunityKeyword)dto).setMember(null);
        ((CommunityKeyword)dto).undoStatus();
        memberLoaded = false;
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Couldn't set status to CHANGED, ignore because we don't want it set
      }
    }
  }

  /**
   * Set the member from a lazy-loading proxy. The IDbDto-
   * derived interface does not contain this method.
   *
   * @param member the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  void setMember(org.tair.db.community.ICommunity member)
      throws com.poesys.db.InvalidParametersException {
    ((CommunityKeyword)dto).setMember(member);
    // Mark the property loaded and undo the status change.
    dto.undoStatus();
    memberLoaded = true;
  }

  public void markChildrenDeleted() throws com.poesys.db.dto.DtoStatusException {
  	((CommunityKeyword)dto).markChildrenDeleted();
  }
}