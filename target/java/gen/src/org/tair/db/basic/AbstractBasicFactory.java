/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractSubsystemFactory.vsl

package org.tair.db.basic;


import java.sql.ResultSet;
import java.sql.SQLException;

import com.poesys.db.InvalidParametersException;
import com.poesys.db.pk.IPrimaryKey;


/**
 * <p>
 * A separate, shareable set of factory methods for all the basic
 * classes, including JDBC data-setting, parameter-setting, and
 * primary-key-generation methods. This class is abstract and has a single
 * concrete subclass, BasicFactory, that you can modify to override
 * the default behavior in the abstract class or implement an as-yet 
 * unimplemented method.
 * </p>
 * <p>
 * the fundamental subsystem of classes that many other subsystems in the data
 * warehouse use, such as Taxon
 * </p>
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractBasicFactory {
  /**
   * Retrieve the Taxon data from the result set's current row and create
   * a Taxon object.
   * 
   * @param key the primary key for the Basic
   * @param rs the query result set
   * @return a Taxon instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ITaxon getTaxonData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument taxonId gets the JDBC value with a function call.
    java.lang.Long taxonIdValue = rs.getLong("taxonId");
    // Constructor argument genus gets the JDBC value with a function call.
    java.lang.String genusValue = rs.getString("genus");
    // Constructor argument species gets the JDBC value with a function call.
    java.lang.String speciesValue = rs.getString("species");
    // Constructor argument common gets the JDBC value with a function call.
    java.lang.String commonValue = rs.getString("common");
    // Taxon has no lazily loaded members, so there is no need for Proxy.
    ITaxon newObject = 
      new Taxon(key, taxonIdValue, genusValue, speciesValue, commonValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a Taxon based on a result set that must contain
   * the Taxon primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>NaturalKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a Taxon NaturalKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTaxonPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    java.lang.Long taxonIdValue = rs.getLong("taxonId");

    list.add(new com.poesys.db.col.LongColumnValue(prefix + "taxonId", taxonIdValue));
    key = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.tair.db.basic.Taxon");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a Taxon based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>NaturalKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param taxonId a unique identifier for the species taxon
   * @return a Taxon NaturalKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTaxonPrimaryKey(java.lang.Long taxonId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Track generated inputs for nullity.
    boolean noNulls = true;
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    if (taxonId != null && noNulls) {
      list.add(new com.poesys.db.col.LongColumnValue("taxonId", taxonId));
    } else {
      noNulls = false;
    }
    if (noNulls) {
      key = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.tair.db.basic.Taxon");
    }
    return key;
  }

  /**
   * Retrieve the SpeciesVariant data from the result set's current row and create
   * a SpeciesVariant object.
   * 
   * @param key the primary key for the Basic
   * @param rs the query result set
   * @return a SpeciesVariant instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ISpeciesVariant getSpeciesVariantData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument taxonId gets the JDBC value with a function call.
    java.lang.Long taxonIdValue = rs.getLong("taxonId");
    // Constructor argument name gets the JDBC value with a function call.
    java.lang.String nameValue = rs.getString("name");
    // Constructor argument accession gets the JDBC value with a function call.
    java.lang.String accessionValue = rs.getString("accession");
    // Constructor argument reference gets the JDBC value with a function call.
    java.lang.Boolean referenceValue = rs.getBoolean("reference");
    // SpeciesVariant has no lazily loaded members, so there is no need for Proxy.
    ISpeciesVariant newObject = 
      new SpeciesVariant(key, taxonIdValue, nameValue, accessionValue, referenceValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a SpeciesVariant based on a result set that must contain
   * the SpeciesVariant primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a SpeciesVariant CompositeKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getSpeciesVariantPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    IPrimaryKey parentKey = getTaxonPrimaryKey(rs, "");
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    java.lang.String nameValue = rs.getString("name");
    list.add(new com.poesys.db.col.StringColumnValue(prefix + "name", nameValue));
    java.lang.String accessionValue = rs.getString("accession");
    list.add(new com.poesys.db.col.StringColumnValue(prefix + "accession", accessionValue));
	IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.tair.db.basic.SpeciesVariant");
    key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "org.tair.db.basic.SpeciesVariant");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a SpeciesVariant based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param accession the accession identifier for this particular variant (second part of the primary
key); nulls in the original database translate into zero.
   * @param name the name of the variant ecotype or species variant; first part of the primary
key
   * @param taxonId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @return a SpeciesVariant CompositeKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getSpeciesVariantPrimaryKey(java.lang.String accession, java.lang.String name, java.lang.Long taxonId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    IPrimaryKey parentKey = getTaxonPrimaryKey(taxonId);

    // Check the parent key; if it is null, the return key should be null.
    if (parentKey != null) {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.StringColumnValue("name", name));
      list.add(new com.poesys.db.col.StringColumnValue("accession", accession));
	  IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.tair.db.basic.SpeciesVariant");
      key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "org.tair.db.basic.SpeciesVariant");
    }
    return key;
  }

}