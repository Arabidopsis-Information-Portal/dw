/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package org.tair.db.basic;


import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;
import com.poesys.db.dto.DtoStatusException;


/**
 * <p>
 * A data-access layer data-transfer object for the Taxon. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * The species identification for a set of loci
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>NaturalKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: false
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractTaxon extends AbstractDto implements ITaxon {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  
  // Setter strategy nested classes for multiple-object associations

  /**
   * Query setter for querying nested variants
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.basic.sql.QueryVariantsByTaxon
   */
  private class QueryVariantsSetter 
      extends com.poesys.db.dto.AbstractListSetter<org.tair.db.basic.ISpeciesVariant, ITaxon, java.util.Collection<org.tair.db.basic.ISpeciesVariant>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryVariantsSetter object.
     */
    public QueryVariantsSetter() {
      super("org.tair.db.basic", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.basic.SpeciesVariant.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ITaxon getParametersDto() {
      return AbstractTaxon.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.tair.db.basic.ISpeciesVariant, ITaxon> getSql() {
      return new org.tair.db.basic.sql.QueryVariantsByTaxon();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.basic.ISpeciesVariant> list) {
      // No status change; this is just filling in the object data.
      variants = list;
      // Add the primary keys to the serialized key list if there are any.
      if (variants != null) {
        for (com.poesys.db.dto.IDbDto object : variants) {
          variantsKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated variants list is not null
      return variants != null;
    }
  }

  /**
   * Read-Object setter for de-serializing nested variants collection
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.basic.sql.QuerySpeciesVariant
   */
  private class ReadVariantsSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.tair.db.basic.ISpeciesVariant> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadVariantsSetter object to read the variants collection.
     */
    public ReadVariantsSetter() {
      super("org.tair.db.basic", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.basic.SpeciesVariant.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.basic.ISpeciesVariant> getObjectCollection() {
      return variants;
    }

    @Override
    protected java.util.List<IPrimaryKey> getPrimaryKeys() {
      return variantsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.basic.ISpeciesVariant> getSql() {
      return new org.tair.db.basic.sql.QuerySpeciesVariant();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.basic.ISpeciesVariant> collection) {
      variants = collection;
    }
  }

  /**
   * Insert setter for inserting nested variants.
   *
   * @see org.tair.db.basic.sql.InsertSpeciesVariant
   */
  private class InsertVariantsSetter 
      extends com.poesys.db.dto.AbstractBatchInsertSetter<org.tair.db.basic.ISpeciesVariant, java.util.Collection<org.tair.db.basic.ISpeciesVariant>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;
    
    // variants source: AddToManyChildCollectionProperties

    /**
     * Create an InsertVariantsSetter object.
     */
    public InsertVariantsSetter() {
      super("org.tair.db.basic", 2147483647);
    }

    @Override
    protected int getBatchSize() {
      return BATCH_SIZE;
    }

    @Override
    protected String getClassName() {
      return org.tair.db.basic.SpeciesVariant.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.basic.ISpeciesVariant> getDtos() {
      return variants;
    }

    @Override
    protected com.poesys.db.dao.insert.IInsertSql<org.tair.db.basic.ISpeciesVariant> getSql() {
      return new org.tair.db.basic.sql.InsertSpeciesVariant();
    }
  }

  /**
   * Setter for processing added variants and updated variants.
   * Deleted variants are deleted in the database cascade delete.
   */
   
  private class UpdateVariantsSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<org.tair.db.basic.ISpeciesVariant, java.util.Collection<org.tair.db.basic.ISpeciesVariant>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdateVariantsSetter object.
     */
    public UpdateVariantsSetter() {
      super("org.tair.db.basic", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, java.util.Collection<org.tair.db.basic.ISpeciesVariant> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
        // variants source: AddToManyChildCollectionProperties
        // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.basic.ISpeciesVariant> factory = 
        manager.getFactory(org.tair.db.basic.SpeciesVariant.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<org.tair.db.basic.ISpeciesVariant> dao =
        factory.getUpdateBatch(new org.tair.db.basic.sql.UpdateSpeciesVariant());
      dao.update(connection, dtos, BATCH_SIZE);
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, java.util.Collection<org.tair.db.basic.ISpeciesVariant> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.basic.ISpeciesVariant> factory = 
        manager.getFactory(org.tair.db.basic.SpeciesVariant.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<org.tair.db.basic.ISpeciesVariant> dao = 
        factory.getDeleteBatch(new org.tair.db.basic.sql.DeleteSpeciesVariant());
      dao.delete(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.sql.Connection connection, java.util.Collection<org.tair.db.basic.ISpeciesVariant> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.basic.ISpeciesVariant> factory = 
        manager.getFactory(org.tair.db.basic.SpeciesVariant.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<org.tair.db.basic.ISpeciesVariant> dao =
        factory.getInsertBatch(new org.tair.db.basic.sql.InsertSpeciesVariant());
      dao.insert(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected java.util.Collection<org.tair.db.basic.ISpeciesVariant> getDtos() {
      return variants;
    }
    
    @Override
    protected String getClassName() {
      return org.tair.db.basic.SpeciesVariant.class.getName();
    }
  }

  /**
   * Create an empty Taxon for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractTaxon() {
    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    
    // Add the many-to-many collection setters for the variants property.
    querySetters.add(new QueryVariantsSetter());
    readObjectSetters.add(new ReadVariantsSetter());
    insertSetters.add(new InsertVariantsSetter());
    postSetters.add(new UpdateVariantsSetter());
  }

  /**
   * Create a Taxon. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the Taxon
   * @param taxonId a unique identifier for the species taxon
   * @param genus the scientific genus name (collection of related species)
   * @param species the scientific species name within the genus
   * @param common the common botanical or zoological name for the species
   */
  public AbstractTaxon(IPrimaryKey key, java.lang.Long taxonId, java.lang.String genus, java.lang.String species, java.lang.String common) {
    this.key = key;

    this.taxonId = taxonId;

    if (taxonId == null) {
      throw new com.poesys.db.InvalidParametersException("taxonId is required for " + key.getValueList());
    }
    
    this.genus = genus;

    if (genus == null) {
      throw new com.poesys.db.InvalidParametersException("genus is required for " + key.getValueList());
    }
    
    this.species = species;

    if (species == null) {
      throw new com.poesys.db.InvalidParametersException("species is required for " + key.getValueList());
    }
    
    this.common = common;

    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    
    // Add the many-to-many collection setters for the variants property.
    querySetters.add(new QueryVariantsSetter());
    readObjectSetters.add(new ReadVariantsSetter());
    insertSetters.add(new InsertVariantsSetter());
    postSetters.add(new UpdateVariantsSetter());
  }

  @Override
  public boolean equals(Object arg0) {
    AbstractTaxon other = (AbstractTaxon)arg0;
    return other.key.equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    AbstractTaxon other = (AbstractTaxon)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.key.compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "org.tair.db.basic";
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
    // Only process deletes if child exists.
    if (variants != null) {
      for (com.poesys.db.dto.IDbDto dto : variants) {
        dto.cascadeDelete();
      }
    }
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  @Override
  public java.sql.Connection getConnection() throws java.sql.SQLException {
    java.sql.Connection connection = null;
    
	/* 
	 * The resource bundle for the DTO's subsystem contains the suffix that
	 * distinguishes multiple versions of the subsystem in the database.properties
	 * file, such as "prod" or "test". Most database.properties files have only
	 * one implementation and use external facilities to switch between the
	 * databases (JNDI, for example, or producing different database.properties
	 * files in different setups). Use the subsystem resource bundle to get the
	 * suffix, then use the full subsystem name to get a connection factory for
	 * the DTO's subsystem, then use that factory to get a JDBC connection.
	 */
	java.util.ResourceBundle rb = 
	  java.util.ResourceBundle.getBundle("org.tair.db.basic");
    String subsystem =
      "org.tair.db.basic"
          + (rb.getString("suffix") == null
             || rb.getString("suffix").length() == 0 ? ""
              : "." + rb.getString("suffix"));
	  
	try {
	  connection = 
	    com.poesys.db.connection.ConnectionFactoryFactory.getInstance(subsystem).getConnection();
	} catch (com.poesys.db.InvalidParametersException e) {
	  throw new java.sql.SQLException(e.getMessage());
	} catch (java.io.IOException e) {
	  throw new java.sql.SQLException(e.getMessage());
	}
	
	return connection;
  }

  /**
   * Nested property taxonId
   *
   * <p>
   * a unique identifier for the species taxon
   * </p>
   *
   * Added by AddNaturalKeyProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long taxonId;
  

  public java.lang.Long getTaxonId() {
    return taxonId;
  }

  /**
   * Clear the taxonId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTaxonId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property genus
   *
   * <p>
   * the scientific genus name (collection of related species)
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String genus;
  

  public java.lang.String getGenus() {
    return genus;
  }

  /**
   * Clear the genus data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearGenus() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property species
   *
   * <p>
   * the scientific species name within the genus
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String species;
  

  public java.lang.String getSpecies() {
    return species;
  }

  /**
   * Clear the species data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearSpecies() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property common
   *
   * <p>
   * the common botanical or zoological name for the species
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String common;
  

  public java.lang.String getCommon() {
    return common;
  }

  /**
   * Clear the common data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearCommon() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property variants
   *
   * <p>
   * the set of genomic variant individuals that provide the genetic material for
   * sequencing a genome for a taxon
   * </p>
   *
   * Added by AddToManyChildCollectionProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.tair.db.basic.ISpeciesVariant> variants;
  // Ordered list of keys of the objects in the $property.uniquename list
  java.util.List<com.poesys.db.pk.IPrimaryKey> variantsKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  

  public java.util.Collection<org.tair.db.basic.ISpeciesVariant> getVariants() {
    return variants;
  }

  /**
   * Clear the variants data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearVariants() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {

    // Clean up variants.
    if (subject != null && subject instanceof org.tair.db.basic.ISpeciesVariant && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        variants != null) {
      // Delete to-many variants child from collection
      variants.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }
  }
}