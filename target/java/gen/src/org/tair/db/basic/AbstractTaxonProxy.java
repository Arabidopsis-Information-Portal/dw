/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDtoProxy.vsl

package org.tair.db.basic;


import com.poesys.db.dto.AbstractLazyLoadingDtoProxy;


/**
 * <p>
 * A data-access layer data-transfer object (DTO) lazy-loading proxy for the 
 * Taxon. This class is an abstract class that contains AndroMDA 
 * generated code; change nothing in this class. Instead, override any methods 
 * in the concrete subclass generated in the same package. AndroMDA will 
 * overwrite this class each time you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * The species identification for a set of loci
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractTaxonProxy extends AbstractLazyLoadingDtoProxy implements ITaxon {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  


  /**
   * Read-Object setter for de-serializing nested variants collection
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.basic.sql.QuerySpeciesVariant
   */
  private class ReadVariantsSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.tair.db.basic.ISpeciesVariant> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadVariantsSetter object to read the variants collection.
     */
    public ReadVariantsSetter() {
      super("org.tair.db.basic", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.basic.SpeciesVariant.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.basic.ISpeciesVariant> getObjectCollection() {
      java.util.Collection<org.tair.db.basic.ISpeciesVariant> variants =  ((org.tair.db.basic.Taxon)dto).getVariants();
      return variants;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.tair.db.basic.Taxon)dto).variantsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.basic.ISpeciesVariant> getSql() {
      return new org.tair.db.basic.sql.QuerySpeciesVariant();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.basic.ISpeciesVariant> collection) {
      ((org.tair.db.basic.Taxon)dto).variants = collection;
    }
  }

  /**
   * Create a TaxonProxy. The concrete subclass must call this constructor.
   *
   * @param dto the DTO to proxy
   */
  public AbstractTaxonProxy(Taxon dto) {
    super(dto);

    // Setter arrays
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters.add(new ReadVariantsSetter());
  }

  @Override
  public boolean equals(Object obj) {
    AbstractTaxonProxy otherProxy = (AbstractTaxonProxy)obj;
    return ((Taxon)dto).equals(otherProxy.dto);
  }

  @Override
  public int hashCode() {
    return ((Taxon)dto).hashCode();
  }

  // Local properties (attributes, associations, and association classes)

  // Source: AddNaturalKeyProperties
  public java.lang.Long getTaxonId() {
    return ((Taxon)dto).getTaxonId();
  }

  // Source: AddLocalAttributeProperties
  public java.lang.String getGenus() {
    return ((Taxon)dto).getGenus();
  }

  // Source: AddLocalAttributeProperties
  public java.lang.String getSpecies() {
    return ((Taxon)dto).getSpecies();
  }

  // Source: AddLocalAttributeProperties
  public java.lang.String getCommon() {
    return ((Taxon)dto).getCommon();
  }

  // Source: AddToManyChildCollectionProperties
  public java.util.Collection<org.tair.db.basic.ISpeciesVariant> getVariants() {
    return ((Taxon)dto).getVariants();
  }

  public void markChildrenDeleted() throws com.poesys.db.dto.DtoStatusException {
  	((Taxon)dto).markChildrenDeleted();
  }
}