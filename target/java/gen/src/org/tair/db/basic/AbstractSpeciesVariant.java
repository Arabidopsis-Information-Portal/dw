/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package org.tair.db.basic;


import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;
import com.poesys.db.dto.DtoStatusException;


/**
 * <p>
 * A data-access layer data-transfer object for the SpeciesVariant. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * 
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>CompositeKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractSpeciesVariant extends AbstractDto implements ISpeciesVariant {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  // Setter strategy nested classes for single-object associations
  
  /**
   * Nested class that manages the taxon association data
   *
   * Source: AddToOneAssociationRequiredObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryTaxonSetter extends com.poesys.db.dto.AbstractObjectSetter<org.tair.db.basic.ITaxon> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryTaxonSetter object.
     */
    public QueryTaxonSetter() {
      super("org.tair.db.basic", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.basic.Taxon.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return taxonKey;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.basic.ITaxon> getSql() {
      return new org.tair.db.basic.sql.QueryTaxon();
    }

    @Override
    protected void set(org.tair.db.basic.ITaxon dto) {
      // No status change, this is just filling in the object data.
      taxon = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated taxon is not null
      return taxon != null;
    }
  }


  /**
   * Foreign key object used by QueryTaxonSetter nested class to query object
   */
  private IPrimaryKey taxonKey;
  
  /**
   * Set the foreign key taxonKey. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param taxonKey the foreign key
   */
  void setTaxonKey(IPrimaryKey taxonKey) {
    this.taxonKey = taxonKey;
  }


  /**
   * Create an empty SpeciesVariant for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractSpeciesVariant() {
    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();

    // Add the setters for the taxon property.
    querySetters.add(new QueryTaxonSetter());
  }

  /**
   * Create a SpeciesVariant. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the SpeciesVariant
   * @param taxonId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param name the name of the variant ecotype or species variant; first part of the primary
key
   * @param accession the accession identifier for this particular variant (second part of the primary
key); nulls in the original database translate into zero.
   * @param reference whether this is the reference species variant/ecotype for the taxon
   */
  public AbstractSpeciesVariant(IPrimaryKey key, java.lang.Long taxonId, java.lang.String name, java.lang.String accession, java.lang.Boolean reference) {
    this.key = key;

    this.taxonId = taxonId;

    if (taxonId == null) {
      throw new com.poesys.db.InvalidParametersException("taxonId is required for " + key.getValueList());
    }
    
    this.name = name;

    if (name == null) {
      throw new com.poesys.db.InvalidParametersException("name is required for " + key.getValueList());
    }
    
    this.accession = accession;

    if (accession == null) {
      throw new com.poesys.db.InvalidParametersException("accession is required for " + key.getValueList());
    }
    
    this.reference = reference;

    if (reference == null) {
      throw new com.poesys.db.InvalidParametersException("reference is required for " + key.getValueList());
    }
    
    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    
    // Add the setters for the taxon property.
    querySetters.add(new QueryTaxonSetter());
    
    // Set the internal key data member for the taxon object retrieval.
    taxonKey = org.tair.db.basic.BasicFactory.getTaxonPrimaryKey(taxonId/* Source: AddNaturalKeyProperties + addAssociationForeignKeys: taxonId Key: true */);
    // Add a setter to instantiate the required taxon object before insert.
    insertQuerySetters.add(new QueryTaxonSetter());
  }

  @Override
  public boolean equals(Object arg0) {
    AbstractSpeciesVariant other = (AbstractSpeciesVariant)arg0;
    return other.key.equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    AbstractSpeciesVariant other = (AbstractSpeciesVariant)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.key.compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "org.tair.db.basic";
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  @Override
  public java.sql.Connection getConnection() throws java.sql.SQLException {
    java.sql.Connection connection = null;
    
	/* 
	 * The resource bundle for the DTO's subsystem contains the suffix that
	 * distinguishes multiple versions of the subsystem in the database.properties
	 * file, such as "prod" or "test". Most database.properties files have only
	 * one implementation and use external facilities to switch between the
	 * databases (JNDI, for example, or producing different database.properties
	 * files in different setups). Use the subsystem resource bundle to get the
	 * suffix, then use the full subsystem name to get a connection factory for
	 * the DTO's subsystem, then use that factory to get a JDBC connection.
	 */
	java.util.ResourceBundle rb = 
	  java.util.ResourceBundle.getBundle("org.tair.db.basic");
    String subsystem =
      "org.tair.db.basic"
          + (rb.getString("suffix") == null
             || rb.getString("suffix").length() == 0 ? ""
              : "." + rb.getString("suffix"));
	  
	try {
	  connection = 
	    com.poesys.db.connection.ConnectionFactoryFactory.getInstance(subsystem).getConnection();
	} catch (com.poesys.db.InvalidParametersException e) {
	  throw new java.sql.SQLException(e.getMessage());
	} catch (java.io.IOException e) {
	  throw new java.sql.SQLException(e.getMessage());
	}
	
	return connection;
  }

  /**
   * Nested property taxonId
   *
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   *
   * Added by AddNaturalKeyProperties + AddParentKeyAttributes
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long taxonId;
  

  public java.lang.Long getTaxonId() {
    return taxonId;
  }

  /**
   * Clear the taxonId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTaxonId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property name
   *
   * <p>
   * the name of the variant ecotype or species variant; first part of the primary
   * key
   * </p>
   *
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String name;
  

  public java.lang.String getName() {
    return name;
  }

  /**
   * Clear the name data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearName() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property accession
   *
   * <p>
   * the accession identifier for this particular variant (second part of the primary
   * key); nulls in the original database translate into zero.
   * </p>
   *
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String accession;
  

  public java.lang.String getAccession() {
    return accession;
  }

  /**
   * Clear the accession data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearAccession() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property reference
   *
   * <p>
   * whether this is the reference species variant/ecotype for the taxon
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.Boolean reference;
  

  public java.lang.Boolean getReference() {
    return reference;
  }

  /**
   * Clear the reference data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearReference() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the reference.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * whether this is the reference species variant/ecotype for the taxon
   * </p>
   *
   * @param reference the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input reference is null
   */
  public void setReference(java.lang.Boolean reference)
      throws com.poesys.db.InvalidParametersException {
    if (reference == null) {
      throw new com.poesys.db.InvalidParametersException("reference is required");
    }
    
    this.reference = reference;
    setChanged();
  }

  /**
   * Nested property taxon
   *
   * <p>
   * the taxon or species to which the variant belongs
   * </p>
   *
   * Added by AddToOneAssociationRequiredObjectProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private org.tair.db.basic.ITaxon taxon;
  

  public org.tair.db.basic.ITaxon getTaxon() {
    return taxon;
  }

  /**
   * Clear the taxon data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTaxon() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the taxon.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the taxon or species to which the variant belongs
   * </p>
   *
   * @param taxon the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input taxon is null
   */
  public void setTaxon(org.tair.db.basic.ITaxon taxon)
      throws com.poesys.db.InvalidParametersException {
    if (taxon == null) {
      throw new com.poesys.db.InvalidParametersException("taxon is required");
    }
    
    this.taxon = taxon;
    // Set the IPrimaryKey cache lookup key.
    this.taxonKey = taxon.getPrimaryKey();
    setChanged();
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {
  }
}