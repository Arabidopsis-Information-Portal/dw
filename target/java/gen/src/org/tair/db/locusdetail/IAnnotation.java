/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: IDbDto.vsl

package org.tair.db.locusdetail;

import com.poesys.db.dto.IDbDto;

import com.poesys.db.dto.DtoStatusException;
import com.poesys.db.pk.IPrimaryKey;


/**
 * <p>
 * A data-access layer data-transfer-object interface for the Annotation. 
 * The data-transfer-object class and proxy class implement this interface, as
 * does the business-layer data-transfer-object class.
 * </p>
 * <p>
 * A unique combination of category, relationship type, keyword, evidence code,
 * evidence description, evidence-with, and reference that constitutes a functional
 * annotation of a genomic object such as a locus or gene model
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>NaturalKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: false
 * </p>
 * 
 * @author Poesys/DB Cartridge
 */
public interface IAnnotation extends IDbDto {

  boolean equals(Object arg0);

  int hashCode();

  /**
   * <p>
   * Mark any children of this DTO as deleted.
   * </p>
   *
   * @throws DtoStatusException when the child cannot be set to DELETED status
   */
  void markChildrenDeleted() throws DtoStatusException;

  IPrimaryKey getPrimaryKey();
  

  /**
   * <p>
   * The kind of keyword (GO Biological Process, GO Cellular Component, GO Molecular
   * Function, Interaction, Expression, Growth and Developmental Stages, Plant
   * Structure)
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: category
   * </p>
   * @return a java.lang.String category
   */
  public java.lang.String getCategory();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * The kind of relationship between a locus and a keyword (such as involved in,
   * located in, functions in, has, not expressed during, or expressed in)
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: relationshipType
   * </p>
   * @return a java.lang.String relationshipType
   */
  public java.lang.String getRelationshipType();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * the keyword associated with the locus (such as nucleus, glucose mediated
   * signaling pathway, or dry seed stage)
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: keyword
   * </p>
   * @return a java.lang.String keyword
   */
  public java.lang.String getKeyword();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * the standard three-letter code that indicates the kind of evidence association
   * with the annotation, such as IEA (inferred from electronic annotation) or IDA
   * (inferred from direct assay).
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: evidenceCode
   * </p>
   * @return a java.lang.String evidenceCode
   */
  public java.lang.String getEvidenceCode();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * information associated with the evidence, such as an affected protein or gene
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: evidenceWith
   * </p>
   * @return a java.lang.String evidenceWith
   */
  public java.lang.String getEvidenceWith();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * the reference (publication, communication, etc.) from which the annotation
   * comes; this is a textual version of the reference used for display
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: reference
   * </p>
   * @return a java.lang.String reference
   */
  public java.lang.String getReference();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * the unique identifier for the keyword; used in the URL that links to the keyword
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: keywordId
   * </p>
   * @return a java.lang.Long keywordId
   */
  public java.lang.Long getKeywordId();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * the unique identifier from the ontology for the keyword, such as GO:123456
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: ontologyId
   * </p>
   * @return a java.lang.String ontologyId
   */
  public java.lang.String getOntologyId();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * a textual description of the specific evidentiary technique used to provide
   * evidence for the annotation to the object
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: evidenceDescription
   * </p>
   * @return a java.lang.String evidenceDescription
   */
  public java.lang.String getEvidenceDescription();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * unique identifier for the evidence code/description combination ("evidence");
   * used in the URL that displays the full page for the evidence
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: evidenceId
   * </p>
   * @return a java.lang.Long evidenceId
   */
  public java.lang.Long getEvidenceId();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * the unique reference identifier; used in a URL to link to the reference
   * information
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: referenceId
   * </p>
   * @return a java.lang.Long referenceId
   */
  public java.lang.Long getReferenceId();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * the community member responsible for the annotation
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: annotatedBy
   * </p>
   * @return a java.lang.String annotatedBy
   */
  public java.lang.String getAnnotatedBy();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * the set of annotated gene models for the annotation
   * </p>
   * <p>
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * Owning DTO: LocusGeneModel
   * Owning package: org.tair.db.locusdetail
   * Property prefix: geneModels
   * </p>
   * <p>
   * This property loads lazily on demand rather than when you first query the 
   * IAnnotation object.
   * </p>
   * @return a java.util.Collection<org.tair.db.locusdetail.ILocusGeneModel> model
   * @throws java.sql.SQLException when the method can't get a SQL connection to 
   *                               load the property lazily
   */
  public java.util.Collection<org.tair.db.locusdetail.ILocusGeneModel> getModel() throws java.sql.SQLException;

  /**
   * Clear the model so that it will lazily reload.
   */
  public void clearModel();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * the set of loci associated with the annotation
   * </p>
   * <p>
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * Owning DTO: LocusDetail
   * Owning package: org.tair.db.locusdetail
   * Property prefix: loci
   * </p>
   * <p>
   * This property loads lazily on demand rather than when you first query the 
   * IAnnotation object.
   * </p>
   * @return a java.util.Collection<org.tair.db.locusdetail.ILocusDetail> locus
   * @throws java.sql.SQLException when the method can't get a SQL connection to 
   *                               load the property lazily
   */
  public java.util.Collection<org.tair.db.locusdetail.ILocusDetail> getLocus() throws java.sql.SQLException;

  /**
   * Clear the locus so that it will lazily reload.
   */
  public void clearLocus();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   * <p>
   * Added by AddAssociationClassCollectionProperties
   * Owning DTO: LocusGeneModelAnnotation
   * Owning package: org.tair.db.locusdetail
   * Property prefix: geneModels
   * </p>
   * @return a java.util.Collection<org.tair.db.locusdetail.ILocusGeneModelAnnotation> locusGeneModelAnnotation
   */
  public java.util.Collection<org.tair.db.locusdetail.ILocusGeneModelAnnotation> getLocusGeneModelAnnotation();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: true

  /**
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   * <p>
   * Added by AddAssociationClassCollectionProperties
   * Owning DTO: LocusAnnotation
   * Owning package: org.tair.db.locusdetail
   * Property prefix: loci
   * </p>
   * @return a java.util.Collection<org.tair.db.locusdetail.ILocusAnnotation> locusAnnotation
   */
  public java.util.Collection<org.tair.db.locusdetail.ILocusAnnotation> getLocusAnnotation();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: true
}