/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package org.tair.db.locusdetail;


import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;
import com.poesys.db.dto.DtoStatusException;


/**
 * <p>
 * A data-access layer data-transfer object for the LocusNaturalVariationEcotype. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * An ecotype that contains the natural variation polymorphism; this is in place of
 * a many-to-many link to SpeciesVariant, which extends beyond the subsystem
 * boundary and thus violates visibility rules
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>CompositeKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractLocusNaturalVariationEcotype extends AbstractDto implements ILocusNaturalVariationEcotype {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  // Setter strategy nested classes for single-object associations
  
  /**
   * Nested class that manages the polymorphism association data
   *
   * Source: AddToOneAssociationRequiredObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryPolymorphismSetter extends com.poesys.db.dto.AbstractObjectSetter<org.tair.db.locusdetail.ILocusNaturalVariation> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryPolymorphismSetter object.
     */
    public QueryPolymorphismSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.LocusNaturalVariation.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return polymorphismKey;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.ILocusNaturalVariation> getSql() {
      return new org.tair.db.locusdetail.sql.QueryLocusNaturalVariation();
    }

    @Override
    protected void set(org.tair.db.locusdetail.ILocusNaturalVariation dto) {
      // No status change, this is just filling in the object data.
      polymorphism = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated polymorphism is not null
      return polymorphism != null;
    }
  }


  /**
   * Foreign key object used by QueryPolymorphismSetter nested class to query object
   */
  private IPrimaryKey polymorphismKey;
  
  /**
   * Set the foreign key polymorphismKey. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param polymorphismKey the foreign key
   */
  void setPolymorphismKey(IPrimaryKey polymorphismKey) {
    this.polymorphismKey = polymorphismKey;
  }

  /**
   * Nested class that manages the ecotype association data
   *
   * Source: AddToOneAssociationRequiredObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryEcotypeSetter extends com.poesys.db.dto.AbstractObjectSetter<org.tair.db.basic.ISpeciesVariant> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryEcotypeSetter object.
     */
    public QueryEcotypeSetter() {
      super("org.tair.db.basic", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.basic.SpeciesVariant.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return ecotypeKey;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.basic.ISpeciesVariant> getSql() {
      return new org.tair.db.basic.sql.QuerySpeciesVariant();
    }

    @Override
    protected void set(org.tair.db.basic.ISpeciesVariant dto) {
      // No status change, this is just filling in the object data.
      ecotype = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated ecotype is not null
      return ecotype != null;
    }
  }

  /**
   * Insert setter for inserting nested ecotype.
   */
  private class InsertEcotypeSetter 
      extends com.poesys.db.dto.AbstractInsertSetter<org.tair.db.basic.ISpeciesVariant> {
    // ecotype source: AddToOneAssociationRequiredObjectProperties
    private static final long serialVersionUID = 1L;

    /**
     * Create an InsertEcotypeSetter object.
     */
    public InsertEcotypeSetter() {
      super("org.tair.db.basic", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.basic.SpeciesVariant.class.getName();
    }

    @Override
    protected org.tair.db.basic.ISpeciesVariant getDto() {
      return ecotype;
    }

    @Override
    protected com.poesys.db.dao.insert.IInsertSql<org.tair.db.basic.ISpeciesVariant> getSql() {
      return new org.tair.db.basic.sql.InsertSpeciesVariant();
    }
    
    @Override
    protected boolean createKey() {
      // Key type: CompositeKey
      return true;
    }
  }

  /**
   * Setter for processing added ecotype, updated ecotype, and 
   * deleted ecotype. 
   */
   
  private class UpdateEcotypeSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObject<org.tair.db.basic.ISpeciesVariant> {
    private static final long serialVersionUID = 1L;

    /**
     * Create an UpdateEcotypeSetter object.
     */
    public UpdateEcotypeSetter() {
      super("org.tair.db.basic", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, org.tair.db.basic.ISpeciesVariant dto)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
        // ecotype source: AddToOneAssociationRequiredObjectProperties
        // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.basic.ISpeciesVariant> factory = 
        manager.getFactory(org.tair.db.basic.SpeciesVariant.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdate<org.tair.db.basic.ISpeciesVariant> dao = 
        factory.getUpdate(new org.tair.db.basic.sql.UpdateSpeciesVariant());
      dao.update(connection, dto);
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, org.tair.db.basic.ISpeciesVariant dto)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.basic.ISpeciesVariant> factory = 
        manager.getFactory(org.tair.db.basic.SpeciesVariant.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDelete<org.tair.db.basic.ISpeciesVariant> dao = 
        factory.getDelete(new org.tair.db.basic.sql.DeleteSpeciesVariant());
      dao.delete(connection, dto);
    }

    @Override
    protected void doNew(java.sql.Connection connection, org.tair.db.basic.ISpeciesVariant dto)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.basic.ISpeciesVariant> factory = 
        manager.getFactory(org.tair.db.basic.SpeciesVariant.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsert<org.tair.db.basic.ISpeciesVariant> dao =
        factory.getInsert(new org.tair.db.basic.sql.InsertSpeciesVariant(), createKey());
      dao.insert(connection, dto);
    }

    @Override
    protected org.tair.db.basic.ISpeciesVariant getDto() {
      return ecotype;
    }
    
    @Override
    protected String getClassName() {
      return org.tair.db.basic.SpeciesVariant.class.getName();
    }

    @Override
    protected boolean createKey() {
      // Key type: CompositeKey
      return true;
    }
  }

  /**
   * Foreign key object used by QueryEcotypeSetter nested class to query object
   */
  private IPrimaryKey ecotypeKey;
  
  /**
   * Set the foreign key ecotypeKey. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param ecotypeKey the foreign key
   */
  void setEcotypeKey(IPrimaryKey ecotypeKey) {
    this.ecotypeKey = ecotypeKey;
  }


  /**
   * Create an empty LocusNaturalVariationEcotype for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractLocusNaturalVariationEcotype() {
    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();

    // Add the setters for the polymorphism property.
    querySetters.add(new QueryPolymorphismSetter());

    // Add the setters for the ecotype property.
    querySetters.add(new QueryEcotypeSetter());
    preSetters.add(new InsertEcotypeSetter());
    postSetters.add(new UpdateEcotypeSetter());
  }

  /**
   * Create a LocusNaturalVariationEcotype. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the LocusNaturalVariationEcotype
   * @param locusTairObjectId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param polymorphismName composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param accession the accession identifier for this particular variant (second part of the primary
key); nulls in the original database translate into zero.
   * @param name the name of the variant ecotype or species variant; first part of the primary
key
   * @param taxonId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   */
  public AbstractLocusNaturalVariationEcotype(IPrimaryKey key, java.lang.Long locusTairObjectId, java.lang.String polymorphismName, java.lang.String accession, java.lang.String name, java.lang.Long taxonId) {
    this.key = key;

    this.locusTairObjectId = locusTairObjectId;

    if (locusTairObjectId == null) {
      throw new com.poesys.db.InvalidParametersException("locusTairObjectId is required for " + key.getValueList());
    }
    
    this.polymorphismName = polymorphismName;

    if (polymorphismName == null) {
      throw new com.poesys.db.InvalidParametersException("polymorphismName is required for " + key.getValueList());
    }
    
    this.accession = accession;

    if (accession == null) {
      throw new com.poesys.db.InvalidParametersException("accession is required for " + key.getValueList());
    }
    
    this.name = name;

    if (name == null) {
      throw new com.poesys.db.InvalidParametersException("name is required for " + key.getValueList());
    }
    
    this.taxonId = taxonId;

    if (taxonId == null) {
      throw new com.poesys.db.InvalidParametersException("taxonId is required for " + key.getValueList());
    }
    
    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    
    // Add the setters for the polymorphism property.
    querySetters.add(new QueryPolymorphismSetter());
    
    // Set the internal key data member for the polymorphism object retrieval.
    polymorphismKey = org.tair.db.locusdetail.LocusdetailFactory.getLocusNaturalVariationPrimaryKey(locusTairObjectId/* Source: AddNaturalKeyProperties + AddParentKeyAttributes + AddInheritedKeyProperties + addAssociationForeignKeys: locusTairObjectId Key: true */, polymorphismName/* Source: AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddInheritedKeyProperties + addAssociationForeignKeys: polymorphismName Key: true */);
    // Add a setter to instantiate the required polymorphism object before insert.
    insertQuerySetters.add(new QueryPolymorphismSetter());
    
    // Add the setters for the ecotype property.
    querySetters.add(new QueryEcotypeSetter());
    insertSetters.add(new InsertEcotypeSetter());
    preSetters.add(new InsertEcotypeSetter());
    postSetters.add(new UpdateEcotypeSetter());
    
    // Set the internal key data member for the ecotype object retrieval.
    ecotypeKey = org.tair.db.basic.BasicFactory.getSpeciesVariantPrimaryKey(accession/* Source: AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + addAssociationForeignKeys: accession Key: true */, name/* Source: AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + addAssociationForeignKeys: name Key: true */, taxonId/* Source: AddNaturalKeyProperties + AddParentKeyAttributes + addAssociationForeignKeys: taxonId Key: true */);
    // Add a setter to instantiate the required ecotype object before insert.
    insertQuerySetters.add(new QueryEcotypeSetter());
  }

  @Override
  public boolean equals(Object arg0) {
    AbstractLocusNaturalVariationEcotype other = (AbstractLocusNaturalVariationEcotype)arg0;
    return other.key.equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    AbstractLocusNaturalVariationEcotype other = (AbstractLocusNaturalVariationEcotype)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.key.compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "org.tair.db.locusdetail";
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  @Override
  public java.sql.Connection getConnection() throws java.sql.SQLException {
    java.sql.Connection connection = null;
    
	/* 
	 * The resource bundle for the DTO's subsystem contains the suffix that
	 * distinguishes multiple versions of the subsystem in the database.properties
	 * file, such as "prod" or "test". Most database.properties files have only
	 * one implementation and use external facilities to switch between the
	 * databases (JNDI, for example, or producing different database.properties
	 * files in different setups). Use the subsystem resource bundle to get the
	 * suffix, then use the full subsystem name to get a connection factory for
	 * the DTO's subsystem, then use that factory to get a JDBC connection.
	 */
	java.util.ResourceBundle rb = 
	  java.util.ResourceBundle.getBundle("org.tair.db.locusdetail");
    String subsystem =
      "org.tair.db.locusdetail"
          + (rb.getString("suffix") == null
             || rb.getString("suffix").length() == 0 ? ""
              : "." + rb.getString("suffix"));
	  
	try {
	  connection = 
	    com.poesys.db.connection.ConnectionFactoryFactory.getInstance(subsystem).getConnection();
	} catch (com.poesys.db.InvalidParametersException e) {
	  throw new java.sql.SQLException(e.getMessage());
	} catch (java.io.IOException e) {
	  throw new java.sql.SQLException(e.getMessage());
	}
	
	return connection;
  }

  /**
   * Nested property locusTairObjectId
   *
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   *
   * Added by AddNaturalKeyProperties + AddParentKeyAttributes + AddInheritedKeyProperties + AddParentKeyAttributes
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long locusTairObjectId;
  

  public java.lang.Long getLocusTairObjectId() {
    return locusTairObjectId;
  }

  /**
   * Clear the locusTairObjectId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearLocusTairObjectId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property polymorphismName
   *
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   *
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddInheritedKeyProperties + AddParentKeyAttributes
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String polymorphismName;
  

  public java.lang.String getPolymorphismName() {
    return polymorphismName;
  }

  /**
   * Clear the polymorphismName data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearPolymorphismName() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property accession
   *
   * <p>
   * Foreign key used as primary sub-key in composite
   * </p>
   *
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + addExplicitSubkeyOnAssociation
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String accession;
  

  public java.lang.String getAccession() {
    return accession;
  }

  /**
   * Clear the accession data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearAccession() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property name
   *
   * <p>
   * Foreign key used as primary sub-key in composite
   * </p>
   *
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + addExplicitSubkeyOnAssociation
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String name;
  

  public java.lang.String getName() {
    return name;
  }

  /**
   * Clear the name data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearName() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property taxonId
   *
   * <p>
   * Foreign key used as primary sub-key in composite
   * </p>
   *
   * Added by AddNaturalKeyProperties + AddParentKeyAttributes + addExplicitSubkeyOnAssociation
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long taxonId;
  

  public java.lang.Long getTaxonId() {
    return taxonId;
  }

  /**
   * Clear the taxonId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTaxonId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property polymorphism
   *
   * 
   *
   * Added by AddToOneAssociationRequiredObjectProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private org.tair.db.locusdetail.ILocusNaturalVariation polymorphism;
  

  public org.tair.db.locusdetail.ILocusNaturalVariation getPolymorphism() {
    return polymorphism;
  }

  /**
   * Clear the polymorphism data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearPolymorphism() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the polymorphism.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * 
   *
   * @param polymorphism the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input polymorphism is null
   */
  public void setPolymorphism(org.tair.db.locusdetail.ILocusNaturalVariation polymorphism)
      throws com.poesys.db.InvalidParametersException {
    if (polymorphism == null) {
      throw new com.poesys.db.InvalidParametersException("polymorphism is required");
    }
    
    this.polymorphism = polymorphism;
    // Set the IPrimaryKey cache lookup key.
    this.polymorphismKey = polymorphism.getPrimaryKey();
    setChanged();
  }

  /**
   * Nested property ecotype
   *
   * <p>
   * the species variant that serves as the ecotype in the natural variation
   * polymorphism
   * </p>
   *
   * Added by AddToOneAssociationRequiredObjectProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private org.tair.db.basic.ISpeciesVariant ecotype;
  

  public org.tair.db.basic.ISpeciesVariant getEcotype() {
    return ecotype;
  }

  /**
   * Clear the ecotype data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearEcotype() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {
  }
}