/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package org.tair.db.locusdetail;


import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;
import com.poesys.db.dto.DtoStatusException;


/**
 * <p>
 * A data-access layer data-transfer object for the ProteinModelDomain. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * A protein domain linked to a specific protein amino acid sequence; multiple
 * instances of a given domain may link to the same amino acid sequence as long as
 * they have different start positions.
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>AssociationKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractProteinModelDomain extends AbstractDto implements IProteinModelDomain {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  // Setter strategy nested classes for single-object associations
  
  /**
   * Nested class that manages the domain association data
   *
   * Source: AddAssociationKeyObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryDomainSetter extends com.poesys.db.dto.AbstractObjectSetter<org.tair.db.locusdetail.IDomain> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryDomainSetter object.
     */
    public QueryDomainSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.Domain.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return domainKey;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.IDomain> getSql() {
      return new org.tair.db.locusdetail.sql.QueryDomain();
    }

    @Override
    protected void set(org.tair.db.locusdetail.IDomain dto) {
      // No status change, this is just filling in the object data.
      domain = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated domain is not null
      return domain != null;
    }
  }


  /**
   * Foreign key object used by QueryDomainSetter nested class to query object
   */
  private IPrimaryKey domainKey;
  
  /**
   * Set the foreign key domainKey. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param domainKey the foreign key
   */
  void setDomainKey(IPrimaryKey domainKey) {
    this.domainKey = domainKey;
  }

  /**
   * Nested class that manages the model association data
   *
   * Source: AddAssociationKeyObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryModelSetter extends com.poesys.db.dto.AbstractObjectSetter<org.tair.db.locusdetail.IProteinModel> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryModelSetter object.
     */
    public QueryModelSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.ProteinModel.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return modelKey;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.IProteinModel> getSql() {
      return new org.tair.db.locusdetail.sql.QueryProteinModel();
    }

    @Override
    protected void set(org.tair.db.locusdetail.IProteinModel dto) {
      // No status change, this is just filling in the object data.
      model = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated model is not null
      return model != null;
    }
  }


  /**
   * Foreign key object used by QueryModelSetter nested class to query object
   */
  private IPrimaryKey modelKey;
  
  /**
   * Set the foreign key modelKey. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param modelKey the foreign key
   */
  void setModelKey(IPrimaryKey modelKey) {
    this.modelKey = modelKey;
  }


  /**
   * Create an empty ProteinModelDomain for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractProteinModelDomain() {
    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();

    // Add the setters for the domain property.
    querySetters.add(new QueryDomainSetter());

    // Add the setters for the model property.
    querySetters.add(new QueryModelSetter());
  }

  /**
   * Create a ProteinModelDomain. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the ProteinModelDomain
   * @param domainsObject wraps an associated IDomain object
   * @param modelsObject wraps an associated IProteinModel object
   * @param accession Attribute that is part of the association key
   * @param geneModelName Attribute that is part of the association key
   * @param locusTairObjectId Attribute that is part of the association key
   * @param sequenceTairObjectId Attribute that is part of the association key
   * @param start the starting position of the domain instance within the protein model; also part
of the primary key, so a protein may have multiple instances of a given domain
as long as the instances have a different start position
   * @param end the ending position of the domain instance within the protein model
   */
  public AbstractProteinModelDomain(IPrimaryKey key, org.tair.db.locusdetail.IDomain domainsObject, org.tair.db.locusdetail.IProteinModel modelsObject, java.lang.String accession, java.lang.String geneModelName, java.lang.Long locusTairObjectId, java.lang.Long sequenceTairObjectId, java.lang.Integer start, java.lang.Integer end) {
    this.key = key;

    this.accession = accession;

    if (accession == null) {
      throw new com.poesys.db.InvalidParametersException("accession is required for " + key.getValueList());
    }
    
    this.geneModelName = geneModelName;

    if (geneModelName == null) {
      throw new com.poesys.db.InvalidParametersException("geneModelName is required for " + key.getValueList());
    }
    
    this.locusTairObjectId = locusTairObjectId;

    if (locusTairObjectId == null) {
      throw new com.poesys.db.InvalidParametersException("locusTairObjectId is required for " + key.getValueList());
    }
    
    this.sequenceTairObjectId = sequenceTairObjectId;

    if (sequenceTairObjectId == null) {
      throw new com.poesys.db.InvalidParametersException("sequenceTairObjectId is required for " + key.getValueList());
    }
    
    this.start = start;

    if (start == null) {
      throw new com.poesys.db.InvalidParametersException("start is required for " + key.getValueList());
    }
    
    this.end = end;

    if (end == null) {
      throw new com.poesys.db.InvalidParametersException("end is required for " + key.getValueList());
    }
    
    // Associated key object
    domain = domainsObject;
    
    // Associated key object
    model = modelsObject;
    
    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    
    // Add the setters for the domain property.
    querySetters.add(new QueryDomainSetter());
    
    // Set the internal key data member for the domain object retrieval.
    domainKey = org.tair.db.locusdetail.LocusdetailFactory.getDomainPrimaryKey(accession/* Source: AddNaturalKeyProperties + getAssociatedKeys Key: true */);
    // Add a setter to instantiate the required domain object before insert.
    insertQuerySetters.add(new QueryDomainSetter());
    
    // Add the setters for the model property.
    querySetters.add(new QueryModelSetter());
    
    // Set the internal key data member for the model object retrieval.
    modelKey = org.tair.db.locusdetail.LocusdetailFactory.getProteinModelPrimaryKey(geneModelName/* Source: AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddParentKeyAttributes + getAssociatedKeys Key: true */, locusTairObjectId/* Source: AddNaturalKeyProperties + AddParentKeyAttributes + AddParentKeyAttributes + getAssociatedKeys Key: true */, sequenceTairObjectId/* Source: AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + getAssociatedKeys Key: true */);
    // Add a setter to instantiate the required model object before insert.
    insertQuerySetters.add(new QueryModelSetter());
  }

  @Override
  public boolean equals(Object arg0) {
    AbstractProteinModelDomain other = (AbstractProteinModelDomain)arg0;
    return other.key.equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    AbstractProteinModelDomain other = (AbstractProteinModelDomain)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.key.compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "org.tair.db.locusdetail";
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  @Override
  public java.sql.Connection getConnection() throws java.sql.SQLException {
    java.sql.Connection connection = null;
    
	/* 
	 * The resource bundle for the DTO's subsystem contains the suffix that
	 * distinguishes multiple versions of the subsystem in the database.properties
	 * file, such as "prod" or "test". Most database.properties files have only
	 * one implementation and use external facilities to switch between the
	 * databases (JNDI, for example, or producing different database.properties
	 * files in different setups). Use the subsystem resource bundle to get the
	 * suffix, then use the full subsystem name to get a connection factory for
	 * the DTO's subsystem, then use that factory to get a JDBC connection.
	 */
	java.util.ResourceBundle rb = 
	  java.util.ResourceBundle.getBundle("org.tair.db.locusdetail");
    String subsystem =
      "org.tair.db.locusdetail"
          + (rb.getString("suffix") == null
             || rb.getString("suffix").length() == 0 ? ""
              : "." + rb.getString("suffix"));
	  
	try {
	  connection = 
	    com.poesys.db.connection.ConnectionFactoryFactory.getInstance(subsystem).getConnection();
	} catch (com.poesys.db.InvalidParametersException e) {
	  throw new java.sql.SQLException(e.getMessage());
	} catch (java.io.IOException e) {
	  throw new java.sql.SQLException(e.getMessage());
	}
	
	return connection;
  }

  /**
   * Nested property start
   *
   * <p>
   * the starting position of the domain instance within the protein model; also part
   * of the primary key, so a protein may have multiple instances of a given domain
   * as long as the instances have a different start position
   * </p>
   *
   * Added by AddNaturalKeyProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Integer start;
  

  public java.lang.Integer getStart() {
    return start;
  }

  /**
   * Clear the start data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearStart() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property end
   *
   * <p>
   * the ending position of the domain instance within the protein model
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.Integer end;
  

  public java.lang.Integer getEnd() {
    return end;
  }

  /**
   * Clear the end data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearEnd() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the end.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the ending position of the domain instance within the protein model
   * </p>
   *
   * @param end the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input end is null
   */
  public void setEnd(java.lang.Integer end)
      throws com.poesys.db.InvalidParametersException {
    if (end == null) {
      throw new com.poesys.db.InvalidParametersException("end is required");
    }
    
    this.end = end;
    setChanged();
  }

  /**
   * Nested property domain
   *
   * <p>
   * Associated object
   * </p>
   *
   * Added by AddAssociationKeyObjectProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private org.tair.db.locusdetail.IDomain domain;
  

  public org.tair.db.locusdetail.IDomain getDomain() {
    return domain;
  }

  /**
   * Clear the domain data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearDomain() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property model
   *
   * <p>
   * Associated object
   * </p>
   *
   * Added by AddAssociationKeyObjectProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private org.tair.db.locusdetail.IProteinModel model;
  

  public org.tair.db.locusdetail.IProteinModel getModel() {
    return model;
  }

  /**
   * Clear the model data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearModel() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property accession
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddNaturalKeyProperties + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String accession;
  

  public java.lang.String getAccession() {
    return accession;
  }

  /**
   * Clear the accession data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearAccession() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property geneModelName
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddParentKeyAttributes + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String geneModelName;
  

  public java.lang.String getGeneModelName() {
    return geneModelName;
  }

  /**
   * Clear the geneModelName data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearGeneModelName() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property locusTairObjectId
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddNaturalKeyProperties + AddParentKeyAttributes + AddParentKeyAttributes + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long locusTairObjectId;
  

  public java.lang.Long getLocusTairObjectId() {
    return locusTairObjectId;
  }

  /**
   * Clear the locusTairObjectId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearLocusTairObjectId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property sequenceTairObjectId
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long sequenceTairObjectId;
  

  public java.lang.Long getSequenceTairObjectId() {
    return sequenceTairObjectId;
  }

  /**
   * Clear the sequenceTairObjectId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearSequenceTairObjectId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {
  }
}