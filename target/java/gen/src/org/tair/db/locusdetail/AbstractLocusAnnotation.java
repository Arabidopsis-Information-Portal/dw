/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package org.tair.db.locusdetail;


import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;
import com.poesys.db.dto.DtoStatusException;


/**
 * <p>
 * A data-access layer data-transfer object for the LocusAnnotation. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * The link between a locus and an annotation; one annotation can annotate multiple
 * loci, and one locus may have multiple annotations
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>AssociationKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: false
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractLocusAnnotation extends AbstractDto implements ILocusAnnotation {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  // Setter strategy nested classes for single-object associations
  
  /**
   * Nested class that manages the annotation association data
   *
   * Source: AddAssociationKeyObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryAnnotationSetter extends com.poesys.db.dto.AbstractObjectSetter<org.tair.db.locusdetail.IAnnotation> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryAnnotationSetter object.
     */
    public QueryAnnotationSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.Annotation.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return annotationKey;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.IAnnotation> getSql() {
      return new org.tair.db.locusdetail.sql.QueryAnnotation();
    }

    @Override
    protected void set(org.tair.db.locusdetail.IAnnotation dto) {
      // No status change, this is just filling in the object data.
      annotation = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated annotation is not null
      return annotation != null;
    }
  }


  /**
   * Foreign key object used by QueryAnnotationSetter nested class to query object
   */
  private IPrimaryKey annotationKey;
  
  /**
   * Set the foreign key annotationKey. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param annotationKey the foreign key
   */
  void setAnnotationKey(IPrimaryKey annotationKey) {
    this.annotationKey = annotationKey;
  }

  /**
   * Nested class that manages the locus association data
   *
   * Source: AddAssociationKeyObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryLocusSetter extends com.poesys.db.dto.AbstractObjectSetter<org.tair.db.locusdetail.ILocusDetail> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryLocusSetter object.
     */
    public QueryLocusSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.LocusDetail.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return locusKey;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.ILocusDetail> getSql() {
      return new org.tair.db.locusdetail.sql.QueryLocusDetail();
    }

    @Override
    protected void set(org.tair.db.locusdetail.ILocusDetail dto) {
      // No status change, this is just filling in the object data.
      locus = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated locus is not null
      return locus != null;
    }
  }


  /**
   * Foreign key object used by QueryLocusSetter nested class to query object
   */
  private IPrimaryKey locusKey;
  
  /**
   * Set the foreign key locusKey. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param locusKey the foreign key
   */
  void setLocusKey(IPrimaryKey locusKey) {
    this.locusKey = locusKey;
  }


  /**
   * Create an empty LocusAnnotation for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractLocusAnnotation() {
    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();

    // Add the setters for the annotation property.
    querySetters.add(new QueryAnnotationSetter());

    // Add the setters for the locus property.
    querySetters.add(new QueryLocusSetter());
  }

  /**
   * Create a LocusAnnotation. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the LocusAnnotation
   * @param annotationsObject wraps an associated IAnnotation object
   * @param lociObject wraps an associated ILocusDetail object
   * @param category Attribute that is part of the association key
   * @param evidenceCode Attribute that is part of the association key
   * @param evidenceWith Attribute that is part of the association key
   * @param keyword Attribute that is part of the association key
   * @param locusTairObjectId Attribute that is part of the association key
   * @param reference Attribute that is part of the association key
   * @param relationshipType Attribute that is part of the association key
   */
  public AbstractLocusAnnotation(IPrimaryKey key, org.tair.db.locusdetail.IAnnotation annotationsObject, org.tair.db.locusdetail.ILocusDetail lociObject, java.lang.String category, java.lang.String evidenceCode, java.lang.String evidenceWith, java.lang.String keyword, java.lang.Long locusTairObjectId, java.lang.String reference, java.lang.String relationshipType) {
    this.key = key;

    this.category = category;

    if (category == null) {
      throw new com.poesys.db.InvalidParametersException("category is required for " + key.getValueList());
    }
    
    this.evidenceCode = evidenceCode;

    if (evidenceCode == null) {
      throw new com.poesys.db.InvalidParametersException("evidenceCode is required for " + key.getValueList());
    }
    
    this.evidenceWith = evidenceWith;

    if (evidenceWith == null) {
      throw new com.poesys.db.InvalidParametersException("evidenceWith is required for " + key.getValueList());
    }
    
    this.keyword = keyword;

    if (keyword == null) {
      throw new com.poesys.db.InvalidParametersException("keyword is required for " + key.getValueList());
    }
    
    this.locusTairObjectId = locusTairObjectId;

    if (locusTairObjectId == null) {
      throw new com.poesys.db.InvalidParametersException("locusTairObjectId is required for " + key.getValueList());
    }
    
    this.reference = reference;

    if (reference == null) {
      throw new com.poesys.db.InvalidParametersException("reference is required for " + key.getValueList());
    }
    
    this.relationshipType = relationshipType;

    if (relationshipType == null) {
      throw new com.poesys.db.InvalidParametersException("relationshipType is required for " + key.getValueList());
    }
    
    // Associated key object
    annotation = annotationsObject;
    
    // Associated key object
    locus = lociObject;
    
    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    
    // Add the setters for the annotation property.
    querySetters.add(new QueryAnnotationSetter());
    
    // Set the internal key data member for the annotation object retrieval.
    annotationKey = org.tair.db.locusdetail.LocusdetailFactory.getAnnotationPrimaryKey(category/* Source: AddNaturalKeyProperties + getAssociatedKeys Key: true */, evidenceCode/* Source: AddNaturalKeyProperties + getAssociatedKeys Key: true */, evidenceWith/* Source: AddNaturalKeyProperties + getAssociatedKeys Key: true */, keyword/* Source: AddNaturalKeyProperties + getAssociatedKeys Key: true */, reference/* Source: AddNaturalKeyProperties + getAssociatedKeys Key: true */, relationshipType/* Source: AddNaturalKeyProperties + getAssociatedKeys Key: true */);
    // Add a setter to instantiate the required annotation object before insert.
    insertQuerySetters.add(new QueryAnnotationSetter());
    
    // Add the setters for the locus property.
    querySetters.add(new QueryLocusSetter());
    
    // Set the internal key data member for the locus object retrieval.
    locusKey = org.tair.db.locusdetail.LocusdetailFactory.getLocusDetailPrimaryKey(locusTairObjectId/* Source: AddNaturalKeyProperties + getAssociatedKeys Key: true */);
    // Add a setter to instantiate the required locus object before insert.
    insertQuerySetters.add(new QueryLocusSetter());
  }

  @Override
  public boolean equals(Object arg0) {
    AbstractLocusAnnotation other = (AbstractLocusAnnotation)arg0;
    return other.key.equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    AbstractLocusAnnotation other = (AbstractLocusAnnotation)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.key.compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "org.tair.db.locusdetail";
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  @Override
  public java.sql.Connection getConnection() throws java.sql.SQLException {
    java.sql.Connection connection = null;
    
	/* 
	 * The resource bundle for the DTO's subsystem contains the suffix that
	 * distinguishes multiple versions of the subsystem in the database.properties
	 * file, such as "prod" or "test". Most database.properties files have only
	 * one implementation and use external facilities to switch between the
	 * databases (JNDI, for example, or producing different database.properties
	 * files in different setups). Use the subsystem resource bundle to get the
	 * suffix, then use the full subsystem name to get a connection factory for
	 * the DTO's subsystem, then use that factory to get a JDBC connection.
	 */
	java.util.ResourceBundle rb = 
	  java.util.ResourceBundle.getBundle("org.tair.db.locusdetail");
    String subsystem =
      "org.tair.db.locusdetail"
          + (rb.getString("suffix") == null
             || rb.getString("suffix").length() == 0 ? ""
              : "." + rb.getString("suffix"));
	  
	try {
	  connection = 
	    com.poesys.db.connection.ConnectionFactoryFactory.getInstance(subsystem).getConnection();
	} catch (com.poesys.db.InvalidParametersException e) {
	  throw new java.sql.SQLException(e.getMessage());
	} catch (java.io.IOException e) {
	  throw new java.sql.SQLException(e.getMessage());
	}
	
	return connection;
  }

  /**
   * Nested property annotation
   *
   * <p>
   * Associated object
   * </p>
   *
   * Added by AddAssociationKeyObjectProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private org.tair.db.locusdetail.IAnnotation annotation;
  

  public org.tair.db.locusdetail.IAnnotation getAnnotation() {
    return annotation;
  }

  /**
   * Clear the annotation data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearAnnotation() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property locus
   *
   * <p>
   * Associated object
   * </p>
   *
   * Added by AddAssociationKeyObjectProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private org.tair.db.locusdetail.ILocusDetail locus;
  

  public org.tair.db.locusdetail.ILocusDetail getLocus() {
    return locus;
  }

  /**
   * Clear the locus data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearLocus() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property category
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddNaturalKeyProperties + AddAssociationKeyAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String category;
  

  public java.lang.String getCategory() {
    return category;
  }

  /**
   * Clear the category data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearCategory() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property evidenceCode
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddNaturalKeyProperties + AddAssociationKeyAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String evidenceCode;
  

  public java.lang.String getEvidenceCode() {
    return evidenceCode;
  }

  /**
   * Clear the evidenceCode data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearEvidenceCode() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property evidenceWith
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddNaturalKeyProperties + AddAssociationKeyAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String evidenceWith;
  

  public java.lang.String getEvidenceWith() {
    return evidenceWith;
  }

  /**
   * Clear the evidenceWith data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearEvidenceWith() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property keyword
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddNaturalKeyProperties + AddAssociationKeyAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String keyword;
  

  public java.lang.String getKeyword() {
    return keyword;
  }

  /**
   * Clear the keyword data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearKeyword() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property locusTairObjectId
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddNaturalKeyProperties + AddAssociationKeyAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long locusTairObjectId;
  

  public java.lang.Long getLocusTairObjectId() {
    return locusTairObjectId;
  }

  /**
   * Clear the locusTairObjectId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearLocusTairObjectId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property reference
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddNaturalKeyProperties + AddAssociationKeyAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String reference;
  

  public java.lang.String getReference() {
    return reference;
  }

  /**
   * Clear the reference data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearReference() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property relationshipType
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddNaturalKeyProperties + AddAssociationKeyAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String relationshipType;
  

  public java.lang.String getRelationshipType() {
    return relationshipType;
  }

  /**
   * Clear the relationshipType data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearRelationshipType() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {
  }
}