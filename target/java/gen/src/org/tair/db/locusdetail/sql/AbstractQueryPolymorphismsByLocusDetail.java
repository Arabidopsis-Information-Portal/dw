/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractQueryAssociatedOneToManyObjects.vsl

package org.tair.db.locusdetail.sql;


import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.poesys.db.ConstraintViolationException;
import com.poesys.db.InvalidParametersException;
import com.poesys.db.dao.query.IParameterizedQuerySql;
import com.poesys.db.pk.IPrimaryKey;


/**
 * <p>
 * A query Command pattern object that implements a SQL query of a collection of 
 * LocusPolymorphism objects using the primary key of an associated 
 * LocusDetail object through the association Polymorphisms. This
 * is a many-to-one association from LocusPolymorphism to LocusDetail.
 * </p>
 * <p>
 * This SQL specification contains a SQL statement that queries a collection of
 * LocusPolymorphism objects from the database using the foreign key type
 * LocusDetail.
 * </p>
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractQueryPolymorphismsByLocusDetail 
    implements IParameterizedQuerySql<org.tair.db.locusdetail.ILocusPolymorphism, org.tair.db.locusdetail.ILocusDetail> {
  /** SQL query statement for LocusPolymorphism */
  private static final String SQL =
    "SELECT LocusPolymorphism.locusTairObjectId, LocusPolymorphism.polymorphismName, LocusPolymorphism.polymorphismTairObjectId, LocusPolymorphism.polymorphismType, LocusPolymorphism.length, LocusPolymorphism.startPosition, LocusPolymorphism.endPosition, LocusInducedPolymorphism.inheritance, LocusInducedPolymorphism.alleleType, LocusInducedPolymorphism.accession, LocusInducedPolymorphism.name, LocusInducedPolymorphism.taxonId, LocusNaturalVariation.detail, LocusNaturalVariation.referenceAccession, LocusNaturalVariation.referenceEcotype, LocusNaturalVariation.referenceTaxonId, CASE WHEN LocusInducedPolymorphism.locusTairObjectId IS NOT NULL THEN 'LocusInducedPolymorphism' WHEN LocusInducedPolymorphism.polymorphismName IS NOT NULL THEN 'LocusInducedPolymorphism' WHEN LocusNaturalVariation.locusTairObjectId IS NOT NULL THEN 'LocusNaturalVariation' WHEN LocusNaturalVariation.polymorphismName IS NOT NULL THEN 'LocusNaturalVariation' ELSE NULL END AS discriminant FROM LocusPolymorphism LEFT OUTER JOIN LocusInducedPolymorphism LocusInducedPolymorphism ON LocusPolymorphism.locusTairObjectId = LocusInducedPolymorphism.locusTairObjectId AND LocusPolymorphism.polymorphismName = LocusInducedPolymorphism.polymorphismName LEFT OUTER JOIN LocusNaturalVariation LocusNaturalVariation ON LocusPolymorphism.locusTairObjectId = LocusNaturalVariation.locusTairObjectId AND LocusPolymorphism.polymorphismName = LocusNaturalVariation.polymorphismName WHERE LocusPolymorphism.locusTairObjectId = ?";

  public void bindParameters(PreparedStatement stmt, org.tair.db.locusdetail.ILocusDetail parameters)
      throws SQLException {
    // Set the parameters starting with the first parameter.
    parameters.getPrimaryKey().setParams(stmt, 1);
  }

  public String getParameterValues(org.tair.db.locusdetail.ILocusDetail parameters) {
    // Create the output string with the key parameters.
    return parameters.getPrimaryKey().getValueList();
  }

  public org.tair.db.locusdetail.ILocusPolymorphism getData(ResultSet rs) throws SQLException,
      ConstraintViolationException {
    return org.tair.db.locusdetail.LocusdetailFactory.getLocusPolymorphismData(getPrimaryKey(rs), rs);
  }

  public IPrimaryKey getPrimaryKey(ResultSet rs) throws SQLException,
      InvalidParametersException {
    return org.tair.db.locusdetail.LocusdetailFactory.getLocusPolymorphismPrimaryKey(rs, "");
  }

  public String getSql() {
    return SQL;
  }
}