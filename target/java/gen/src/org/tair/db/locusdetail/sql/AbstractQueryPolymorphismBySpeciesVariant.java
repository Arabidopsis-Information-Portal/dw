/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractQueryAssociatedManyToManyObjects.vsl


package org.tair.db.locusdetail.sql;


import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.poesys.db.ConstraintViolationException;
import com.poesys.db.InvalidParametersException;
import com.poesys.db.dao.query.IParameterizedQuerySql;
import com.poesys.db.pk.IPrimaryKey;



/**
 * <p>
 * A query Command pattern object that implements a SQL query of a collection of 
 * LocusNaturalVariation objects using the primary key of an associated 
 * SpeciesVariant object through the association Polymorphism using the 
 * association class LocusNaturalVariationEcotype. This association is a many-to-many 
 * association from LocusNaturalVariation to SpeciesVariant.
 * </p>
 * <p>
 * This SQL specification contains a SQL statement that queries a collection of
 * LocusNaturalVariation objects from the database table LocusNaturalVariation by
 * joining to the database table LocusNaturalVariationEcotype and using the 
 * primary key from SpeciesVariant to query the collection.
 * </p>
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractQueryPolymorphismBySpeciesVariant 
    implements IParameterizedQuerySql<org.tair.db.locusdetail.ILocusNaturalVariation, org.tair.db.basic.ISpeciesVariant> {
  /** SQL query statement for LocusNaturalVariation */
  private static final String SQL =
    "SELECT a.locusTairObjectId, a.polymorphismName, a.polymorphismTairObjectId, a.polymorphismType, a.length, a.startPosition, a.endPosition, a.detail, a.referenceAccession, a.referenceEcotype, a.referenceTaxonId FROM LocusNaturalVariation a JOIN LocusNaturalVariationEcotype b ON a.locusTairObjectId = b.locusTairObjectId AND a.polymorphismName = b.polymorphismName WHERE b.accession = ? AND b.name = ? AND b.taxonId = ?";

  public void bindParameters(PreparedStatement stmt, org.tair.db.basic.ISpeciesVariant parameters)
      throws SQLException {
    // Set the parameters starting with the first parameter.
    parameters.getPrimaryKey().setParams(stmt, 1);
  }

  public String getParameterValues(org.tair.db.basic.ISpeciesVariant parameters) {
    // Create the output string with the key parameters.
    return parameters.getPrimaryKey().getValueList();
  }

  public org.tair.db.locusdetail.ILocusNaturalVariation getData(ResultSet rs) 
      throws SQLException, ConstraintViolationException {
    IPrimaryKey key = 
      org.tair.db.locusdetail.LocusdetailFactory.getLocusNaturalVariationPrimaryKey(rs, "");
    return org.tair.db.locusdetail.LocusdetailFactory.getLocusNaturalVariationData(key, rs);
  }

  public IPrimaryKey getPrimaryKey(ResultSet rs) throws SQLException,
      InvalidParametersException {
    return org.tair.db.locusdetail.LocusdetailFactory.getLocusNaturalVariationPrimaryKey(rs, "");
  }

  public String getSql() {
    return SQL;
  }
}