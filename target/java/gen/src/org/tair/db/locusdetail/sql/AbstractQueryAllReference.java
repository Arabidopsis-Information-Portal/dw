/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractQueryAll.vsl

package org.tair.db.locusdetail.sql;


import java.sql.ResultSet;
import java.sql.SQLException;

import com.poesys.db.InvalidParametersException;
import com.poesys.db.dao.query.IQuerySql;
import com.poesys.db.pk.IPrimaryKey;

import org.tair.db.locusdetail.LocusdetailFactory;


/**
 * <p>
 * A query Command pattern object that implements a SQL query for all the 
 * Reference objects in the database; use with caution
 * </p>
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractQueryAllReference implements IQuerySql<org.tair.db.locusdetail.IReference> {
  /** SQL query statement for Reference */
  private static final String SQL =
    "SELECT Reference.locusTairObjectId, Reference.referenceTairObjectId, Reference.title, Reference.authors, Reference.publicationYear, Reference.locusCount, Reference.annotated, ConferenceAbstract.conference, JournalArticle.journal, JournalArticle.pubmedId, CASE WHEN ConferenceAbstract.locusTairObjectId IS NOT NULL THEN 'ConferenceAbstract' WHEN ConferenceAbstract.referenceTairObjectId IS NOT NULL THEN 'ConferenceAbstract' WHEN JournalArticle.locusTairObjectId IS NOT NULL THEN 'JournalArticle' WHEN JournalArticle.referenceTairObjectId IS NOT NULL THEN 'JournalArticle' ELSE NULL END AS discriminant FROM Reference LEFT OUTER JOIN ConferenceAbstract ConferenceAbstract ON Reference.locusTairObjectId = ConferenceAbstract.locusTairObjectId AND Reference.referenceTairObjectId = ConferenceAbstract.referenceTairObjectId LEFT OUTER JOIN JournalArticle JournalArticle ON Reference.locusTairObjectId = JournalArticle.locusTairObjectId AND Reference.referenceTairObjectId = JournalArticle.referenceTairObjectId";

  public org.tair.db.locusdetail.IReference getData(ResultSet rs) throws SQLException {
    IPrimaryKey key = 
      LocusdetailFactory.getReferencePrimaryKey(rs, "");
      
    // Reference has subclasses, so the query returns an object of the actual
    // type rather than just of type Reference. It uses a discriminant expression
    // that the result set returns to figure out which class to instantiate.
    
    // Get the discriminant from the result set.
    String discriminant = rs.getString("discriminant");
    
    // Check whether the discriminant is null and throw exception.
    if (discriminant == null) {
      throw new com.poesys.bs.delegate.DelegateException("Missing subclass for queried object of superclass org.tair.db.locusdetail.Reference");
    }
    
    org.tair.db.locusdetail.IReference data = null;
    // Check for ConferenceAbstract, set return only if not already set
    if (discriminant.equals("ConferenceAbstract") && data == null) {
      // Use the locusdetail factory to get the data.
      data = 
        (org.tair.db.locusdetail.IReference)org.tair.db.locusdetail.LocusdetailFactory.getConferenceAbstractData(key, rs);
    }
    // Check for JournalArticle, set return only if not already set
    if (discriminant.equals("JournalArticle") && data == null) {
      // Use the locusdetail factory to get the data.
      data = 
        (org.tair.db.locusdetail.IReference)org.tair.db.locusdetail.LocusdetailFactory.getJournalArticleData(key, rs);
    }
    return data;
  }
  
  public IPrimaryKey getPrimaryKey(ResultSet rs) throws SQLException,
      InvalidParametersException {
    return LocusdetailFactory.getReferencePrimaryKey(rs, "");
  }

  public String getSql() {
    return SQL;
  }
}