/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package org.tair.db.locusdetail;


import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;
import com.poesys.db.dto.DtoStatusException;


/**
 * <p>
 * A data-access layer data-transfer object for the Annotation. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * A unique combination of category, relationship type, keyword, evidence code,
 * evidence description, evidence-with, and reference that constitutes a functional
 * annotation of a genomic object such as a locus or gene model
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>NaturalKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: false
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractAnnotation extends AbstractDto implements IAnnotation {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  
  // Setter strategy nested classes for multiple-object associations

   
   
  /**
   * Query setter for querying nested locusGeneModelAnnotation
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryLocusGeneModelAnnotationByAnnotation
   */
  private class QueryLocusGeneModelAnnotationSetter 
      extends com.poesys.db.dto.AbstractListSetter<org.tair.db.locusdetail.ILocusGeneModelAnnotation, IAnnotation, java.util.Collection<org.tair.db.locusdetail.ILocusGeneModelAnnotation>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryLocusGeneModelAnnotationSetter object.
     */
    public QueryLocusGeneModelAnnotationSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.LocusGeneModelAnnotation.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected IAnnotation getParametersDto() {
      return AbstractAnnotation.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.tair.db.locusdetail.ILocusGeneModelAnnotation, IAnnotation> getSql() {
      return new org.tair.db.locusdetail.sql.QueryLocusGeneModelAnnotationByAnnotation();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.locusdetail.ILocusGeneModelAnnotation> list) {
      // No status change; this is just filling in the object data.
      locusGeneModelAnnotation = list;
      // Add the primary keys to the serialized key list if there are any.
      if (locusGeneModelAnnotation != null) {
        for (com.poesys.db.dto.IDbDto object : locusGeneModelAnnotation) {
          locusGeneModelAnnotationKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated locusGeneModelAnnotation list is not null
      return locusGeneModelAnnotation != null;
    }
  }

  /**
   * Insert setter for inserting nested locusGeneModelAnnotation.
   *
   * @see org.tair.db.locusdetail.sql.InsertLocusGeneModelAnnotation
   */
  private class InsertLocusGeneModelAnnotationSetter 
      extends com.poesys.db.dto.AbstractBatchInsertSetter<org.tair.db.locusdetail.ILocusGeneModelAnnotation, java.util.Collection<org.tair.db.locusdetail.ILocusGeneModelAnnotation>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;
    
    // locusGeneModelAnnotation source: AddAssociationClassCollectionProperties

    /**
     * Create an InsertLocusGeneModelAnnotationSetter object.
     */
    public InsertLocusGeneModelAnnotationSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected int getBatchSize() {
      return BATCH_SIZE;
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.LocusGeneModelAnnotation.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.locusdetail.ILocusGeneModelAnnotation> getDtos() {
      return locusGeneModelAnnotation;
    }

    @Override
    protected com.poesys.db.dao.insert.IInsertSql<org.tair.db.locusdetail.ILocusGeneModelAnnotation> getSql() {
      return new org.tair.db.locusdetail.sql.InsertLocusGeneModelAnnotation();
    }
  }

  /**
   * Setter for processing added locusGeneModelAnnotation and updated locusGeneModelAnnotation.
   * Deleted locusGeneModelAnnotation are deleted in the database cascade delete.
   */
   
  private class UpdateLocusGeneModelAnnotationSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<org.tair.db.locusdetail.ILocusGeneModelAnnotation, java.util.Collection<org.tair.db.locusdetail.ILocusGeneModelAnnotation>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdateLocusGeneModelAnnotationSetter object.
     */
    public UpdateLocusGeneModelAnnotationSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, java.util.Collection<org.tair.db.locusdetail.ILocusGeneModelAnnotation> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
        // locusGeneModelAnnotation source: AddAssociationClassCollectionProperties
        // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.locusdetail.ILocusGeneModelAnnotation> factory = 
        manager.getFactory(org.tair.db.locusdetail.LocusGeneModelAnnotation.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<org.tair.db.locusdetail.ILocusGeneModelAnnotation> dao =
        factory.getUpdateBatch(new org.tair.db.locusdetail.sql.UpdateLocusGeneModelAnnotation());
      dao.update(connection, dtos, BATCH_SIZE);
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, java.util.Collection<org.tair.db.locusdetail.ILocusGeneModelAnnotation> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.locusdetail.ILocusGeneModelAnnotation> factory = 
        manager.getFactory(org.tair.db.locusdetail.LocusGeneModelAnnotation.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<org.tair.db.locusdetail.ILocusGeneModelAnnotation> dao = 
        factory.getDeleteBatch(new org.tair.db.locusdetail.sql.DeleteLocusGeneModelAnnotation());
      dao.delete(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.sql.Connection connection, java.util.Collection<org.tair.db.locusdetail.ILocusGeneModelAnnotation> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.locusdetail.ILocusGeneModelAnnotation> factory = 
        manager.getFactory(org.tair.db.locusdetail.LocusGeneModelAnnotation.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<org.tair.db.locusdetail.ILocusGeneModelAnnotation> dao =
        factory.getInsertBatch(new org.tair.db.locusdetail.sql.InsertLocusGeneModelAnnotation());
      dao.insert(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected java.util.Collection<org.tair.db.locusdetail.ILocusGeneModelAnnotation> getDtos() {
      return locusGeneModelAnnotation;
    }
    
    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.LocusGeneModelAnnotation.class.getName();
    }
  }

  /**
   * Query setter for querying nested locusAnnotation
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryLocusAnnotationByAnnotation
   */
  private class QueryLocusAnnotationSetter 
      extends com.poesys.db.dto.AbstractListSetter<org.tair.db.locusdetail.ILocusAnnotation, IAnnotation, java.util.Collection<org.tair.db.locusdetail.ILocusAnnotation>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryLocusAnnotationSetter object.
     */
    public QueryLocusAnnotationSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.LocusAnnotation.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected IAnnotation getParametersDto() {
      return AbstractAnnotation.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.tair.db.locusdetail.ILocusAnnotation, IAnnotation> getSql() {
      return new org.tair.db.locusdetail.sql.QueryLocusAnnotationByAnnotation();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.locusdetail.ILocusAnnotation> list) {
      // No status change; this is just filling in the object data.
      locusAnnotation = list;
      // Add the primary keys to the serialized key list if there are any.
      if (locusAnnotation != null) {
        for (com.poesys.db.dto.IDbDto object : locusAnnotation) {
          locusAnnotationKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated locusAnnotation list is not null
      return locusAnnotation != null;
    }
  }
   
  /**
   * Create an empty Annotation for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractAnnotation() {
    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    
    // Add the many-to-many collection setters for the model property.
    
    // Add the many-to-many collection setters for the locus property.
    
    // Add the many-to-many collection setters for the locusGeneModelAnnotation property.
    querySetters.add(new QueryLocusGeneModelAnnotationSetter());
    insertSetters.add(new InsertLocusGeneModelAnnotationSetter());
    postSetters.add(new UpdateLocusGeneModelAnnotationSetter());
    
    // Add the many-to-many collection setters for the locusAnnotation property.
    querySetters.add(new QueryLocusAnnotationSetter());
  }

  /**
   * Create a Annotation. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the Annotation
   * @param category The kind of keyword (GO Biological Process, GO Cellular Component, GO Molecular
Function, Interaction, Expression, Growth and Developmental Stages, Plant
Structure)
   * @param relationshipType The kind of relationship between a locus and a keyword (such as involved in,
located in, functions in, has, not expressed during, or expressed in)
   * @param keyword the keyword associated with the locus (such as nucleus, glucose mediated
signaling pathway, or dry seed stage)
   * @param evidenceCode the standard three-letter code that indicates the kind of evidence association
with the annotation, such as IEA (inferred from electronic annotation) or IDA
(inferred from direct assay).
   * @param evidenceWith information associated with the evidence, such as an affected protein or gene
   * @param reference the reference (publication, communication, etc.) from which the annotation
comes; this is a textual version of the reference used for display
   * @param keywordId the unique identifier for the keyword; used in the URL that links to the keyword
   * @param ontologyId the unique identifier from the ontology for the keyword, such as GO:123456
   * @param evidenceDescription a textual description of the specific evidentiary technique used to provide
evidence for the annotation to the object
   * @param evidenceId unique identifier for the evidence code/description combination ("evidence");
used in the URL that displays the full page for the evidence
   * @param referenceId the unique reference identifier; used in a URL to link to the reference
information
   * @param annotatedBy the community member responsible for the annotation
   */
  public AbstractAnnotation(IPrimaryKey key, java.lang.String category, java.lang.String relationshipType, java.lang.String keyword, java.lang.String evidenceCode, java.lang.String evidenceWith, java.lang.String reference, java.lang.Long keywordId, java.lang.String ontologyId, java.lang.String evidenceDescription, java.lang.Long evidenceId, java.lang.Long referenceId, java.lang.String annotatedBy) {
    this.key = key;

    this.category = category;

    if (category == null) {
      throw new com.poesys.db.InvalidParametersException("category is required for " + key.getValueList());
    }
    
    this.relationshipType = relationshipType;

    if (relationshipType == null) {
      throw new com.poesys.db.InvalidParametersException("relationshipType is required for " + key.getValueList());
    }
    
    this.keyword = keyword;

    if (keyword == null) {
      throw new com.poesys.db.InvalidParametersException("keyword is required for " + key.getValueList());
    }
    
    this.evidenceCode = evidenceCode;

    if (evidenceCode == null) {
      throw new com.poesys.db.InvalidParametersException("evidenceCode is required for " + key.getValueList());
    }
    
    this.evidenceWith = evidenceWith;

    if (evidenceWith == null) {
      throw new com.poesys.db.InvalidParametersException("evidenceWith is required for " + key.getValueList());
    }
    
    this.reference = reference;

    if (reference == null) {
      throw new com.poesys.db.InvalidParametersException("reference is required for " + key.getValueList());
    }
    
    this.keywordId = keywordId;

    if (keywordId == null) {
      throw new com.poesys.db.InvalidParametersException("keywordId is required for " + key.getValueList());
    }
    
    this.ontologyId = ontologyId;

    if (ontologyId == null) {
      throw new com.poesys.db.InvalidParametersException("ontologyId is required for " + key.getValueList());
    }
    
    this.evidenceDescription = evidenceDescription;

    if (evidenceDescription == null) {
      throw new com.poesys.db.InvalidParametersException("evidenceDescription is required for " + key.getValueList());
    }
    
    this.evidenceId = evidenceId;

    if (evidenceId == null) {
      throw new com.poesys.db.InvalidParametersException("evidenceId is required for " + key.getValueList());
    }
    
    this.referenceId = referenceId;

    if (referenceId == null) {
      throw new com.poesys.db.InvalidParametersException("referenceId is required for " + key.getValueList());
    }
    
    this.annotatedBy = annotatedBy;

    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    
    // Add the many-to-many collection setters for the model property.
    
    // Add the many-to-many collection setters for the locus property.
    
    // Add the many-to-many collection setters for the locusGeneModelAnnotation property.
    querySetters.add(new QueryLocusGeneModelAnnotationSetter());
    insertSetters.add(new InsertLocusGeneModelAnnotationSetter());
    postSetters.add(new UpdateLocusGeneModelAnnotationSetter());
    
    // Add the many-to-many collection setters for the locusAnnotation property.
    querySetters.add(new QueryLocusAnnotationSetter());
  }

  @Override
  public boolean equals(Object arg0) {
    AbstractAnnotation other = (AbstractAnnotation)arg0;
    return other.key.equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    AbstractAnnotation other = (AbstractAnnotation)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.key.compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "org.tair.db.locusdetail";
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
    // Only process deletes if child exists.
    if (locusGeneModelAnnotation != null) {
      for (com.poesys.db.dto.IDbDto dto : locusGeneModelAnnotation) {
        dto.cascadeDelete();
      }
    }
    // Only process deletes if child exists.
    if (locusAnnotation != null) {
      for (com.poesys.db.dto.IDbDto dto : locusAnnotation) {
        dto.cascadeDelete();
      }
    }
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  @Override
  public java.sql.Connection getConnection() throws java.sql.SQLException {
    java.sql.Connection connection = null;
    
	/* 
	 * The resource bundle for the DTO's subsystem contains the suffix that
	 * distinguishes multiple versions of the subsystem in the database.properties
	 * file, such as "prod" or "test". Most database.properties files have only
	 * one implementation and use external facilities to switch between the
	 * databases (JNDI, for example, or producing different database.properties
	 * files in different setups). Use the subsystem resource bundle to get the
	 * suffix, then use the full subsystem name to get a connection factory for
	 * the DTO's subsystem, then use that factory to get a JDBC connection.
	 */
	java.util.ResourceBundle rb = 
	  java.util.ResourceBundle.getBundle("org.tair.db.locusdetail");
    String subsystem =
      "org.tair.db.locusdetail"
          + (rb.getString("suffix") == null
             || rb.getString("suffix").length() == 0 ? ""
              : "." + rb.getString("suffix"));
	  
	try {
	  connection = 
	    com.poesys.db.connection.ConnectionFactoryFactory.getInstance(subsystem).getConnection();
	} catch (com.poesys.db.InvalidParametersException e) {
	  throw new java.sql.SQLException(e.getMessage());
	} catch (java.io.IOException e) {
	  throw new java.sql.SQLException(e.getMessage());
	}
	
	return connection;
  }

  /**
   * Nested property category
   *
   * <p>
   * The kind of keyword (GO Biological Process, GO Cellular Component, GO Molecular
   * Function, Interaction, Expression, Growth and Developmental Stages, Plant
   * Structure)
   * </p>
   *
   * Added by AddNaturalKeyProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String category;
  

  public java.lang.String getCategory() {
    return category;
  }

  /**
   * Clear the category data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearCategory() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property relationshipType
   *
   * <p>
   * The kind of relationship between a locus and a keyword (such as involved in,
   * located in, functions in, has, not expressed during, or expressed in)
   * </p>
   *
   * Added by AddNaturalKeyProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String relationshipType;
  

  public java.lang.String getRelationshipType() {
    return relationshipType;
  }

  /**
   * Clear the relationshipType data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearRelationshipType() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property keyword
   *
   * <p>
   * the keyword associated with the locus (such as nucleus, glucose mediated
   * signaling pathway, or dry seed stage)
   * </p>
   *
   * Added by AddNaturalKeyProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String keyword;
  

  public java.lang.String getKeyword() {
    return keyword;
  }

  /**
   * Clear the keyword data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearKeyword() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property evidenceCode
   *
   * <p>
   * the standard three-letter code that indicates the kind of evidence association
   * with the annotation, such as IEA (inferred from electronic annotation) or IDA
   * (inferred from direct assay).
   * </p>
   *
   * Added by AddNaturalKeyProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String evidenceCode;
  

  public java.lang.String getEvidenceCode() {
    return evidenceCode;
  }

  /**
   * Clear the evidenceCode data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearEvidenceCode() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property evidenceWith
   *
   * <p>
   * information associated with the evidence, such as an affected protein or gene
   * </p>
   *
   * Added by AddNaturalKeyProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String evidenceWith;
  

  public java.lang.String getEvidenceWith() {
    return evidenceWith;
  }

  /**
   * Clear the evidenceWith data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearEvidenceWith() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property reference
   *
   * <p>
   * the reference (publication, communication, etc.) from which the annotation
   * comes; this is a textual version of the reference used for display
   * </p>
   *
   * Added by AddNaturalKeyProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String reference;
  

  public java.lang.String getReference() {
    return reference;
  }

  /**
   * Clear the reference data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearReference() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property keywordId
   *
   * <p>
   * the unique identifier for the keyword; used in the URL that links to the keyword
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long keywordId;
  

  public java.lang.Long getKeywordId() {
    return keywordId;
  }

  /**
   * Clear the keywordId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearKeywordId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property ontologyId
   *
   * <p>
   * the unique identifier from the ontology for the keyword, such as GO:123456
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String ontologyId;
  

  public java.lang.String getOntologyId() {
    return ontologyId;
  }

  /**
   * Clear the ontologyId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearOntologyId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property evidenceDescription
   *
   * <p>
   * a textual description of the specific evidentiary technique used to provide
   * evidence for the annotation to the object
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String evidenceDescription;
  

  public java.lang.String getEvidenceDescription() {
    return evidenceDescription;
  }

  /**
   * Clear the evidenceDescription data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearEvidenceDescription() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property evidenceId
   *
   * <p>
   * unique identifier for the evidence code/description combination ("evidence");
   * used in the URL that displays the full page for the evidence
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long evidenceId;
  

  public java.lang.Long getEvidenceId() {
    return evidenceId;
  }

  /**
   * Clear the evidenceId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearEvidenceId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property referenceId
   *
   * <p>
   * the unique reference identifier; used in a URL to link to the reference
   * information
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long referenceId;
  

  public java.lang.Long getReferenceId() {
    return referenceId;
  }

  /**
   * Clear the referenceId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearReferenceId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property annotatedBy
   *
   * <p>
   * the community member responsible for the annotation
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String annotatedBy;
  

  public java.lang.String getAnnotatedBy() {
    return annotatedBy;
  }

  /**
   * Clear the annotatedBy data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearAnnotatedBy() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property model
   *
   * <p>
   * the set of annotated gene models for the annotation
   * </p>
   *
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: true
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.tair.db.locusdetail.ILocusGeneModel> model;
  // Ordered list of keys of the objects in the $property.uniquename list
  java.util.List<com.poesys.db.pk.IPrimaryKey> modelKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  

  public java.util.Collection<org.tair.db.locusdetail.ILocusGeneModel> getModel() throws java.sql.SQLException {
    return model;
  }

  /**
   * Clear the model data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearModel() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  public void setModel(java.util.Collection<org.tair.db.locusdetail.ILocusGeneModel> model) {
    this.model = model;
    // Add the primary keys of the new collection to the serialized key list.
    modelKeys.clear();
    if (model != null) {
      for (com.poesys.db.dto.IDbDto object : model) {
        modelKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }

  /**
   * Nested property locus
   *
   * <p>
   * the set of loci associated with the annotation
   * </p>
   *
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: true
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.tair.db.locusdetail.ILocusDetail> locus;
  // Ordered list of keys of the objects in the $property.uniquename list
  java.util.List<com.poesys.db.pk.IPrimaryKey> locusKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  

  public java.util.Collection<org.tair.db.locusdetail.ILocusDetail> getLocus() throws java.sql.SQLException {
    return locus;
  }

  /**
   * Clear the locus data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearLocus() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  public void setLocus(java.util.Collection<org.tair.db.locusdetail.ILocusDetail> locus) {
    this.locus = locus;
    // Add the primary keys of the new collection to the serialized key list.
    locusKeys.clear();
    if (locus != null) {
      for (com.poesys.db.dto.IDbDto object : locus) {
        locusKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }

  /**
   * Nested property locusGeneModelAnnotation
   *
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   *
   * Added by AddAssociationClassCollectionProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.tair.db.locusdetail.ILocusGeneModelAnnotation> locusGeneModelAnnotation;
  // Ordered list of keys of the objects in the $property.uniquename list
  java.util.List<com.poesys.db.pk.IPrimaryKey> locusGeneModelAnnotationKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  

  public java.util.Collection<org.tair.db.locusdetail.ILocusGeneModelAnnotation> getLocusGeneModelAnnotation() {
    return locusGeneModelAnnotation;
  }

  /**
   * Clear the locusGeneModelAnnotation data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearLocusGeneModelAnnotation() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property locusAnnotation
   *
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   *
   * Added by AddAssociationClassCollectionProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.tair.db.locusdetail.ILocusAnnotation> locusAnnotation;
  // Ordered list of keys of the objects in the $property.uniquename list
  java.util.List<com.poesys.db.pk.IPrimaryKey> locusAnnotationKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  

  public java.util.Collection<org.tair.db.locusdetail.ILocusAnnotation> getLocusAnnotation() {
    return locusAnnotation;
  }

  /**
   * Clear the locusAnnotation data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearLocusAnnotation() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {

    // Clean up locusGeneModelAnnotation.
    if (subject != null && subject instanceof org.tair.db.locusdetail.ILocusGeneModelAnnotation && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        locusGeneModelAnnotation != null) {
      // Delete to-many locusGeneModelAnnotation child from collection
      locusGeneModelAnnotation.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Clean up locusAnnotation.
    if (subject != null && subject instanceof org.tair.db.locusdetail.ILocusAnnotation && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        locusAnnotation != null) {
      // Delete to-many locusAnnotation child from collection
      locusAnnotation.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Cascade delete to locusGeneModelAnnotation.
    if (event == com.poesys.db.dao.DataEvent.MARKED_DELETED &&
        locusGeneModelAnnotation != null) {
      // Mark locusGeneModelAnnotation association object cascade-deleted.
      outer: for (org.tair.db.locusdetail.ILocusGeneModelAnnotation value : locusGeneModelAnnotation) {
        com.poesys.db.pk.AssociationPrimaryKey keys = 
          (com.poesys.db.pk.AssociationPrimaryKey) value.getPrimaryKey();
        for (com.poesys.db.pk.IPrimaryKey key : keys.getKeyListCopy()) {
          if (key.equals(subject.getPrimaryKey())) {
            value.cascadeDelete();
            break outer;
          }
        }
      }
    }

    // Cascade delete to locusAnnotation.
    if (event == com.poesys.db.dao.DataEvent.MARKED_DELETED &&
        locusAnnotation != null) {
      // Mark locusAnnotation association object cascade-deleted.
      outer: for (org.tair.db.locusdetail.ILocusAnnotation value : locusAnnotation) {
        com.poesys.db.pk.AssociationPrimaryKey keys = 
          (com.poesys.db.pk.AssociationPrimaryKey) value.getPrimaryKey();
        for (com.poesys.db.pk.IPrimaryKey key : keys.getKeyListCopy()) {
          if (key.equals(subject.getPrimaryKey())) {
            value.cascadeDelete();
            break outer;
          }
        }
      }
    }
  }
}