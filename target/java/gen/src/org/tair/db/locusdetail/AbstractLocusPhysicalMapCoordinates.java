/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package org.tair.db.locusdetail;


import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;
import com.poesys.db.dto.DtoStatusException;


/**
 * <p>
 * A data-access layer data-transfer object for the LocusPhysicalMapCoordinates. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * The map coordinates for the parent locus on a chromosome
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>CompositeKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: false
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractLocusPhysicalMapCoordinates extends AbstractDto implements ILocusPhysicalMapCoordinates {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  // Setter strategy nested classes for single-object associations
  
  /**
   * Nested class that manages the locus association data
   *
   * Source: AddToOneAssociationRequiredObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryLocusSetter extends com.poesys.db.dto.AbstractObjectSetter<org.tair.db.locusdetail.ILocusDetail> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryLocusSetter object.
     */
    public QueryLocusSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.LocusDetail.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return locusKey;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.ILocusDetail> getSql() {
      return new org.tair.db.locusdetail.sql.QueryLocusDetail();
    }

    @Override
    protected void set(org.tair.db.locusdetail.ILocusDetail dto) {
      // No status change, this is just filling in the object data.
      locus = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated locus is not null
      return locus != null;
    }
  }


  /**
   * Foreign key object used by QueryLocusSetter nested class to query object
   */
  private IPrimaryKey locusKey;
  
  /**
   * Set the foreign key locusKey. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param locusKey the foreign key
   */
  void setLocusKey(IPrimaryKey locusKey) {
    this.locusKey = locusKey;
  }


  /**
   * Create an empty LocusPhysicalMapCoordinates for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractLocusPhysicalMapCoordinates() {
    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();

    // Add the setters for the locus property.
    querySetters.add(new QueryLocusSetter());
  }

  /**
   * Create a LocusPhysicalMapCoordinates. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the LocusPhysicalMapCoordinates
   * @param locusTairObjectId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param mapId the unique identifier for the map, also uniquely identifies the map coordinates
object within the parent TAIR object; used in the URL that displays the map
   * @param mapName the name of the map
   * @param mapType the kind of map: "nucleotide sequence" (nuc_sequence) and "annotation unit"
(assembly_unit)
   * @param chromosome the name of the map chromosome on which the locus appears
   * @param startPosition starting position on the map
   * @param endPosition ending position on the map
   * @param units the unit of length (bp, kb)
   * @param orientation the orientation of the locus on the map, reverse or forward; may be unknown
   */
  public AbstractLocusPhysicalMapCoordinates(IPrimaryKey key, java.lang.Long locusTairObjectId, java.lang.Long mapId, java.lang.String mapName, java.lang.String mapType, java.lang.String chromosome, java.lang.Double startPosition, java.lang.Double endPosition, java.lang.String units, java.lang.String orientation) {
    this.key = key;

    this.locusTairObjectId = locusTairObjectId;

    if (locusTairObjectId == null) {
      throw new com.poesys.db.InvalidParametersException("locusTairObjectId is required for " + key.getValueList());
    }
    
    this.mapId = mapId;

    if (mapId == null) {
      throw new com.poesys.db.InvalidParametersException("mapId is required for " + key.getValueList());
    }
    
    this.mapName = mapName;

    if (mapName == null) {
      throw new com.poesys.db.InvalidParametersException("mapName is required for " + key.getValueList());
    }
    
    this.mapType = mapType;

    if (mapType == null) {
      throw new com.poesys.db.InvalidParametersException("mapType is required for " + key.getValueList());
    }
    
    this.chromosome = chromosome;

    this.startPosition = startPosition;

    if (startPosition == null) {
      throw new com.poesys.db.InvalidParametersException("startPosition is required for " + key.getValueList());
    }
    
    this.endPosition = endPosition;

    if (endPosition == null) {
      throw new com.poesys.db.InvalidParametersException("endPosition is required for " + key.getValueList());
    }
    
    this.units = units;

    this.orientation = orientation;

    if (orientation == null) {
      throw new com.poesys.db.InvalidParametersException("orientation is required for " + key.getValueList());
    }
    
    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    
    // Add the setters for the locus property.
    querySetters.add(new QueryLocusSetter());
    
    // Set the internal key data member for the locus object retrieval.
    locusKey = org.tair.db.locusdetail.LocusdetailFactory.getLocusDetailPrimaryKey(locusTairObjectId/* Source: AddNaturalKeyProperties + addAssociationForeignKeys: locusTairObjectId Key: true */);
    // Add a setter to instantiate the required locus object before insert.
    insertQuerySetters.add(new QueryLocusSetter());
  }

  @Override
  public boolean equals(Object arg0) {
    AbstractLocusPhysicalMapCoordinates other = (AbstractLocusPhysicalMapCoordinates)arg0;
    return other.key.equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    AbstractLocusPhysicalMapCoordinates other = (AbstractLocusPhysicalMapCoordinates)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.key.compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "org.tair.db.locusdetail";
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  @Override
  public java.sql.Connection getConnection() throws java.sql.SQLException {
    java.sql.Connection connection = null;
    
	/* 
	 * The resource bundle for the DTO's subsystem contains the suffix that
	 * distinguishes multiple versions of the subsystem in the database.properties
	 * file, such as "prod" or "test". Most database.properties files have only
	 * one implementation and use external facilities to switch between the
	 * databases (JNDI, for example, or producing different database.properties
	 * files in different setups). Use the subsystem resource bundle to get the
	 * suffix, then use the full subsystem name to get a connection factory for
	 * the DTO's subsystem, then use that factory to get a JDBC connection.
	 */
	java.util.ResourceBundle rb = 
	  java.util.ResourceBundle.getBundle("org.tair.db.locusdetail");
    String subsystem =
      "org.tair.db.locusdetail"
          + (rb.getString("suffix") == null
             || rb.getString("suffix").length() == 0 ? ""
              : "." + rb.getString("suffix"));
	  
	try {
	  connection = 
	    com.poesys.db.connection.ConnectionFactoryFactory.getInstance(subsystem).getConnection();
	} catch (com.poesys.db.InvalidParametersException e) {
	  throw new java.sql.SQLException(e.getMessage());
	} catch (java.io.IOException e) {
	  throw new java.sql.SQLException(e.getMessage());
	}
	
	return connection;
  }

  /**
   * Nested property locusTairObjectId
   *
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   *
   * Added by AddNaturalKeyProperties + AddParentKeyAttributes
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long locusTairObjectId;
  

  public java.lang.Long getLocusTairObjectId() {
    return locusTairObjectId;
  }

  /**
   * Clear the locusTairObjectId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearLocusTairObjectId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property mapId
   *
   * <p>
   * the unique identifier for the map, also uniquely identifies the map coordinates
   * object within the parent TAIR object; used in the URL that displays the map
   * </p>
   *
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long mapId;
  

  public java.lang.Long getMapId() {
    return mapId;
  }

  /**
   * Clear the mapId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearMapId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property mapName
   *
   * <p>
   * the name of the map
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String mapName;
  

  public java.lang.String getMapName() {
    return mapName;
  }

  /**
   * Clear the mapName data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearMapName() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property mapType
   *
   * <p>
   * the kind of map: "nucleotide sequence" (nuc_sequence) and "annotation unit"
   * (assembly_unit)
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String mapType;
  

  public java.lang.String getMapType() {
    return mapType;
  }

  /**
   * Clear the mapType data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearMapType() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property chromosome
   *
   * <p>
   * the name of the map chromosome on which the locus appears
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String chromosome;
  

  public java.lang.String getChromosome() {
    return chromosome;
  }

  /**
   * Clear the chromosome data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearChromosome() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property startPosition
   *
   * <p>
   * starting position on the map
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Double startPosition;
  

  public java.lang.Double getStartPosition() {
    return startPosition;
  }

  /**
   * Clear the startPosition data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearStartPosition() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property endPosition
   *
   * <p>
   * ending position on the map
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Double endPosition;
  

  public java.lang.Double getEndPosition() {
    return endPosition;
  }

  /**
   * Clear the endPosition data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearEndPosition() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property units
   *
   * <p>
   * the unit of length (bp, kb)
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String units;
  

  public java.lang.String getUnits() {
    return units;
  }

  /**
   * Clear the units data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearUnits() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property orientation
   *
   * <p>
   * the orientation of the locus on the map, reverse or forward; may be unknown
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String orientation;
  

  public java.lang.String getOrientation() {
    return orientation;
  }

  /**
   * Clear the orientation data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearOrientation() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property locus
   *
   * <p>
   * the locus that owns the map locations
   * </p>
   *
   * Added by AddToOneAssociationRequiredObjectProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private org.tair.db.locusdetail.ILocusDetail locus;
  

  public org.tair.db.locusdetail.ILocusDetail getLocus() {
    return locus;
  }

  /**
   * Clear the locus data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearLocus() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {
  }
}