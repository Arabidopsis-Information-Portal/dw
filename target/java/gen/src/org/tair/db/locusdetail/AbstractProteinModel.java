/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package org.tair.db.locusdetail;


import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;
import com.poesys.db.dto.DtoStatusException;


/**
 * <p>
 * A data-access layer data-transfer object for the ProteinModel. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * a protein model for a parent protein-coding gene model
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>CompositeKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: false
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractProteinModel extends AbstractDto implements IProteinModel {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  // Setter strategy nested classes for single-object associations
  
  /**
   * Nested class that manages the geneModel association data
   *
   * Source: AddToOneAssociationRequiredObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryGeneModelSetter extends com.poesys.db.dto.AbstractObjectSetter<org.tair.db.locusdetail.ILocusGeneModel> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryGeneModelSetter object.
     */
    public QueryGeneModelSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.LocusGeneModel.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return geneModelKey;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.ILocusGeneModel> getSql() {
      return new org.tair.db.locusdetail.sql.QueryLocusGeneModel();
    }

    @Override
    protected void set(org.tair.db.locusdetail.ILocusGeneModel dto) {
      // No status change, this is just filling in the object data.
      geneModel = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated geneModel is not null
      return geneModel != null;
    }
  }


  /**
   * Foreign key object used by QueryGeneModelSetter nested class to query object
   */
  private IPrimaryKey geneModelKey;
  
  /**
   * Set the foreign key geneModelKey. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param geneModelKey the foreign key
   */
  void setGeneModelKey(IPrimaryKey geneModelKey) {
    this.geneModelKey = geneModelKey;
  }

  // Setter strategy nested classes for multiple-object associations

   
  /**
   * Query setter for querying nested proteinModelDomain
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryProteinModelDomainByProteinModel
   */
  private class QueryProteinModelDomainSetter 
      extends com.poesys.db.dto.AbstractListSetter<org.tair.db.locusdetail.IProteinModelDomain, IProteinModel, java.util.Collection<org.tair.db.locusdetail.IProteinModelDomain>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryProteinModelDomainSetter object.
     */
    public QueryProteinModelDomainSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.ProteinModelDomain.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected IProteinModel getParametersDto() {
      return AbstractProteinModel.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.tair.db.locusdetail.IProteinModelDomain, IProteinModel> getSql() {
      return new org.tair.db.locusdetail.sql.QueryProteinModelDomainByProteinModel();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.locusdetail.IProteinModelDomain> list) {
      // No status change; this is just filling in the object data.
      proteinModelDomain = list;
      // Add the primary keys to the serialized key list if there are any.
      if (proteinModelDomain != null) {
        for (com.poesys.db.dto.IDbDto object : proteinModelDomain) {
          proteinModelDomainKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated proteinModelDomain list is not null
      return proteinModelDomain != null;
    }
  }

  /**
   * Insert setter for inserting nested proteinModelDomain.
   *
   * @see org.tair.db.locusdetail.sql.InsertProteinModelDomain
   */
  private class InsertProteinModelDomainSetter 
      extends com.poesys.db.dto.AbstractBatchInsertSetter<org.tair.db.locusdetail.IProteinModelDomain, java.util.Collection<org.tair.db.locusdetail.IProteinModelDomain>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;
    
    // proteinModelDomain source: AddAssociationClassCollectionProperties

    /**
     * Create an InsertProteinModelDomainSetter object.
     */
    public InsertProteinModelDomainSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected int getBatchSize() {
      return BATCH_SIZE;
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.ProteinModelDomain.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.locusdetail.IProteinModelDomain> getDtos() {
      return proteinModelDomain;
    }

    @Override
    protected com.poesys.db.dao.insert.IInsertSql<org.tair.db.locusdetail.IProteinModelDomain> getSql() {
      return new org.tair.db.locusdetail.sql.InsertProteinModelDomain();
    }
  }

  /**
   * Setter for processing added proteinModelDomain and updated proteinModelDomain.
   * Deleted proteinModelDomain are deleted in the database cascade delete.
   */
   
  private class UpdateProteinModelDomainSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<org.tair.db.locusdetail.IProteinModelDomain, java.util.Collection<org.tair.db.locusdetail.IProteinModelDomain>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdateProteinModelDomainSetter object.
     */
    public UpdateProteinModelDomainSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, java.util.Collection<org.tair.db.locusdetail.IProteinModelDomain> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
        // proteinModelDomain source: AddAssociationClassCollectionProperties
        // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.locusdetail.IProteinModelDomain> factory = 
        manager.getFactory(org.tair.db.locusdetail.ProteinModelDomain.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<org.tair.db.locusdetail.IProteinModelDomain> dao =
        factory.getUpdateBatch(new org.tair.db.locusdetail.sql.UpdateProteinModelDomain());
      dao.update(connection, dtos, BATCH_SIZE);
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, java.util.Collection<org.tair.db.locusdetail.IProteinModelDomain> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.locusdetail.IProteinModelDomain> factory = 
        manager.getFactory(org.tair.db.locusdetail.ProteinModelDomain.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<org.tair.db.locusdetail.IProteinModelDomain> dao = 
        factory.getDeleteBatch(new org.tair.db.locusdetail.sql.DeleteProteinModelDomain());
      dao.delete(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.sql.Connection connection, java.util.Collection<org.tair.db.locusdetail.IProteinModelDomain> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.locusdetail.IProteinModelDomain> factory = 
        manager.getFactory(org.tair.db.locusdetail.ProteinModelDomain.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<org.tair.db.locusdetail.IProteinModelDomain> dao =
        factory.getInsertBatch(new org.tair.db.locusdetail.sql.InsertProteinModelDomain());
      dao.insert(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected java.util.Collection<org.tair.db.locusdetail.IProteinModelDomain> getDtos() {
      return proteinModelDomain;
    }
    
    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.ProteinModelDomain.class.getName();
    }
  }

  /**
   * Query setter for querying nested resourceLinks
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryResourceLinksByProteinModel
   */
  private class QueryResourceLinksSetter 
      extends com.poesys.db.dto.AbstractListSetter<org.tair.db.locusdetail.IProteinResourceLink, IProteinModel, java.util.Collection<org.tair.db.locusdetail.IProteinResourceLink>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryResourceLinksSetter object.
     */
    public QueryResourceLinksSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.ProteinResourceLink.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected IProteinModel getParametersDto() {
      return AbstractProteinModel.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.tair.db.locusdetail.IProteinResourceLink, IProteinModel> getSql() {
      return new org.tair.db.locusdetail.sql.QueryResourceLinksByProteinModel();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.locusdetail.IProteinResourceLink> list) {
      // No status change; this is just filling in the object data.
      resourceLinks = list;
      // Add the primary keys to the serialized key list if there are any.
      if (resourceLinks != null) {
        for (com.poesys.db.dto.IDbDto object : resourceLinks) {
          resourceLinksKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated resourceLinks list is not null
      return resourceLinks != null;
    }
  }
   
  /**
   * Create an empty ProteinModel for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractProteinModel() {
    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();

    // Add the setters for the geneModel property.
    querySetters.add(new QueryGeneModelSetter());
    
    // Add the many-to-many collection setters for the domain property.
    
    // Add the many-to-many collection setters for the proteinModelDomain property.
    querySetters.add(new QueryProteinModelDomainSetter());
    insertSetters.add(new InsertProteinModelDomainSetter());
    postSetters.add(new UpdateProteinModelDomainSetter());
    
    // Add the many-to-many collection setters for the resourceLinks property.
    querySetters.add(new QueryResourceLinksSetter());
  }

  /**
   * Create a ProteinModel. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the ProteinModel
   * @param geneModelName composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param locusTairObjectId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param sequenceTairObjectId the TAIR object id for the sequence; used in links
   * @param length the amino-acid (aa) length of the protein sequence
   * @param molecularWeight the computed molecular weight of the sequence (Da)
   * @param isoelectricPoint the calculated isoelectric point (Pi) of the protein sequence
   */
  public AbstractProteinModel(IPrimaryKey key, java.lang.String geneModelName, java.lang.Long locusTairObjectId, java.lang.Long sequenceTairObjectId, java.lang.Integer length, java.lang.Double molecularWeight, java.lang.Double isoelectricPoint) {
    this.key = key;

    this.geneModelName = geneModelName;

    if (geneModelName == null) {
      throw new com.poesys.db.InvalidParametersException("geneModelName is required for " + key.getValueList());
    }
    
    this.locusTairObjectId = locusTairObjectId;

    if (locusTairObjectId == null) {
      throw new com.poesys.db.InvalidParametersException("locusTairObjectId is required for " + key.getValueList());
    }
    
    this.sequenceTairObjectId = sequenceTairObjectId;

    if (sequenceTairObjectId == null) {
      throw new com.poesys.db.InvalidParametersException("sequenceTairObjectId is required for " + key.getValueList());
    }
    
    this.length = length;

    if (length == null) {
      throw new com.poesys.db.InvalidParametersException("length is required for " + key.getValueList());
    }
    
    this.molecularWeight = molecularWeight;

    this.isoelectricPoint = isoelectricPoint;

    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    
    // Add the setters for the geneModel property.
    querySetters.add(new QueryGeneModelSetter());
    
    // Set the internal key data member for the geneModel object retrieval.
    geneModelKey = org.tair.db.locusdetail.LocusdetailFactory.getLocusGeneModelPrimaryKey(geneModelName/* Source: AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + addAssociationForeignKeys: geneModelName Key: true */, locusTairObjectId/* Source: AddNaturalKeyProperties + AddParentKeyAttributes + addAssociationForeignKeys: locusTairObjectId Key: true */);
    // Add a setter to instantiate the required geneModel object before insert.
    insertQuerySetters.add(new QueryGeneModelSetter());
    
    // Add the many-to-many collection setters for the domain property.
    
    // Add the many-to-many collection setters for the proteinModelDomain property.
    querySetters.add(new QueryProteinModelDomainSetter());
    insertSetters.add(new InsertProteinModelDomainSetter());
    postSetters.add(new UpdateProteinModelDomainSetter());
    
    // Add the many-to-many collection setters for the resourceLinks property.
    querySetters.add(new QueryResourceLinksSetter());
  }

  @Override
  public boolean equals(Object arg0) {
    AbstractProteinModel other = (AbstractProteinModel)arg0;
    return other.key.equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    AbstractProteinModel other = (AbstractProteinModel)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.key.compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "org.tair.db.locusdetail";
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
    // Only process deletes if child exists.
    if (resourceLinks != null) {
      for (com.poesys.db.dto.IDbDto dto : resourceLinks) {
        dto.cascadeDelete();
      }
    }
    // Only process deletes if child exists.
    if (proteinModelDomain != null) {
      for (com.poesys.db.dto.IDbDto dto : proteinModelDomain) {
        dto.cascadeDelete();
      }
    }
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  @Override
  public java.sql.Connection getConnection() throws java.sql.SQLException {
    java.sql.Connection connection = null;
    
	/* 
	 * The resource bundle for the DTO's subsystem contains the suffix that
	 * distinguishes multiple versions of the subsystem in the database.properties
	 * file, such as "prod" or "test". Most database.properties files have only
	 * one implementation and use external facilities to switch between the
	 * databases (JNDI, for example, or producing different database.properties
	 * files in different setups). Use the subsystem resource bundle to get the
	 * suffix, then use the full subsystem name to get a connection factory for
	 * the DTO's subsystem, then use that factory to get a JDBC connection.
	 */
	java.util.ResourceBundle rb = 
	  java.util.ResourceBundle.getBundle("org.tair.db.locusdetail");
    String subsystem =
      "org.tair.db.locusdetail"
          + (rb.getString("suffix") == null
             || rb.getString("suffix").length() == 0 ? ""
              : "." + rb.getString("suffix"));
	  
	try {
	  connection = 
	    com.poesys.db.connection.ConnectionFactoryFactory.getInstance(subsystem).getConnection();
	} catch (com.poesys.db.InvalidParametersException e) {
	  throw new java.sql.SQLException(e.getMessage());
	} catch (java.io.IOException e) {
	  throw new java.sql.SQLException(e.getMessage());
	}
	
	return connection;
  }

  /**
   * Nested property geneModelName
   *
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   *
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddParentKeyAttributes
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String geneModelName;
  

  public java.lang.String getGeneModelName() {
    return geneModelName;
  }

  /**
   * Clear the geneModelName data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearGeneModelName() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property locusTairObjectId
   *
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   *
   * Added by AddNaturalKeyProperties + AddParentKeyAttributes + AddParentKeyAttributes
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long locusTairObjectId;
  

  public java.lang.Long getLocusTairObjectId() {
    return locusTairObjectId;
  }

  /**
   * Clear the locusTairObjectId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearLocusTairObjectId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property sequenceTairObjectId
   *
   * <p>
   * the TAIR object id for the sequence; used in links
   * </p>
   *
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long sequenceTairObjectId;
  

  public java.lang.Long getSequenceTairObjectId() {
    return sequenceTairObjectId;
  }

  /**
   * Clear the sequenceTairObjectId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearSequenceTairObjectId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property length
   *
   * <p>
   * the amino-acid (aa) length of the protein sequence
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Integer length;
  

  public java.lang.Integer getLength() {
    return length;
  }

  /**
   * Clear the length data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearLength() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property molecularWeight
   *
   * <p>
   * the computed molecular weight of the sequence (Da)
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Double molecularWeight;
  

  public java.lang.Double getMolecularWeight() {
    return molecularWeight;
  }

  /**
   * Clear the molecularWeight data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearMolecularWeight() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property isoelectricPoint
   *
   * <p>
   * the calculated isoelectric point (Pi) of the protein sequence
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Double isoelectricPoint;
  

  public java.lang.Double getIsoelectricPoint() {
    return isoelectricPoint;
  }

  /**
   * Clear the isoelectricPoint data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearIsoelectricPoint() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property geneModel
   *
   * <p>
   * the gene model that codes for the protein
   * </p>
   *
   * Added by AddToOneAssociationRequiredObjectProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private org.tair.db.locusdetail.ILocusGeneModel geneModel;
  

  public org.tair.db.locusdetail.ILocusGeneModel getGeneModel() {
    return geneModel;
  }

  /**
   * Clear the geneModel data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearGeneModel() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property domain
   *
   * <p>
   * the protein domains that appear on a specific locus protein model, ordered by
   * start position; the same domain can appear more than once at a different start
   * position
   * </p>
   *
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: true
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.List<org.tair.db.locusdetail.IDomain> domain;
  // Ordered list of keys of the objects in the $property.uniquename list
  java.util.List<com.poesys.db.pk.IPrimaryKey> domainKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  

  public java.util.List<org.tair.db.locusdetail.IDomain> getDomain() throws java.sql.SQLException {
    return domain;
  }

  /**
   * Clear the domain data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearDomain() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  public void setDomain(java.util.List<org.tair.db.locusdetail.IDomain> domain) {
    this.domain = domain;
    // Add the primary keys of the new collection to the serialized key list.
    domainKeys.clear();
    if (domain != null) {
      for (com.poesys.db.dto.IDbDto object : domain) {
        domainKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }

  /**
   * Nested property proteinModelDomain
   *
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   *
   * Added by AddAssociationClassCollectionProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.tair.db.locusdetail.IProteinModelDomain> proteinModelDomain;
  // Ordered list of keys of the objects in the $property.uniquename list
  java.util.List<com.poesys.db.pk.IPrimaryKey> proteinModelDomainKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  

  public java.util.Collection<org.tair.db.locusdetail.IProteinModelDomain> getProteinModelDomain() {
    return proteinModelDomain;
  }

  /**
   * Clear the proteinModelDomain data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearProteinModelDomain() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property resourceLinks
   *
   * <p>
   * the set of third-party resource links for a locus protein model
   * </p>
   *
   * Added by AddToManyChildCollectionProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.tair.db.locusdetail.IProteinResourceLink> resourceLinks;
  // Ordered list of keys of the objects in the $property.uniquename list
  java.util.List<com.poesys.db.pk.IPrimaryKey> resourceLinksKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  

  public java.util.Collection<org.tair.db.locusdetail.IProteinResourceLink> getResourceLinks() {
    return resourceLinks;
  }

  /**
   * Clear the resourceLinks data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearResourceLinks() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {

    // Clean up resourceLinks.
    if (subject != null && subject instanceof org.tair.db.locusdetail.IProteinResourceLink && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        resourceLinks != null) {
      // Delete to-many resourceLinks child from collection
      resourceLinks.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Clean up proteinModelDomain.
    if (subject != null && subject instanceof org.tair.db.locusdetail.IProteinModelDomain && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        proteinModelDomain != null) {
      // Delete to-many proteinModelDomain child from collection
      proteinModelDomain.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Cascade delete to proteinModelDomain.
    if (event == com.poesys.db.dao.DataEvent.MARKED_DELETED &&
        proteinModelDomain != null) {
      // Mark proteinModelDomain association object cascade-deleted.
      outer: for (org.tair.db.locusdetail.IProteinModelDomain value : proteinModelDomain) {
        com.poesys.db.pk.AssociationPrimaryKey keys = 
          (com.poesys.db.pk.AssociationPrimaryKey) value.getPrimaryKey();
        for (com.poesys.db.pk.IPrimaryKey key : keys.getKeyListCopy()) {
          if (key.equals(subject.getPrimaryKey())) {
            value.cascadeDelete();
            break outer;
          }
        }
      }
    }
  }
}