/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package org.tair.db.locusdetail;


import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;
import com.poesys.db.dto.DtoStatusException;


/**
 * <p>
 * A data-access layer data-transfer object for the LocusPolymorphism. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * A difference in a genomic sequence within a locus
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>CompositeKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: false
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractLocusPolymorphism extends AbstractDto implements ILocusPolymorphism {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  // Setter strategy nested classes for single-object associations
  
  /**
   * Nested class that manages the locusLocus association data
   *
   * Source: AddToOneAssociationRequiredObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryLocusLocusSetter extends com.poesys.db.dto.AbstractObjectSetter<org.tair.db.locusdetail.ILocusDetail> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryLocusLocusSetter object.
     */
    public QueryLocusLocusSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.LocusDetail.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return locusLocusKey;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.ILocusDetail> getSql() {
      return new org.tair.db.locusdetail.sql.QueryLocusDetail();
    }

    @Override
    protected void set(org.tair.db.locusdetail.ILocusDetail dto) {
      // No status change, this is just filling in the object data.
      locusLocus = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated locusLocus is not null
      return locusLocus != null;
    }
  }


  /**
   * Foreign key object used by QueryLocusLocusSetter nested class to query object
   */
  private IPrimaryKey locusLocusKey;
  
  /**
   * Set the foreign key locusLocusKey. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param locusLocusKey the foreign key
   */
  void setLocusLocusKey(IPrimaryKey locusLocusKey) {
    this.locusLocusKey = locusLocusKey;
  }

  // Setter strategy nested classes for multiple-object associations

   
  /**
   * Query setter for querying nested polymorphismSite
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryPolymorphismSiteByLocusPolymorphism
   */
  private class QueryPolymorphismSiteSetter 
      extends com.poesys.db.dto.AbstractListSetter<org.tair.db.locusdetail.IPolymorphismSite, ILocusPolymorphism, java.util.Collection<org.tair.db.locusdetail.IPolymorphismSite>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryPolymorphismSiteSetter object.
     */
    public QueryPolymorphismSiteSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.PolymorphismSite.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ILocusPolymorphism getParametersDto() {
      return AbstractLocusPolymorphism.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.tair.db.locusdetail.IPolymorphismSite, ILocusPolymorphism> getSql() {
      return new org.tair.db.locusdetail.sql.QueryPolymorphismSiteByLocusPolymorphism();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.locusdetail.IPolymorphismSite> list) {
      // No status change; this is just filling in the object data.
      polymorphismSite = list;
      // Add the primary keys to the serialized key list if there are any.
      if (polymorphismSite != null) {
        for (com.poesys.db.dto.IDbDto object : polymorphismSite) {
          polymorphismSiteKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated polymorphismSite list is not null
      return polymorphismSite != null;
    }
  }

  /**
   * Insert setter for inserting nested polymorphismSite.
   *
   * @see org.tair.db.locusdetail.sql.InsertPolymorphismSite
   */
  private class InsertPolymorphismSiteSetter 
      extends com.poesys.db.dto.AbstractBatchInsertSetter<org.tair.db.locusdetail.IPolymorphismSite, java.util.Collection<org.tair.db.locusdetail.IPolymorphismSite>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;
    
    // polymorphismSite source: AddAssociationClassCollectionProperties

    /**
     * Create an InsertPolymorphismSiteSetter object.
     */
    public InsertPolymorphismSiteSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected int getBatchSize() {
      return BATCH_SIZE;
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.PolymorphismSite.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.locusdetail.IPolymorphismSite> getDtos() {
      return polymorphismSite;
    }

    @Override
    protected com.poesys.db.dao.insert.IInsertSql<org.tair.db.locusdetail.IPolymorphismSite> getSql() {
      return new org.tair.db.locusdetail.sql.InsertPolymorphismSite();
    }
  }

  /**
   * Setter for processing added polymorphismSite and updated polymorphismSite.
   * Deleted polymorphismSite are deleted in the database cascade delete.
   */
   
  private class UpdatePolymorphismSiteSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<org.tair.db.locusdetail.IPolymorphismSite, java.util.Collection<org.tair.db.locusdetail.IPolymorphismSite>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdatePolymorphismSiteSetter object.
     */
    public UpdatePolymorphismSiteSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, java.util.Collection<org.tair.db.locusdetail.IPolymorphismSite> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
        // polymorphismSite source: AddAssociationClassCollectionProperties
        // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.locusdetail.IPolymorphismSite> factory = 
        manager.getFactory(org.tair.db.locusdetail.PolymorphismSite.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<org.tair.db.locusdetail.IPolymorphismSite> dao =
        factory.getUpdateBatch(new org.tair.db.locusdetail.sql.UpdatePolymorphismSite());
      dao.update(connection, dtos, BATCH_SIZE);
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, java.util.Collection<org.tair.db.locusdetail.IPolymorphismSite> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.locusdetail.IPolymorphismSite> factory = 
        manager.getFactory(org.tair.db.locusdetail.PolymorphismSite.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<org.tair.db.locusdetail.IPolymorphismSite> dao = 
        factory.getDeleteBatch(new org.tair.db.locusdetail.sql.DeletePolymorphismSite());
      dao.delete(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.sql.Connection connection, java.util.Collection<org.tair.db.locusdetail.IPolymorphismSite> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.locusdetail.IPolymorphismSite> factory = 
        manager.getFactory(org.tair.db.locusdetail.PolymorphismSite.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<org.tair.db.locusdetail.IPolymorphismSite> dao =
        factory.getInsertBatch(new org.tair.db.locusdetail.sql.InsertPolymorphismSite());
      dao.insert(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected java.util.Collection<org.tair.db.locusdetail.IPolymorphismSite> getDtos() {
      return polymorphismSite;
    }
    
    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.PolymorphismSite.class.getName();
    }
  }

  /**
   * Create an empty LocusPolymorphism for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractLocusPolymorphism() {
    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();

    // Add the setters for the locusLocus property.
    querySetters.add(new QueryLocusLocusSetter());
    
    // Add the many-to-many collection setters for the lociLocus property.
    
    // Add the many-to-many collection setters for the polymorphismSite property.
    querySetters.add(new QueryPolymorphismSiteSetter());
    insertSetters.add(new InsertPolymorphismSiteSetter());
    postSetters.add(new UpdatePolymorphismSiteSetter());
  }

  /**
   * Create a LocusPolymorphism. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the LocusPolymorphism
   * @param locusTairObjectId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param polymorphismName the name of the polymorphism
   * @param polymorphismTairObjectId the TAIR object id for the polymorphism, used in URL links to the polymorphism
   * @param polymorphismType the kind of difference (insertion, substitution, deletion)
   * @param length the length of the polymorphic region in base pairs (bp)
   * @param start the starting position on the AGI map of the polymorphism
   * @param end the end position of the polymorphic region in the AGI map
   */
  public AbstractLocusPolymorphism(IPrimaryKey key, java.lang.Long locusTairObjectId, java.lang.String polymorphismName, java.lang.Long polymorphismTairObjectId, java.lang.String polymorphismType, java.lang.Long length, java.lang.Long start, java.lang.Long end) {
    this.key = key;

    this.locusTairObjectId = locusTairObjectId;

    if (locusTairObjectId == null) {
      throw new com.poesys.db.InvalidParametersException("locusTairObjectId is required for " + key.getValueList());
    }
    
    this.polymorphismName = polymorphismName;

    if (polymorphismName == null) {
      throw new com.poesys.db.InvalidParametersException("polymorphismName is required for " + key.getValueList());
    }
    
    this.polymorphismTairObjectId = polymorphismTairObjectId;

    if (polymorphismTairObjectId == null) {
      throw new com.poesys.db.InvalidParametersException("polymorphismTairObjectId is required for " + key.getValueList());
    }
    
    this.polymorphismType = polymorphismType;

    if (polymorphismType == null) {
      throw new com.poesys.db.InvalidParametersException("polymorphismType is required for " + key.getValueList());
    }
    
    this.length = length;

    if (length == null) {
      throw new com.poesys.db.InvalidParametersException("length is required for " + key.getValueList());
    }
    
    this.start = start;

    if (start == null) {
      throw new com.poesys.db.InvalidParametersException("start is required for " + key.getValueList());
    }
    
    this.end = end;

    if (end == null) {
      throw new com.poesys.db.InvalidParametersException("end is required for " + key.getValueList());
    }
    
    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    
    // Add the setters for the locusLocus property.
    querySetters.add(new QueryLocusLocusSetter());
    
    // Set the internal key data member for the locusLocus object retrieval.
    locusLocusKey = org.tair.db.locusdetail.LocusdetailFactory.getLocusDetailPrimaryKey(locusTairObjectId/* Source: AddNaturalKeyProperties + addAssociationForeignKeys: locusTairObjectId Key: true */);
    // Add a setter to instantiate the required locusLocus object before insert.
    insertQuerySetters.add(new QueryLocusLocusSetter());
    
    // Add the many-to-many collection setters for the lociLocus property.
    
    // Add the many-to-many collection setters for the polymorphismSite property.
    querySetters.add(new QueryPolymorphismSiteSetter());
    insertSetters.add(new InsertPolymorphismSiteSetter());
    postSetters.add(new UpdatePolymorphismSiteSetter());
  }

  @Override
  public boolean equals(Object arg0) {
    AbstractLocusPolymorphism other = (AbstractLocusPolymorphism)arg0;
    return other.key.equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    AbstractLocusPolymorphism other = (AbstractLocusPolymorphism)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.key.compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "org.tair.db.locusdetail";
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
    // Only process deletes if child exists.
    if (polymorphismSite != null) {
      for (com.poesys.db.dto.IDbDto dto : polymorphismSite) {
        dto.cascadeDelete();
      }
    }
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  @Override
  public java.sql.Connection getConnection() throws java.sql.SQLException {
    java.sql.Connection connection = null;
    
	/* 
	 * The resource bundle for the DTO's subsystem contains the suffix that
	 * distinguishes multiple versions of the subsystem in the database.properties
	 * file, such as "prod" or "test". Most database.properties files have only
	 * one implementation and use external facilities to switch between the
	 * databases (JNDI, for example, or producing different database.properties
	 * files in different setups). Use the subsystem resource bundle to get the
	 * suffix, then use the full subsystem name to get a connection factory for
	 * the DTO's subsystem, then use that factory to get a JDBC connection.
	 */
	java.util.ResourceBundle rb = 
	  java.util.ResourceBundle.getBundle("org.tair.db.locusdetail");
    String subsystem =
      "org.tair.db.locusdetail"
          + (rb.getString("suffix") == null
             || rb.getString("suffix").length() == 0 ? ""
              : "." + rb.getString("suffix"));
	  
	try {
	  connection = 
	    com.poesys.db.connection.ConnectionFactoryFactory.getInstance(subsystem).getConnection();
	} catch (com.poesys.db.InvalidParametersException e) {
	  throw new java.sql.SQLException(e.getMessage());
	} catch (java.io.IOException e) {
	  throw new java.sql.SQLException(e.getMessage());
	}
	
	return connection;
  }

  /**
   * Nested property locusTairObjectId
   *
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   *
   * Added by AddNaturalKeyProperties + AddParentKeyAttributes
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long locusTairObjectId;
  

  public java.lang.Long getLocusTairObjectId() {
    return locusTairObjectId;
  }

  /**
   * Clear the locusTairObjectId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearLocusTairObjectId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property polymorphismName
   *
   * <p>
   * the name of the polymorphism
   * </p>
   *
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String polymorphismName;
  

  public java.lang.String getPolymorphismName() {
    return polymorphismName;
  }

  /**
   * Clear the polymorphismName data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearPolymorphismName() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property polymorphismTairObjectId
   *
   * <p>
   * the TAIR object id for the polymorphism, used in URL links to the polymorphism
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long polymorphismTairObjectId;
  

  public java.lang.Long getPolymorphismTairObjectId() {
    return polymorphismTairObjectId;
  }

  /**
   * Clear the polymorphismTairObjectId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearPolymorphismTairObjectId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property polymorphismType
   *
   * <p>
   * the kind of difference (insertion, substitution, deletion)
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String polymorphismType;
  

  public java.lang.String getPolymorphismType() {
    return polymorphismType;
  }

  /**
   * Clear the polymorphismType data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearPolymorphismType() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property length
   *
   * <p>
   * the length of the polymorphic region in base pairs (bp)
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long length;
  

  public java.lang.Long getLength() {
    return length;
  }

  /**
   * Clear the length data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearLength() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property start
   *
   * <p>
   * the starting position on the AGI map of the polymorphism
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long start;
  

  public java.lang.Long getStart() {
    return start;
  }

  /**
   * Clear the start data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearStart() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property end
   *
   * <p>
   * the end position of the polymorphic region in the AGI map
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long end;
  

  public java.lang.Long getEnd() {
    return end;
  }

  /**
   * Clear the end data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearEnd() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property locusLocus
   *
   * <p>
   * the locus within which the polymorphism appears
   * </p>
   *
   * Added by AddToOneAssociationRequiredObjectProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private org.tair.db.locusdetail.ILocusDetail locusLocus;
  

  public org.tair.db.locusdetail.ILocusDetail getLocusLocus() {
    return locusLocus;
  }

  /**
   * Clear the locusLocus data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearLocusLocus() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property lociLocus
   *
   * <p>
   * the set of loci that have sites to which a polymorphism maps
   * </p>
   *
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: true
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.tair.db.locusdetail.ILocusGeneModel> lociLocus;
  // Ordered list of keys of the objects in the $property.uniquename list
  java.util.List<com.poesys.db.pk.IPrimaryKey> lociLocusKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  

  public java.util.Collection<org.tair.db.locusdetail.ILocusGeneModel> getLociLocus() throws java.sql.SQLException {
    return lociLocus;
  }

  /**
   * Clear the lociLocus data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearLociLocus() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  public void setLociLocus(java.util.Collection<org.tair.db.locusdetail.ILocusGeneModel> lociLocus) {
    this.lociLocus = lociLocus;
    // Add the primary keys of the new collection to the serialized key list.
    lociLocusKeys.clear();
    if (lociLocus != null) {
      for (com.poesys.db.dto.IDbDto object : lociLocus) {
        lociLocusKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }

  /**
   * Nested property polymorphismSite
   *
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   *
   * Added by AddAssociationClassCollectionProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.tair.db.locusdetail.IPolymorphismSite> polymorphismSite;
  // Ordered list of keys of the objects in the $property.uniquename list
  java.util.List<com.poesys.db.pk.IPrimaryKey> polymorphismSiteKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  

  public java.util.Collection<org.tair.db.locusdetail.IPolymorphismSite> getPolymorphismSite() {
    return polymorphismSite;
  }

  /**
   * Clear the polymorphismSite data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearPolymorphismSite() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {

    // Clean up polymorphismSite.
    if (subject != null && subject instanceof org.tair.db.locusdetail.IPolymorphismSite && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        polymorphismSite != null) {
      // Delete to-many polymorphismSite child from collection
      polymorphismSite.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Cascade delete to polymorphismSite.
    if (event == com.poesys.db.dao.DataEvent.MARKED_DELETED &&
        polymorphismSite != null) {
      // Mark polymorphismSite association object cascade-deleted.
      outer: for (org.tair.db.locusdetail.IPolymorphismSite value : polymorphismSite) {
        com.poesys.db.pk.AssociationPrimaryKey keys = 
          (com.poesys.db.pk.AssociationPrimaryKey) value.getPrimaryKey();
        for (com.poesys.db.pk.IPrimaryKey key : keys.getKeyListCopy()) {
          if (key.equals(subject.getPrimaryKey())) {
            value.cascadeDelete();
            break outer;
          }
        }
      }
    }
  }
}