/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDtoProxy.vsl

package org.tair.db.locusdetail;


import com.poesys.db.dto.AbstractLazyLoadingDtoProxy;


/**
 * <p>
 * A data-access layer data-transfer object (DTO) lazy-loading proxy for the 
 * LocusGeneModel. This class is an abstract class that contains AndroMDA 
 * generated code; change nothing in this class. Instead, override any methods 
 * in the concrete subclass generated in the same package. AndroMDA will 
 * overwrite this class each time you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * The set of gene models of the parent locus excluding the representative gene
 * model
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractLocusGeneModelProxy extends AbstractLazyLoadingDtoProxy implements ILocusGeneModel {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;

  // Lazy-loading query setter strategy nested classes for single-object associations
  
    // Setter strategy nested classes for multiple-object associations

  /** Flag indicating whether the annotation property has been loaded */
  boolean annotationLoaded = false;

  /**
   * Query setter for lazily querying nested annotation collection
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryAnnotationByLocusGeneModel
   */
  private class QueryAnnotationSetter 
      extends com.poesys.db.dto.AbstractLazyListSetter<org.tair.db.locusdetail.IAnnotation, ILocusGeneModel, java.util.Collection<org.tair.db.locusdetail.IAnnotation>> {
    /** Serial version UID for Serializable object */
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryAnnotationSetter object.
     */
    public QueryAnnotationSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.Annotation.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ILocusGeneModel getParametersDto() {
      return AbstractLocusGeneModelProxy.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.tair.db.locusdetail.IAnnotation, ILocusGeneModel> getSql() {
      return new org.tair.db.locusdetail.sql.QueryAnnotationByLocusGeneModel();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.locusdetail.IAnnotation> collection) {
      try {
        // Register the observer parent with the subject children.
        for (org.tair.db.locusdetail.IAnnotation child : collection) {
          child.attach(AbstractLocusGeneModelProxy.this.dto,
                              com.poesys.db.dao.DataEvent.MARKED_DELETED);
          child.attach(AbstractLocusGeneModelProxy.this.dto, com.poesys.db.dao.DataEvent.DELETE);
        }
        setAnnotation(collection);
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Just lazy loading here, not actually setting. Ignore this exception.        
      }
    }

    @Override
    public boolean isSet() {
      // Set if proxy has loaded annotation
      return annotationLoaded;
    }
  }


  /**
   * Read-Object setter for de-serializing nested annotation collection
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryAnnotation
   */
  private class ReadAnnotationSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.tair.db.locusdetail.IAnnotation> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadAnnotationSetter object to read the annotation collection.
     */
    public ReadAnnotationSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.Annotation.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.locusdetail.IAnnotation> getObjectCollection() {
      java.util.Collection<org.tair.db.locusdetail.IAnnotation> annotation = null;
      try {
        annotation = ((org.tair.db.locusdetail.LocusGeneModel)dto).getAnnotation();
      } catch (java.sql.SQLException e) {
        throw new RuntimeException("SQL Exception on collection query: " + e.getMessage(), e);
      }
      return annotation;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.tair.db.locusdetail.LocusGeneModel)dto).annotationKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.IAnnotation> getSql() {
      return new org.tair.db.locusdetail.sql.QueryAnnotation();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.locusdetail.IAnnotation> collection) {
      ((org.tair.db.locusdetail.LocusGeneModel)dto).annotation = collection;
    }
  }

  

  /** Flag indicating whether the polymorphism property has been loaded */
  boolean polymorphismLoaded = false;

  /**
   * Query setter for lazily querying nested polymorphism collection
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryPolymorphismByLocusGeneModel
   */
  private class QueryPolymorphismSetter 
      extends com.poesys.db.dto.AbstractLazyListSetter<org.tair.db.locusdetail.ILocusPolymorphism, ILocusGeneModel, java.util.Collection<org.tair.db.locusdetail.ILocusPolymorphism>> {
    /** Serial version UID for Serializable object */
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryPolymorphismSetter object.
     */
    public QueryPolymorphismSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.LocusPolymorphism.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ILocusGeneModel getParametersDto() {
      return AbstractLocusGeneModelProxy.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.tair.db.locusdetail.ILocusPolymorphism, ILocusGeneModel> getSql() {
      return new org.tair.db.locusdetail.sql.QueryPolymorphismByLocusGeneModel();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.locusdetail.ILocusPolymorphism> collection) {
      try {
        // Register the observer parent with the subject children.
        for (org.tair.db.locusdetail.ILocusPolymorphism child : collection) {
          child.attach(AbstractLocusGeneModelProxy.this.dto,
                              com.poesys.db.dao.DataEvent.MARKED_DELETED);
          child.attach(AbstractLocusGeneModelProxy.this.dto, com.poesys.db.dao.DataEvent.DELETE);
        }
        setPolymorphism(collection);
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Just lazy loading here, not actually setting. Ignore this exception.        
      }
    }

    @Override
    public boolean isSet() {
      // Set if proxy has loaded polymorphism
      return polymorphismLoaded;
    }
  }


  /**
   * Read-Object setter for de-serializing nested polymorphism collection
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryLocusPolymorphism
   */
  private class ReadPolymorphismSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.tair.db.locusdetail.ILocusPolymorphism> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadPolymorphismSetter object to read the polymorphism collection.
     */
    public ReadPolymorphismSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.LocusPolymorphism.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.locusdetail.ILocusPolymorphism> getObjectCollection() {
      java.util.Collection<org.tair.db.locusdetail.ILocusPolymorphism> polymorphism = null;
      try {
        polymorphism = ((org.tair.db.locusdetail.LocusGeneModel)dto).getPolymorphism();
      } catch (java.sql.SQLException e) {
        throw new RuntimeException("SQL Exception on collection query: " + e.getMessage(), e);
      }
      return polymorphism;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.tair.db.locusdetail.LocusGeneModel)dto).polymorphismKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.ILocusPolymorphism> getSql() {
      return new org.tair.db.locusdetail.sql.QueryLocusPolymorphism();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.locusdetail.ILocusPolymorphism> collection) {
      ((org.tair.db.locusdetail.LocusGeneModel)dto).polymorphism = collection;
    }
  }



  /**
   * Read-Object setter for de-serializing nested locusGeneModelAnnotation collection
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryLocusGeneModelAnnotation
   */
  private class ReadLocusGeneModelAnnotationSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.tair.db.locusdetail.ILocusGeneModelAnnotation> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadLocusGeneModelAnnotationSetter object to read the locusGeneModelAnnotation collection.
     */
    public ReadLocusGeneModelAnnotationSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.LocusGeneModelAnnotation.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.locusdetail.ILocusGeneModelAnnotation> getObjectCollection() {
      java.util.Collection<org.tair.db.locusdetail.ILocusGeneModelAnnotation> locusGeneModelAnnotation =  ((org.tair.db.locusdetail.LocusGeneModel)dto).getLocusGeneModelAnnotation();
      return locusGeneModelAnnotation;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.tair.db.locusdetail.LocusGeneModel)dto).locusGeneModelAnnotationKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.ILocusGeneModelAnnotation> getSql() {
      return new org.tair.db.locusdetail.sql.QueryLocusGeneModelAnnotation();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.locusdetail.ILocusGeneModelAnnotation> collection) {
      ((org.tair.db.locusdetail.LocusGeneModel)dto).locusGeneModelAnnotation = collection;
    }
  }



  /**
   * Read-Object setter for de-serializing nested polymorphismSite collection
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryPolymorphismSite
   */
  private class ReadPolymorphismSiteSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.tair.db.locusdetail.IPolymorphismSite> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadPolymorphismSiteSetter object to read the polymorphismSite collection.
     */
    public ReadPolymorphismSiteSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.PolymorphismSite.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.locusdetail.IPolymorphismSite> getObjectCollection() {
      java.util.Collection<org.tair.db.locusdetail.IPolymorphismSite> polymorphismSite =  ((org.tair.db.locusdetail.LocusGeneModel)dto).getPolymorphismSite();
      return polymorphismSite;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.tair.db.locusdetail.LocusGeneModel)dto).polymorphismSiteKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.IPolymorphismSite> getSql() {
      return new org.tair.db.locusdetail.sql.QueryPolymorphismSite();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.locusdetail.IPolymorphismSite> collection) {
      ((org.tair.db.locusdetail.LocusGeneModel)dto).polymorphismSite = collection;
    }
  }



  /**
   * Read-Object setter for de-serializing nested features list
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryModelFeature
   */
  private class ReadFeaturesSetter 
      extends com.poesys.db.dto.AbstractListReadSetter<org.tair.db.locusdetail.IModelFeature> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadFeaturesSetter object to read the features list.
     */
    public ReadFeaturesSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.ModelFeature.class.getName();
    }

    @Override
    protected java.util.List<org.tair.db.locusdetail.IModelFeature> getObjectList() {
      java.util.List<org.tair.db.locusdetail.IModelFeature> features =  ((org.tair.db.locusdetail.LocusGeneModel)dto).getFeatures();
      return features;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.tair.db.locusdetail.LocusGeneModel)dto).featuresKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.IModelFeature> getSql() {
      return new org.tair.db.locusdetail.sql.QueryModelFeature();
    }

    @Override
    protected void set(java.util.List<org.tair.db.locusdetail.IModelFeature> list) {
      ((org.tair.db.locusdetail.LocusGeneModel)dto).features = list;
    }
  }


  /**
   * Read-Object setter for de-serializing nested cdnas collection
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryLocusGeneModelCdna
   */
  private class ReadCdnasSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.tair.db.locusdetail.ILocusGeneModelCdna> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadCdnasSetter object to read the cdnas collection.
     */
    public ReadCdnasSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.LocusGeneModelCdna.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.locusdetail.ILocusGeneModelCdna> getObjectCollection() {
      java.util.Collection<org.tair.db.locusdetail.ILocusGeneModelCdna> cdnas =  ((org.tair.db.locusdetail.LocusGeneModel)dto).getCdnas();
      return cdnas;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.tair.db.locusdetail.LocusGeneModel)dto).cdnasKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.ILocusGeneModelCdna> getSql() {
      return new org.tair.db.locusdetail.sql.QueryLocusGeneModelCdna();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.locusdetail.ILocusGeneModelCdna> collection) {
      ((org.tair.db.locusdetail.LocusGeneModel)dto).cdnas = collection;
    }
  }



  /**
   * Read-Object setter for de-serializing nested proteinModel collection
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryProteinModel
   */
  private class ReadProteinModelSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.tair.db.locusdetail.IProteinModel> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadProteinModelSetter object to read the proteinModel collection.
     */
    public ReadProteinModelSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.ProteinModel.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.locusdetail.IProteinModel> getObjectCollection() {
      java.util.Collection<org.tair.db.locusdetail.IProteinModel> proteinModel =  ((org.tair.db.locusdetail.LocusGeneModel)dto).getProteinModel();
      return proteinModel;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.tair.db.locusdetail.LocusGeneModel)dto).proteinModelKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.IProteinModel> getSql() {
      return new org.tair.db.locusdetail.sql.QueryProteinModel();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.locusdetail.IProteinModel> collection) {
      ((org.tair.db.locusdetail.LocusGeneModel)dto).proteinModel = collection;
    }
  }

  /**
   * Create a LocusGeneModelProxy. The concrete subclass must call this constructor.
   *
   * @param dto the DTO to proxy
   */
  public AbstractLocusGeneModelProxy(LocusGeneModel dto) {
    super(dto);

    // Setter arrays
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters.add(new ReadAnnotationSetter());
    readObjectSetters.add(new ReadPolymorphismSetter());
    readObjectSetters.add(new ReadLocusGeneModelAnnotationSetter());
    readObjectSetters.add(new ReadPolymorphismSiteSetter());
    readObjectSetters.add(new ReadFeaturesSetter());
    readObjectSetters.add(new ReadCdnasSetter());
    readObjectSetters.add(new ReadProteinModelSetter());
  }

  @Override
  public boolean equals(Object obj) {
    AbstractLocusGeneModelProxy otherProxy = (AbstractLocusGeneModelProxy)obj;
    return ((LocusGeneModel)dto).equals(otherProxy.dto);
  }

  @Override
  public int hashCode() {
    return ((LocusGeneModel)dto).hashCode();
  }

  // Local properties (attributes, associations, and association classes)

  // Source: AddNaturalKeyProperties + AddParentKeyAttributes
  public java.lang.Long getLocusTairObjectId() {
    return ((LocusGeneModel)dto).getLocusTairObjectId();
  }

  // Source: AddExplicitSubKeyProperties + addNaturalSubkeyOnClass
  public java.lang.String getGeneModelName() {
    return ((LocusGeneModel)dto).getGeneModelName();
  }

  // Source: AddLocalAttributeProperties
  public java.lang.String getGeneModelType() {
    return ((LocusGeneModel)dto).getGeneModelType();
  }

  // Source: AddLocalAttributeProperties
  public java.lang.Boolean getRepresentative() {
    return ((LocusGeneModel)dto).getRepresentative();
  }

  // Source: AddLocalAttributeProperties
  public java.lang.Boolean getSpliceVariant() {
    return ((LocusGeneModel)dto).getSpliceVariant();
  }

  // Source: AddLocalAttributeProperties
  public java.lang.String getComputationalDescription() {
    return ((LocusGeneModel)dto).getComputationalDescription();
  }

  // Source: AddLocalAttributeProperties
  public java.lang.String getCuratedSummary() {
    return ((LocusGeneModel)dto).getCuratedSummary();
  }

  // Source: AddLocalAttributeProperties
  public java.lang.String getConfidence() {
    return ((LocusGeneModel)dto).getConfidence();
  }

  // Source: AddToOneAssociationRequiredObjectProperties
  public org.tair.db.locusdetail.ILocusDetail getLocus() {
    return ((LocusGeneModel)dto).getLocus();
  }

  // Source: TransformToProperty + AddToManyAssociationCollectionProperties
  public java.util.Collection<org.tair.db.locusdetail.IAnnotation> getAnnotation() throws java.sql.SQLException {
    // Lazy-load the local property annotation if not loaded.
    if (!annotationLoaded) {
      try {
        com.poesys.db.dto.ISet setter = new QueryAnnotationSetter();
        setter.set(dto.getConnection());
      } catch (com.poesys.db.InvalidParametersException e) {
        throw new java.sql.SQLException(e.getMessage());
      }
    }
    return ((LocusGeneModel)dto).getAnnotation();
  }

  public void clearAnnotation() {
    // Only clear if loaded already.
    if (annotationLoaded) {
      try {
        // Call the local lazy property setter to clear the property.
        ((LocusGeneModel)dto).setAnnotation(null);
        ((LocusGeneModel)dto).undoStatus();
        annotationLoaded = false;
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Couldn't set status to CHANGED, ignore because we don't want it set
      }
    }
  }

  /**
   * Set the annotation from a lazy-loading proxy. The IDbDto-
   * derived interface does not contain this method.
   *
   * @param annotation the lazily loaded value to assign
   */
  void setAnnotation(java.util.Collection<org.tair.db.locusdetail.IAnnotation> annotation)
      {
    ((LocusGeneModel)dto).setAnnotation(annotation);
    // Mark the property loaded and undo the status change.
    dto.undoStatus();
    annotationLoaded = true;
  }

  // Source: TransformToProperty + AddToManyAssociationCollectionProperties
  public java.util.Collection<org.tair.db.locusdetail.ILocusPolymorphism> getPolymorphism() throws java.sql.SQLException {
    // Lazy-load the local property polymorphism if not loaded.
    if (!polymorphismLoaded) {
      try {
        com.poesys.db.dto.ISet setter = new QueryPolymorphismSetter();
        setter.set(dto.getConnection());
      } catch (com.poesys.db.InvalidParametersException e) {
        throw new java.sql.SQLException(e.getMessage());
      }
    }
    return ((LocusGeneModel)dto).getPolymorphism();
  }

  public void clearPolymorphism() {
    // Only clear if loaded already.
    if (polymorphismLoaded) {
      try {
        // Call the local lazy property setter to clear the property.
        ((LocusGeneModel)dto).setPolymorphism(null);
        ((LocusGeneModel)dto).undoStatus();
        polymorphismLoaded = false;
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Couldn't set status to CHANGED, ignore because we don't want it set
      }
    }
  }

  /**
   * Set the polymorphism from a lazy-loading proxy. The IDbDto-
   * derived interface does not contain this method.
   *
   * @param polymorphism the lazily loaded value to assign
   */
  void setPolymorphism(java.util.Collection<org.tair.db.locusdetail.ILocusPolymorphism> polymorphism)
      {
    ((LocusGeneModel)dto).setPolymorphism(polymorphism);
    // Mark the property loaded and undo the status change.
    dto.undoStatus();
    polymorphismLoaded = true;
  }

  // Source: AddAssociationClassCollectionProperties
  public java.util.Collection<org.tair.db.locusdetail.ILocusGeneModelAnnotation> getLocusGeneModelAnnotation() {
    return ((LocusGeneModel)dto).getLocusGeneModelAnnotation();
  }

  // Source: AddAssociationClassCollectionProperties
  public java.util.Collection<org.tair.db.locusdetail.IPolymorphismSite> getPolymorphismSite() {
    return ((LocusGeneModel)dto).getPolymorphismSite();
  }

  // Source: AddToManyChildCollectionProperties
  public java.util.List<org.tair.db.locusdetail.IModelFeature> getFeatures() {
    return ((LocusGeneModel)dto).getFeatures();
  }

  // Source: AddToManyChildCollectionProperties
  public java.util.Collection<org.tair.db.locusdetail.ILocusGeneModelCdna> getCdnas() {
    return ((LocusGeneModel)dto).getCdnas();
  }

  // Source: AddToManyChildCollectionProperties
  public java.util.Collection<org.tair.db.locusdetail.IProteinModel> getProteinModel() {
    return ((LocusGeneModel)dto).getProteinModel();
  }

  public void markChildrenDeleted() throws com.poesys.db.dto.DtoStatusException {
  	((LocusGeneModel)dto).markChildrenDeleted();
  }
}