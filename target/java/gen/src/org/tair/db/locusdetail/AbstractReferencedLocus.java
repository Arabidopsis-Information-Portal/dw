/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package org.tair.db.locusdetail;


import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;
import com.poesys.db.dto.DtoStatusException;


/**
 * <p>
 * A data-access layer data-transfer object for the ReferencedLocus. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * A locus to which the reference refers; this object lists all the loci to which a
 * reference refers, excluding the parent locus; this is separate from LocusDetail
 * to permit query optimization and lazy loading of the loci
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>CompositeKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: false
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractReferencedLocus extends AbstractDto implements IReferencedLocus {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  // Setter strategy nested classes for single-object associations
  
  /**
   * Nested class that manages the reference association data
   *
   * Source: AddToOneAssociationRequiredObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryReferenceSetter extends com.poesys.db.dto.AbstractObjectSetter<org.tair.db.locusdetail.IReference> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryReferenceSetter object.
     */
    public QueryReferenceSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.Reference.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return referenceKey;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.IReference> getSql() {
      return new org.tair.db.locusdetail.sql.QueryReference();
    }

    @Override
    protected void set(org.tair.db.locusdetail.IReference dto) {
      // No status change, this is just filling in the object data.
      reference = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated reference is not null
      return reference != null;
    }
  }


  /**
   * Foreign key object used by QueryReferenceSetter nested class to query object
   */
  private IPrimaryKey referenceKey;
  
  /**
   * Set the foreign key referenceKey. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param referenceKey the foreign key
   */
  void setReferenceKey(IPrimaryKey referenceKey) {
    this.referenceKey = referenceKey;
  }


  /**
   * Create an empty ReferencedLocus for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractReferencedLocus() {
    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();

    // Add the setters for the reference property.
    querySetters.add(new QueryReferenceSetter());
  }

  /**
   * Create a ReferencedLocus. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the ReferencedLocus
   * @param locusTairObjectId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param referenceTairObjectId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param refLocusame the unique name for the locus
   * @param refLocusTairObjectId the unique TAIR object identifier for the locus
   * @param primarySymbol the primary symbol for the locus
   * @param primarySymbolFullName the optional full name for the primary symbol for the locus
   */
  public AbstractReferencedLocus(IPrimaryKey key, java.lang.Long locusTairObjectId, java.lang.Long referenceTairObjectId, java.lang.String refLocusame, java.lang.Long refLocusTairObjectId, java.lang.String primarySymbol, java.lang.String primarySymbolFullName) {
    this.key = key;

    this.locusTairObjectId = locusTairObjectId;

    if (locusTairObjectId == null) {
      throw new com.poesys.db.InvalidParametersException("locusTairObjectId is required for " + key.getValueList());
    }
    
    this.referenceTairObjectId = referenceTairObjectId;

    if (referenceTairObjectId == null) {
      throw new com.poesys.db.InvalidParametersException("referenceTairObjectId is required for " + key.getValueList());
    }
    
    this.refLocusame = refLocusame;

    if (refLocusame == null) {
      throw new com.poesys.db.InvalidParametersException("refLocusame is required for " + key.getValueList());
    }
    
    this.refLocusTairObjectId = refLocusTairObjectId;

    if (refLocusTairObjectId == null) {
      throw new com.poesys.db.InvalidParametersException("refLocusTairObjectId is required for " + key.getValueList());
    }
    
    this.primarySymbol = primarySymbol;

    if (primarySymbol == null) {
      throw new com.poesys.db.InvalidParametersException("primarySymbol is required for " + key.getValueList());
    }
    
    this.primarySymbolFullName = primarySymbolFullName;

    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    
    // Add the setters for the reference property.
    querySetters.add(new QueryReferenceSetter());
    
    // Set the internal key data member for the reference object retrieval.
    referenceKey = org.tair.db.locusdetail.LocusdetailFactory.getReferencePrimaryKey(locusTairObjectId/* Source: AddNaturalKeyProperties + AddParentKeyAttributes + addAssociationForeignKeys: locusTairObjectId Key: true */, referenceTairObjectId/* Source: AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + addAssociationForeignKeys: referenceTairObjectId Key: true */);
    // Add a setter to instantiate the required reference object before insert.
    insertQuerySetters.add(new QueryReferenceSetter());
  }

  @Override
  public boolean equals(Object arg0) {
    AbstractReferencedLocus other = (AbstractReferencedLocus)arg0;
    return other.key.equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    AbstractReferencedLocus other = (AbstractReferencedLocus)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.key.compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "org.tair.db.locusdetail";
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  @Override
  public java.sql.Connection getConnection() throws java.sql.SQLException {
    java.sql.Connection connection = null;
    
	/* 
	 * The resource bundle for the DTO's subsystem contains the suffix that
	 * distinguishes multiple versions of the subsystem in the database.properties
	 * file, such as "prod" or "test". Most database.properties files have only
	 * one implementation and use external facilities to switch between the
	 * databases (JNDI, for example, or producing different database.properties
	 * files in different setups). Use the subsystem resource bundle to get the
	 * suffix, then use the full subsystem name to get a connection factory for
	 * the DTO's subsystem, then use that factory to get a JDBC connection.
	 */
	java.util.ResourceBundle rb = 
	  java.util.ResourceBundle.getBundle("org.tair.db.locusdetail");
    String subsystem =
      "org.tair.db.locusdetail"
          + (rb.getString("suffix") == null
             || rb.getString("suffix").length() == 0 ? ""
              : "." + rb.getString("suffix"));
	  
	try {
	  connection = 
	    com.poesys.db.connection.ConnectionFactoryFactory.getInstance(subsystem).getConnection();
	} catch (com.poesys.db.InvalidParametersException e) {
	  throw new java.sql.SQLException(e.getMessage());
	} catch (java.io.IOException e) {
	  throw new java.sql.SQLException(e.getMessage());
	}
	
	return connection;
  }

  /**
   * Nested property locusTairObjectId
   *
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   *
   * Added by AddNaturalKeyProperties + AddParentKeyAttributes + AddParentKeyAttributes
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long locusTairObjectId;
  

  public java.lang.Long getLocusTairObjectId() {
    return locusTairObjectId;
  }

  /**
   * Clear the locusTairObjectId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearLocusTairObjectId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property referenceTairObjectId
   *
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   *
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddParentKeyAttributes
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long referenceTairObjectId;
  

  public java.lang.Long getReferenceTairObjectId() {
    return referenceTairObjectId;
  }

  /**
   * Clear the referenceTairObjectId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearReferenceTairObjectId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property refLocusame
   *
   * <p>
   * the unique name for the locus
   * </p>
   *
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String refLocusame;
  

  public java.lang.String getRefLocusame() {
    return refLocusame;
  }

  /**
   * Clear the refLocusame data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearRefLocusame() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property refLocusTairObjectId
   *
   * <p>
   * the unique TAIR object identifier for the locus
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long refLocusTairObjectId;
  

  public java.lang.Long getRefLocusTairObjectId() {
    return refLocusTairObjectId;
  }

  /**
   * Clear the refLocusTairObjectId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearRefLocusTairObjectId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property primarySymbol
   *
   * <p>
   * the primary symbol for the locus
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String primarySymbol;
  

  public java.lang.String getPrimarySymbol() {
    return primarySymbol;
  }

  /**
   * Clear the primarySymbol data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearPrimarySymbol() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property primarySymbolFullName
   *
   * <p>
   * the optional full name for the primary symbol for the locus
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String primarySymbolFullName;
  

  public java.lang.String getPrimarySymbolFullName() {
    return primarySymbolFullName;
  }

  /**
   * Clear the primarySymbolFullName data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearPrimarySymbolFullName() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property reference
   *
   * <p>
   * the reference that refers to the locus
   * </p>
   *
   * Added by AddToOneAssociationRequiredObjectProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private org.tair.db.locusdetail.IReference reference;
  

  public org.tair.db.locusdetail.IReference getReference() {
    return reference;
  }

  /**
   * Clear the reference data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearReference() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {
  }
}