/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDtoProxy.vsl

package org.tair.db.locusdetail;


import com.poesys.db.dto.AbstractLazyLoadingDtoProxy;


/**
 * <p>
 * A data-access layer data-transfer object (DTO) lazy-loading proxy for the 
 * LocusNaturalVariation. This class is an abstract class that contains AndroMDA 
 * generated code; change nothing in this class. Instead, override any methods 
 * in the concrete subclass generated in the same package. AndroMDA will 
 * overwrite this class each time you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * a naturally-occurring polymorphism between two ecotypes; induced polymorphisms
 * are differences within a single ecotype, whereas natural variation polymorphisms
 * differ between ecotypes
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractLocusNaturalVariationProxy extends AbstractLazyLoadingDtoProxy implements ILocusNaturalVariation {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;

  // Lazy-loading query setter strategy nested classes for single-object associations
  


  /**
   * Read-Object setter for de-serializing nested ecotypes collection
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryLocusNaturalVariationEcotype
   */
  private class ReadEcotypesSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.tair.db.locusdetail.ILocusNaturalVariationEcotype> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadEcotypesSetter object to read the ecotypes collection.
     */
    public ReadEcotypesSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.LocusNaturalVariationEcotype.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.locusdetail.ILocusNaturalVariationEcotype> getObjectCollection() {
      java.util.Collection<org.tair.db.locusdetail.ILocusNaturalVariationEcotype> ecotypes =  ((org.tair.db.locusdetail.LocusNaturalVariation)dto).getEcotypes();
      return ecotypes;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.tair.db.locusdetail.LocusNaturalVariation)dto).ecotypesKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.ILocusNaturalVariationEcotype> getSql() {
      return new org.tair.db.locusdetail.sql.QueryLocusNaturalVariationEcotype();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.locusdetail.ILocusNaturalVariationEcotype> collection) {
      ((org.tair.db.locusdetail.LocusNaturalVariation)dto).ecotypes = collection;
    }
  }

  /**
   * Create a LocusNaturalVariationProxy. The concrete subclass must call this constructor.
   *
   * @param dto the DTO to proxy
   */
  public AbstractLocusNaturalVariationProxy(LocusNaturalVariation dto) {
    super(dto);

    // Setter arrays
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters.add(new ReadEcotypesSetter());
  }

  @Override
  public boolean equals(Object obj) {
    AbstractLocusNaturalVariationProxy otherProxy = (AbstractLocusNaturalVariationProxy)obj;
    return ((LocusNaturalVariation)dto).equals(otherProxy.dto);
  }

  @Override
  public int hashCode() {
    return ((LocusNaturalVariation)dto).hashCode();
  }
  // Inherited properties

  public java.lang.Long getLocusTairObjectId() {
    return ((ILocusNaturalVariation)dto).getLocusTairObjectId();
  }

  public java.lang.String getPolymorphismName() {
    return ((ILocusNaturalVariation)dto).getPolymorphismName();
  }

  public org.tair.db.locusdetail.ILocusDetail getLocusLocus() {
    return ((ILocusNaturalVariation)dto).getLocusLocus();
  }

  /** Flag indicating whether the lociLocus property has been loaded */
  boolean lociLocusLoaded = false;

  /**
   * Query setter for lazily querying nested lociLocus collection
   *
   * @see org.tair.db.locusdetail.sql.QueryLociLocusByLocusPolymorphism
   */
  private class QueryLociLocusSetter 
      extends com.poesys.db.dto.AbstractLazyListSetter<org.tair.db.locusdetail.ILocusGeneModel, org.tair.db.locusdetail.ILocusPolymorphism, java.util.Collection<org.tair.db.locusdetail.ILocusGeneModel>> {
    /** Serial version UID for Serializable object */
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryLociLocusSetter object.
     */
    public QueryLociLocusSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.LocusGeneModel.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ILocusNaturalVariation getParametersDto() {
      return AbstractLocusNaturalVariationProxy.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.tair.db.locusdetail.ILocusGeneModel, org.tair.db.locusdetail.ILocusPolymorphism> getSql() {
      return new org.tair.db.locusdetail.sql.QueryLociLocusByLocusPolymorphism();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.locusdetail.ILocusGeneModel> collection) {
      try {
        // Register the observer parent with the subject children.
        for (org.tair.db.locusdetail.ILocusGeneModel child : collection) {
          child.attach(AbstractLocusNaturalVariationProxy.this.dto,
                              com.poesys.db.dao.DataEvent.MARKED_DELETED);
          child.attach(AbstractLocusNaturalVariationProxy.this.dto, 
                       com.poesys.db.dao.DataEvent.DELETE);
        }
        setLociLocus(collection);
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Just lazy loading here, not actually setting. Ignore this exception.        
      }
    }

    @Override
    public boolean isSet() {
      // Set if proxy has loaded lociLocus
      return lociLocusLoaded;
    }
  }

  public java.util.Collection<org.tair.db.locusdetail.ILocusGeneModel> getLociLocus() throws java.sql.SQLException {
    // Lazy-load the inherited lociLocus from the LocusNaturalVariation 
    // if not loaded and the inherited key is not null.
    if (!lociLocusLoaded && ((ILocusNaturalVariation)dto).getLocusTairObjectId() != null && ((ILocusNaturalVariation)dto).getPolymorphismName() != null) {
      try {
        com.poesys.db.dto.ISet setter = new QueryLociLocusSetter();
        setter.set(dto.getConnection());
      } catch (com.poesys.db.InvalidParametersException e) {
        throw new java.sql.SQLException(e.getMessage());
      }
    }
    return ((ILocusNaturalVariation)dto).getLociLocus();
  }

  /**
   * Clear the lazily-loaded property lociLocus.
   */
  public void clearLociLocus() {
    // Only clear if loaded already.
    if (lociLocusLoaded) {
      try {
        // Call the local lazy property setter to clear the property.
        ((LocusNaturalVariation)dto).setLociLocus(null);
        ((LocusNaturalVariation)dto).undoStatus();
        lociLocusLoaded = false;
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Couldn't set status to CHANGED, ignore because we don't want it set
      }
    }
  }

  /**
   * Set the lazily loaded property lociLocus and mark it loaded.
   * 
   * @param lociLocus the value for the lazily loaded property
   */
  public void setLociLocus(java.util.Collection<org.tair.db.locusdetail.ILocusGeneModel> lociLocus)
      {
    ((LocusNaturalVariation)dto).setLociLocus(lociLocus);
    
    // Mark the property loaded and undo the status change if loading.
    if (!lociLocusLoaded) {
      dto.undoStatus();
      lociLocusLoaded = true;
    }
  }

  public java.util.Collection<org.tair.db.locusdetail.IPolymorphismSite> getPolymorphismSite() {
    return ((ILocusNaturalVariation)dto).getPolymorphismSite();
  }

  public java.lang.Long getPolymorphismTairObjectId() {
    return ((ILocusNaturalVariation)dto).getPolymorphismTairObjectId();
  }

  public java.lang.String getPolymorphismType() {
    return ((ILocusNaturalVariation)dto).getPolymorphismType();
  }

  public java.lang.Long getLength() {
    return ((ILocusNaturalVariation)dto).getLength();
  }

  public java.lang.Long getStart() {
    return ((ILocusNaturalVariation)dto).getStart();
  }

  public java.lang.Long getEnd() {
    return ((ILocusNaturalVariation)dto).getEnd();
  }

  // Local properties (attributes, associations, and association classes)

  // Source: AddLocalAttributeProperties
  public java.lang.String getDetail() {
    return ((LocusNaturalVariation)dto).getDetail();
  }

  // Source: AddToOneAssociationRequiredObjectProperties
  public org.tair.db.basic.ISpeciesVariant getReferenceEcotypeReferenceEcotype() {
    return ((LocusNaturalVariation)dto).getReferenceEcotypeReferenceEcotype();
  }

  // Source: AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddToOneAssociationAttributeProperties
  public java.lang.String getAccession() {
    return ((LocusNaturalVariation)dto).getAccession();
  }

  // Source: AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddToOneAssociationAttributeProperties
  public java.lang.String getName() {
    return ((LocusNaturalVariation)dto).getName();
  }

  // Source: AddNaturalKeyProperties + AddParentKeyAttributes + AddToOneAssociationAttributeProperties
  public java.lang.Long getTaxonId() {
    return ((LocusNaturalVariation)dto).getTaxonId();
  }

  // Source: AddToManyChildCollectionProperties
  public java.util.Collection<org.tair.db.locusdetail.ILocusNaturalVariationEcotype> getEcotypes() {
    return ((LocusNaturalVariation)dto).getEcotypes();
  }

  public void markChildrenDeleted() throws com.poesys.db.dto.DtoStatusException {
  	((LocusNaturalVariation)dto).markChildrenDeleted();
  }
}