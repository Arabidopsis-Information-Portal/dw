/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDtoProxy.vsl

package org.tair.db.locusdetail;


import com.poesys.db.dto.AbstractLazyLoadingDtoProxy;


/**
 * <p>
 * A data-access layer data-transfer object (DTO) lazy-loading proxy for the 
 * LocusDetail. This class is an abstract class that contains AndroMDA 
 * generated code; change nothing in this class. Instead, override any methods 
 * in the concrete subclass generated in the same package. AndroMDA will 
 * overwrite this class each time you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * The central object of the subsystem, a locus, which is the location on a
 * chromosome of a gene (the concept of a physical DNA structure that maps into a
 * protein or RNA molecule and has distinct function)
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractLocusDetailProxy extends AbstractLazyLoadingDtoProxy implements ILocusDetail {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;

  // Lazy-loading query setter strategy nested classes for single-object associations
  
    // Setter strategy nested classes for multiple-object associations

  /** Flag indicating whether the annotation property has been loaded */
  boolean annotationLoaded = false;

  /**
   * Query setter for lazily querying nested annotation collection
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryAnnotationByLocusDetail
   */
  private class QueryAnnotationSetter 
      extends com.poesys.db.dto.AbstractLazyListSetter<org.tair.db.locusdetail.IAnnotation, ILocusDetail, java.util.Collection<org.tair.db.locusdetail.IAnnotation>> {
    /** Serial version UID for Serializable object */
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryAnnotationSetter object.
     */
    public QueryAnnotationSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.Annotation.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ILocusDetail getParametersDto() {
      return AbstractLocusDetailProxy.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.tair.db.locusdetail.IAnnotation, ILocusDetail> getSql() {
      return new org.tair.db.locusdetail.sql.QueryAnnotationByLocusDetail();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.locusdetail.IAnnotation> collection) {
      try {
        // Register the observer parent with the subject children.
        for (org.tair.db.locusdetail.IAnnotation child : collection) {
          child.attach(AbstractLocusDetailProxy.this.dto,
                              com.poesys.db.dao.DataEvent.MARKED_DELETED);
          child.attach(AbstractLocusDetailProxy.this.dto, com.poesys.db.dao.DataEvent.DELETE);
        }
        setAnnotation(collection);
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Just lazy loading here, not actually setting. Ignore this exception.        
      }
    }

    @Override
    public boolean isSet() {
      // Set if proxy has loaded annotation
      return annotationLoaded;
    }
  }


  /**
   * Read-Object setter for de-serializing nested annotation collection
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryAnnotation
   */
  private class ReadAnnotationSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.tair.db.locusdetail.IAnnotation> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadAnnotationSetter object to read the annotation collection.
     */
    public ReadAnnotationSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.Annotation.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.locusdetail.IAnnotation> getObjectCollection() {
      java.util.Collection<org.tair.db.locusdetail.IAnnotation> annotation = null;
      try {
        annotation = ((org.tair.db.locusdetail.LocusDetail)dto).getAnnotation();
      } catch (java.sql.SQLException e) {
        throw new RuntimeException("SQL Exception on collection query: " + e.getMessage(), e);
      }
      return annotation;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.tair.db.locusdetail.LocusDetail)dto).annotationKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.IAnnotation> getSql() {
      return new org.tair.db.locusdetail.sql.QueryAnnotation();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.locusdetail.IAnnotation> collection) {
      ((org.tair.db.locusdetail.LocusDetail)dto).annotation = collection;
    }
  }



  /**
   * Read-Object setter for de-serializing nested locusAnnotation collection
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryLocusAnnotation
   */
  private class ReadLocusAnnotationSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.tair.db.locusdetail.ILocusAnnotation> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadLocusAnnotationSetter object to read the locusAnnotation collection.
     */
    public ReadLocusAnnotationSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.LocusAnnotation.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.locusdetail.ILocusAnnotation> getObjectCollection() {
      java.util.Collection<org.tair.db.locusdetail.ILocusAnnotation> locusAnnotation =  ((org.tair.db.locusdetail.LocusDetail)dto).getLocusAnnotation();
      return locusAnnotation;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.tair.db.locusdetail.LocusDetail)dto).locusAnnotationKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.ILocusAnnotation> getSql() {
      return new org.tair.db.locusdetail.sql.QueryLocusAnnotation();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.locusdetail.ILocusAnnotation> collection) {
      ((org.tair.db.locusdetail.LocusDetail)dto).locusAnnotation = collection;
    }
  }



  /**
   * Read-Object setter for de-serializing nested updateHistories list
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryLocusUpdateHistory
   */
  private class ReadUpdateHistoriesSetter 
      extends com.poesys.db.dto.AbstractListReadSetter<org.tair.db.locusdetail.ILocusUpdateHistory> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadUpdateHistoriesSetter object to read the updateHistories list.
     */
    public ReadUpdateHistoriesSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.LocusUpdateHistory.class.getName();
    }

    @Override
    protected java.util.List<org.tair.db.locusdetail.ILocusUpdateHistory> getObjectList() {
      java.util.List<org.tair.db.locusdetail.ILocusUpdateHistory> updateHistories =  ((org.tair.db.locusdetail.LocusDetail)dto).getUpdateHistories();
      return updateHistories;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.tair.db.locusdetail.LocusDetail)dto).updateHistoriesKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.ILocusUpdateHistory> getSql() {
      return new org.tair.db.locusdetail.sql.QueryLocusUpdateHistory();
    }

    @Override
    protected void set(java.util.List<org.tair.db.locusdetail.ILocusUpdateHistory> list) {
      ((org.tair.db.locusdetail.LocusDetail)dto).updateHistories = list;
    }
  }


  /**
   * Read-Object setter for de-serializing nested geneModels collection
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryLocusGeneModel
   */
  private class ReadGeneModelsSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.tair.db.locusdetail.ILocusGeneModel> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadGeneModelsSetter object to read the geneModels collection.
     */
    public ReadGeneModelsSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.LocusGeneModel.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.locusdetail.ILocusGeneModel> getObjectCollection() {
      java.util.Collection<org.tair.db.locusdetail.ILocusGeneModel> geneModels =  ((org.tair.db.locusdetail.LocusDetail)dto).getGeneModels();
      return geneModels;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.tair.db.locusdetail.LocusDetail)dto).geneModelsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.ILocusGeneModel> getSql() {
      return new org.tair.db.locusdetail.sql.QueryLocusGeneModel();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.locusdetail.ILocusGeneModel> collection) {
      ((org.tair.db.locusdetail.LocusDetail)dto).geneModels = collection;
    }
  }



  /**
   * Read-Object setter for de-serializing nested otherNames list
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryLocusOtherName
   */
  private class ReadOtherNamesSetter 
      extends com.poesys.db.dto.AbstractListReadSetter<org.tair.db.locusdetail.ILocusOtherName> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadOtherNamesSetter object to read the otherNames list.
     */
    public ReadOtherNamesSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.LocusOtherName.class.getName();
    }

    @Override
    protected java.util.List<org.tair.db.locusdetail.ILocusOtherName> getObjectList() {
      java.util.List<org.tair.db.locusdetail.ILocusOtherName> otherNames =  ((org.tair.db.locusdetail.LocusDetail)dto).getOtherNames();
      return otherNames;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.tair.db.locusdetail.LocusDetail)dto).otherNamesKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.ILocusOtherName> getSql() {
      return new org.tair.db.locusdetail.sql.QueryLocusOtherName();
    }

    @Override
    protected void set(java.util.List<org.tair.db.locusdetail.ILocusOtherName> list) {
      ((org.tair.db.locusdetail.LocusDetail)dto).otherNames = list;
    }
  }


  /**
   * Read-Object setter for de-serializing nested locations collection
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryLocusPhysicalMapCoordinates
   */
  private class ReadLocationsSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.tair.db.locusdetail.ILocusPhysicalMapCoordinates> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadLocationsSetter object to read the locations collection.
     */
    public ReadLocationsSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.LocusPhysicalMapCoordinates.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.locusdetail.ILocusPhysicalMapCoordinates> getObjectCollection() {
      java.util.Collection<org.tair.db.locusdetail.ILocusPhysicalMapCoordinates> locations =  ((org.tair.db.locusdetail.LocusDetail)dto).getLocations();
      return locations;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.tair.db.locusdetail.LocusDetail)dto).locationsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.ILocusPhysicalMapCoordinates> getSql() {
      return new org.tair.db.locusdetail.sql.QueryLocusPhysicalMapCoordinates();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.locusdetail.ILocusPhysicalMapCoordinates> collection) {
      ((org.tair.db.locusdetail.LocusDetail)dto).locations = collection;
    }
  }



  /**
   * Read-Object setter for de-serializing nested resourceLinks list
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryLocusResourceLink
   */
  private class ReadResourceLinksSetter 
      extends com.poesys.db.dto.AbstractListReadSetter<org.tair.db.locusdetail.ILocusResourceLink> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadResourceLinksSetter object to read the resourceLinks list.
     */
    public ReadResourceLinksSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.LocusResourceLink.class.getName();
    }

    @Override
    protected java.util.List<org.tair.db.locusdetail.ILocusResourceLink> getObjectList() {
      java.util.List<org.tair.db.locusdetail.ILocusResourceLink> resourceLinks =  ((org.tair.db.locusdetail.LocusDetail)dto).getResourceLinks();
      return resourceLinks;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.tair.db.locusdetail.LocusDetail)dto).resourceLinksKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.ILocusResourceLink> getSql() {
      return new org.tair.db.locusdetail.sql.QueryLocusResourceLink();
    }

    @Override
    protected void set(java.util.List<org.tair.db.locusdetail.ILocusResourceLink> list) {
      ((org.tair.db.locusdetail.LocusDetail)dto).resourceLinks = list;
    }
  }


  /**
   * Read-Object setter for de-serializing nested comments list
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryLocusComment
   */
  private class ReadCommentsSetter 
      extends com.poesys.db.dto.AbstractListReadSetter<org.tair.db.locusdetail.ILocusComment> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadCommentsSetter object to read the comments list.
     */
    public ReadCommentsSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.LocusComment.class.getName();
    }

    @Override
    protected java.util.List<org.tair.db.locusdetail.ILocusComment> getObjectList() {
      java.util.List<org.tair.db.locusdetail.ILocusComment> comments =  ((org.tair.db.locusdetail.LocusDetail)dto).getComments();
      return comments;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.tair.db.locusdetail.LocusDetail)dto).commentsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.ILocusComment> getSql() {
      return new org.tair.db.locusdetail.sql.QueryLocusComment();
    }

    @Override
    protected void set(java.util.List<org.tair.db.locusdetail.ILocusComment> list) {
      ((org.tair.db.locusdetail.LocusDetail)dto).comments = list;
    }
  }


  /**
   * Read-Object setter for de-serializing nested attributions list
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryLocusAttribution
   */
  private class ReadAttributionsSetter 
      extends com.poesys.db.dto.AbstractListReadSetter<org.tair.db.locusdetail.ILocusAttribution> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadAttributionsSetter object to read the attributions list.
     */
    public ReadAttributionsSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.LocusAttribution.class.getName();
    }

    @Override
    protected java.util.List<org.tair.db.locusdetail.ILocusAttribution> getObjectList() {
      java.util.List<org.tair.db.locusdetail.ILocusAttribution> attributions =  ((org.tair.db.locusdetail.LocusDetail)dto).getAttributions();
      return attributions;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.tair.db.locusdetail.LocusDetail)dto).attributionsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.ILocusAttribution> getSql() {
      return new org.tair.db.locusdetail.sql.QueryLocusAttribution();
    }

    @Override
    protected void set(java.util.List<org.tair.db.locusdetail.ILocusAttribution> list) {
      ((org.tair.db.locusdetail.LocusDetail)dto).attributions = list;
    }
  }


  /**
   * Read-Object setter for de-serializing nested otherSymbols list
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryLocusOtherSymbol
   */
  private class ReadOtherSymbolsSetter 
      extends com.poesys.db.dto.AbstractListReadSetter<org.tair.db.locusdetail.ILocusOtherSymbol> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadOtherSymbolsSetter object to read the otherSymbols list.
     */
    public ReadOtherSymbolsSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.LocusOtherSymbol.class.getName();
    }

    @Override
    protected java.util.List<org.tair.db.locusdetail.ILocusOtherSymbol> getObjectList() {
      java.util.List<org.tair.db.locusdetail.ILocusOtherSymbol> otherSymbols =  ((org.tair.db.locusdetail.LocusDetail)dto).getOtherSymbols();
      return otherSymbols;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.tair.db.locusdetail.LocusDetail)dto).otherSymbolsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.ILocusOtherSymbol> getSql() {
      return new org.tair.db.locusdetail.sql.QueryLocusOtherSymbol();
    }

    @Override
    protected void set(java.util.List<org.tair.db.locusdetail.ILocusOtherSymbol> list) {
      ((org.tair.db.locusdetail.LocusDetail)dto).otherSymbols = list;
    }
  }


  /**
   * Read-Object setter for de-serializing nested polymorphisms collection
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryLocusPolymorphism
   */
  private class ReadPolymorphismsSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.tair.db.locusdetail.ILocusPolymorphism> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadPolymorphismsSetter object to read the polymorphisms collection.
     */
    public ReadPolymorphismsSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.LocusPolymorphism.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.locusdetail.ILocusPolymorphism> getObjectCollection() {
      java.util.Collection<org.tair.db.locusdetail.ILocusPolymorphism> polymorphisms =  ((org.tair.db.locusdetail.LocusDetail)dto).getPolymorphisms();
      return polymorphisms;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.tair.db.locusdetail.LocusDetail)dto).polymorphismsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.ILocusPolymorphism> getSql() {
      return new org.tair.db.locusdetail.sql.QueryLocusPolymorphism();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.locusdetail.ILocusPolymorphism> collection) {
      ((org.tair.db.locusdetail.LocusDetail)dto).polymorphisms = collection;
    }
  }

  

  /** Flag indicating whether the references property has been loaded */
  boolean referencesLoaded = false;

  /**
   * Query setter for lazily querying nested references collection
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryReferencesByLocusDetail
   */
  private class QueryReferencesSetter 
      extends com.poesys.db.dto.AbstractLazyListSetter<org.tair.db.locusdetail.IReference, ILocusDetail, java.util.List<org.tair.db.locusdetail.IReference>> {
    /** Serial version UID for Serializable object */
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryReferencesSetter object.
     */
    public QueryReferencesSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.Reference.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ILocusDetail getParametersDto() {
      return AbstractLocusDetailProxy.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.tair.db.locusdetail.IReference, ILocusDetail> getSql() {
      return new org.tair.db.locusdetail.sql.QueryReferencesByLocusDetail();
    }

    @Override
    protected void set(java.util.List<org.tair.db.locusdetail.IReference> collection) {
      try {
        // Register the observer parent with the subject children.
        for (org.tair.db.locusdetail.IReference child : collection) {
          child.attach(AbstractLocusDetailProxy.this.dto,
                              com.poesys.db.dao.DataEvent.MARKED_DELETED);
          child.attach(AbstractLocusDetailProxy.this.dto, com.poesys.db.dao.DataEvent.DELETE);
        }
        setReferences(collection);
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Just lazy loading here, not actually setting. Ignore this exception.        
      }
    }

    @Override
    public boolean isSet() {
      // Set if proxy has loaded references
      return referencesLoaded;
    }
  }


  /**
   * Read-Object setter for de-serializing nested references list
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryReference
   */
  private class ReadReferencesSetter 
      extends com.poesys.db.dto.AbstractListReadSetter<org.tair.db.locusdetail.IReference> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadReferencesSetter object to read the references list.
     */
    public ReadReferencesSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.Reference.class.getName();
    }

    @Override
    protected java.util.List<org.tair.db.locusdetail.IReference> getObjectList() {
      java.util.List<org.tair.db.locusdetail.IReference> references = null;
      try {
        references = ((org.tair.db.locusdetail.LocusDetail)dto).getReferences();
      } catch (java.sql.SQLException e) {
        throw new RuntimeException("SQL Exception on list query: " + e.getMessage(), e);
      }
      return references;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.tair.db.locusdetail.LocusDetail)dto).referencesKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.IReference> getSql() {
      return new org.tair.db.locusdetail.sql.QueryReference();
    }

    @Override
    protected void set(java.util.List<org.tair.db.locusdetail.IReference> list) {
      ((org.tair.db.locusdetail.LocusDetail)dto).references = list;
    }
  }


  /**
   * Read-Object setter for de-serializing nested bacs collection
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryLocusBac
   */
  private class ReadBacsSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.tair.db.locusdetail.ILocusBac> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadBacsSetter object to read the bacs collection.
     */
    public ReadBacsSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.LocusBac.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.locusdetail.ILocusBac> getObjectCollection() {
      java.util.Collection<org.tair.db.locusdetail.ILocusBac> bacs =  ((org.tair.db.locusdetail.LocusDetail)dto).getBacs();
      return bacs;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.tair.db.locusdetail.LocusDetail)dto).bacsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.ILocusBac> getSql() {
      return new org.tair.db.locusdetail.sql.QueryLocusBac();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.locusdetail.ILocusBac> collection) {
      ((org.tair.db.locusdetail.LocusDetail)dto).bacs = collection;
    }
  }



  /**
   * Read-Object setter for de-serializing nested ests collection
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryLocuslEst
   */
  private class ReadEstsSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.tair.db.locusdetail.ILocuslEst> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadEstsSetter object to read the ests collection.
     */
    public ReadEstsSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.LocuslEst.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.locusdetail.ILocuslEst> getObjectCollection() {
      java.util.Collection<org.tair.db.locusdetail.ILocuslEst> ests =  ((org.tair.db.locusdetail.LocusDetail)dto).getEsts();
      return ests;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.tair.db.locusdetail.LocusDetail)dto).estsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.ILocuslEst> getSql() {
      return new org.tair.db.locusdetail.sql.QueryLocuslEst();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.locusdetail.ILocuslEst> collection) {
      ((org.tair.db.locusdetail.LocusDetail)dto).ests = collection;
    }
  }



  /**
   * Read-Object setter for de-serializing nested cDnas collection
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryLocusCdna
   */
  private class ReadCDnasSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.tair.db.locusdetail.ILocusCdna> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadCDnasSetter object to read the cDnas collection.
     */
    public ReadCDnasSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.LocusCdna.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.locusdetail.ILocusCdna> getObjectCollection() {
      java.util.Collection<org.tair.db.locusdetail.ILocusCdna> cDnas =  ((org.tair.db.locusdetail.LocusDetail)dto).getCDnas();
      return cDnas;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.tair.db.locusdetail.LocusDetail)dto).cDnasKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.ILocusCdna> getSql() {
      return new org.tair.db.locusdetail.sql.QueryLocusCdna();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.locusdetail.ILocusCdna> collection) {
      ((org.tair.db.locusdetail.LocusDetail)dto).cDnas = collection;
    }
  }

  /**
   * Create a LocusDetailProxy. The concrete subclass must call this constructor.
   *
   * @param dto the DTO to proxy
   */
  public AbstractLocusDetailProxy(LocusDetail dto) {
    super(dto);

    // Setter arrays
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters.add(new ReadAnnotationSetter());
    readObjectSetters.add(new ReadLocusAnnotationSetter());
    readObjectSetters.add(new ReadUpdateHistoriesSetter());
    readObjectSetters.add(new ReadGeneModelsSetter());
    readObjectSetters.add(new ReadOtherNamesSetter());
    readObjectSetters.add(new ReadLocationsSetter());
    readObjectSetters.add(new ReadResourceLinksSetter());
    readObjectSetters.add(new ReadCommentsSetter());
    readObjectSetters.add(new ReadAttributionsSetter());
    readObjectSetters.add(new ReadOtherSymbolsSetter());
    readObjectSetters.add(new ReadPolymorphismsSetter());
    readObjectSetters.add(new ReadReferencesSetter());
    readObjectSetters.add(new ReadBacsSetter());
    readObjectSetters.add(new ReadEstsSetter());
    readObjectSetters.add(new ReadCDnasSetter());
  }

  @Override
  public boolean equals(Object obj) {
    AbstractLocusDetailProxy otherProxy = (AbstractLocusDetailProxy)obj;
    return ((LocusDetail)dto).equals(otherProxy.dto);
  }

  @Override
  public int hashCode() {
    return ((LocusDetail)dto).hashCode();
  }

  // Local properties (attributes, associations, and association classes)

  // Source: AddNaturalKeyProperties
  public java.lang.Long getLocusTairObjectId() {
    return ((LocusDetail)dto).getLocusTairObjectId();
  }

  // Source: AddLocalAttributeProperties
  public java.lang.String getLocusName() {
    return ((LocusDetail)dto).getLocusName();
  }

  // Source: AddLocalAttributeProperties
  public java.lang.String getPrimarySymbol() {
    return ((LocusDetail)dto).getPrimarySymbol();
  }

  // Source: AddLocalAttributeProperties
  public java.lang.String getPrimarySymbolFullName() {
    return ((LocusDetail)dto).getPrimarySymbolFullName();
  }

  // Source: AddLocalAttributeProperties
  public java.lang.String getChromosome() {
    return ((LocusDetail)dto).getChromosome();
  }

  // Source: AddLocalAttributeProperties
  public java.lang.Long getSpanStartPosition() {
    return ((LocusDetail)dto).getSpanStartPosition();
  }

  // Source: AddLocalAttributeProperties
  public java.lang.Long getSpanEndPosition() {
    return ((LocusDetail)dto).getSpanEndPosition();
  }

  // Source: AddLocalAttributeProperties
  public java.lang.String getCuratedSummary() {
    return ((LocusDetail)dto).getCuratedSummary();
  }

  // Source: AddLocalAttributeProperties
  public java.lang.Long getGeneModelCount() {
    return ((LocusDetail)dto).getGeneModelCount();
  }

  // Source: AddLocalAttributeProperties
  public java.lang.Long getPolymorphismCount() {
    return ((LocusDetail)dto).getPolymorphismCount();
  }

  // Source: AddLocalAttributeProperties
  public java.lang.Long getArticleCount() {
    return ((LocusDetail)dto).getArticleCount();
  }

  // Source: AddLocalAttributeProperties
  public java.lang.Long getAbstractCount() {
    return ((LocusDetail)dto).getAbstractCount();
  }

  // Source: AddLocalAttributeProperties
  public java.lang.String getGeneFamilyName() {
    return ((LocusDetail)dto).getGeneFamilyName();
  }

  // Source: AddLocalAttributeProperties
  public java.lang.Long getGeneFamilyTairObjectId() {
    return ((LocusDetail)dto).getGeneFamilyTairObjectId();
  }

  // Source: AddToOneAssociationRequiredObjectProperties
  public org.tair.db.basic.ITaxon getTaxon() {
    return ((LocusDetail)dto).getTaxon();
  }

  // Source: AddNaturalKeyProperties + AddToOneAssociationAttributeProperties
  public java.lang.Long getTaxonId() {
    return ((LocusDetail)dto).getTaxonId();
  }

  // Source: TransformToProperty + AddToManyAssociationCollectionProperties
  public java.util.Collection<org.tair.db.locusdetail.IAnnotation> getAnnotation() throws java.sql.SQLException {
    // Lazy-load the local property annotation if not loaded.
    if (!annotationLoaded) {
      try {
        com.poesys.db.dto.ISet setter = new QueryAnnotationSetter();
        setter.set(dto.getConnection());
      } catch (com.poesys.db.InvalidParametersException e) {
        throw new java.sql.SQLException(e.getMessage());
      }
    }
    return ((LocusDetail)dto).getAnnotation();
  }

  public void clearAnnotation() {
    // Only clear if loaded already.
    if (annotationLoaded) {
      try {
        // Call the local lazy property setter to clear the property.
        ((LocusDetail)dto).setAnnotation(null);
        ((LocusDetail)dto).undoStatus();
        annotationLoaded = false;
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Couldn't set status to CHANGED, ignore because we don't want it set
      }
    }
  }

  /**
   * Set the annotation from a lazy-loading proxy. The IDbDto-
   * derived interface does not contain this method.
   *
   * @param annotation the lazily loaded value to assign
   */
  void setAnnotation(java.util.Collection<org.tair.db.locusdetail.IAnnotation> annotation)
      {
    ((LocusDetail)dto).setAnnotation(annotation);
    // Mark the property loaded and undo the status change.
    dto.undoStatus();
    annotationLoaded = true;
  }

  // Source: AddAssociationClassCollectionProperties
  public java.util.Collection<org.tair.db.locusdetail.ILocusAnnotation> getLocusAnnotation() {
    return ((LocusDetail)dto).getLocusAnnotation();
  }

  // Source: AddToManyChildCollectionProperties
  public java.util.List<org.tair.db.locusdetail.ILocusUpdateHistory> getUpdateHistories() {
    return ((LocusDetail)dto).getUpdateHistories();
  }

  // Source: AddToManyChildCollectionProperties
  public java.util.Collection<org.tair.db.locusdetail.ILocusGeneModel> getGeneModels() {
    return ((LocusDetail)dto).getGeneModels();
  }

  // Source: AddToManyChildCollectionProperties
  public java.util.List<org.tair.db.locusdetail.ILocusOtherName> getOtherNames() {
    return ((LocusDetail)dto).getOtherNames();
  }

  // Source: AddToManyChildCollectionProperties
  public java.util.Collection<org.tair.db.locusdetail.ILocusPhysicalMapCoordinates> getLocations() {
    return ((LocusDetail)dto).getLocations();
  }

  // Source: AddToManyChildCollectionProperties
  public java.util.List<org.tair.db.locusdetail.ILocusResourceLink> getResourceLinks() {
    return ((LocusDetail)dto).getResourceLinks();
  }

  // Source: AddToManyChildCollectionProperties
  public java.util.List<org.tair.db.locusdetail.ILocusComment> getComments() {
    return ((LocusDetail)dto).getComments();
  }

  // Source: AddToManyChildCollectionProperties
  public java.util.List<org.tair.db.locusdetail.ILocusAttribution> getAttributions() {
    return ((LocusDetail)dto).getAttributions();
  }

  // Source: AddToManyChildCollectionProperties
  public java.util.List<org.tair.db.locusdetail.ILocusOtherSymbol> getOtherSymbols() {
    return ((LocusDetail)dto).getOtherSymbols();
  }

  // Source: AddToManyChildCollectionProperties
  public java.util.Collection<org.tair.db.locusdetail.ILocusPolymorphism> getPolymorphisms() {
    return ((LocusDetail)dto).getPolymorphisms();
  }

  // Source: AddToManyChildCollectionProperties
  public java.util.List<org.tair.db.locusdetail.IReference> getReferences() throws java.sql.SQLException {
    // Lazy-load the local property references if not loaded.
    if (!referencesLoaded) {
      try {
        com.poesys.db.dto.ISet setter = new QueryReferencesSetter();
        setter.set(dto.getConnection());
      } catch (com.poesys.db.InvalidParametersException e) {
        throw new java.sql.SQLException(e.getMessage());
      }
    }
    return ((LocusDetail)dto).getReferences();
  }

  public void clearReferences() {
    // Only clear if loaded already.
    if (referencesLoaded) {
      try {
        // Call the local lazy property setter to clear the property.
        ((LocusDetail)dto).setReferences(null);
        ((LocusDetail)dto).undoStatus();
        referencesLoaded = false;
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Couldn't set status to CHANGED, ignore because we don't want it set
      }
    }
  }

  /**
   * Set the references from a lazy-loading proxy. The IDbDto-
   * derived interface does not contain this method.
   *
   * @param references the lazily loaded value to assign
   */
  void setReferences(java.util.List<org.tair.db.locusdetail.IReference> references)
      {
    ((LocusDetail)dto).setReferences(references);
    // Mark the property loaded and undo the status change.
    dto.undoStatus();
    referencesLoaded = true;
  }

  // Source: AddToManyChildCollectionProperties
  public java.util.Collection<org.tair.db.locusdetail.ILocusBac> getBacs() {
    return ((LocusDetail)dto).getBacs();
  }

  // Source: AddToManyChildCollectionProperties
  public java.util.Collection<org.tair.db.locusdetail.ILocuslEst> getEsts() {
    return ((LocusDetail)dto).getEsts();
  }

  // Source: AddToManyChildCollectionProperties
  public java.util.Collection<org.tair.db.locusdetail.ILocusCdna> getCDnas() {
    return ((LocusDetail)dto).getCDnas();
  }

  public void markChildrenDeleted() throws com.poesys.db.dto.DtoStatusException {
  	((LocusDetail)dto).markChildrenDeleted();
  }
}