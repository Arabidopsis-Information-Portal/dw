/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package org.tair.db.locusdetail;


import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;
import com.poesys.db.dto.DtoStatusException;


/**
 * <p>
 * A data-access layer data-transfer object for the PolymorphismSite. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * The site on a specific gene model for a locus on which a polymorphism within the
 * locus appears
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>AssociationKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractPolymorphismSite extends AbstractDto implements IPolymorphismSite {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  // Setter strategy nested classes for single-object associations
  
  /**
   * Nested class that manages the lociLocus association data
   *
   * Source: AddAssociationKeyObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryLociLocusSetter extends com.poesys.db.dto.AbstractObjectSetter<org.tair.db.locusdetail.ILocusGeneModel> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryLociLocusSetter object.
     */
    public QueryLociLocusSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.LocusGeneModel.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return lociLocusKey;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.ILocusGeneModel> getSql() {
      return new org.tair.db.locusdetail.sql.QueryLocusGeneModel();
    }

    @Override
    protected void set(org.tair.db.locusdetail.ILocusGeneModel dto) {
      // No status change, this is just filling in the object data.
      lociLocus = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated lociLocus is not null
      return lociLocus != null;
    }
  }


  /**
   * Foreign key object used by QueryLociLocusSetter nested class to query object
   */
  private IPrimaryKey lociLocusKey;
  
  /**
   * Set the foreign key lociLocusKey. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param lociLocusKey the foreign key
   */
  void setLociLocusKey(IPrimaryKey lociLocusKey) {
    this.lociLocusKey = lociLocusKey;
  }

  /**
   * Nested class that manages the polymorphism association data
   *
   * Source: AddAssociationKeyObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryPolymorphismSetter extends com.poesys.db.dto.AbstractObjectSetter<org.tair.db.locusdetail.ILocusPolymorphism> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryPolymorphismSetter object.
     */
    public QueryPolymorphismSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.LocusPolymorphism.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return polymorphismKey;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.ILocusPolymorphism> getSql() {
      return new org.tair.db.locusdetail.sql.QueryLocusPolymorphism();
    }

    @Override
    protected void set(org.tair.db.locusdetail.ILocusPolymorphism dto) {
      // No status change, this is just filling in the object data.
      polymorphism = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated polymorphism is not null
      return polymorphism != null;
    }
  }


  /**
   * Foreign key object used by QueryPolymorphismSetter nested class to query object
   */
  private IPrimaryKey polymorphismKey;
  
  /**
   * Set the foreign key polymorphismKey. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param polymorphismKey the foreign key
   */
  void setPolymorphismKey(IPrimaryKey polymorphismKey) {
    this.polymorphismKey = polymorphismKey;
  }


  /**
   * Create an empty PolymorphismSite for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractPolymorphismSite() {
    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();

    // Add the setters for the lociLocus property.
    querySetters.add(new QueryLociLocusSetter());

    // Add the setters for the polymorphism property.
    querySetters.add(new QueryPolymorphismSetter());
  }

  /**
   * Create a PolymorphismSite. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the PolymorphismSite
   * @param lociObject wraps an associated ILocusGeneModel object
   * @param polymorphismsObject wraps an associated ILocusPolymorphism object
   * @param geneModelName Attribute that is part of the association key
   * @param lociLocusTairObjectId Attribute that is part of the association key
   * @param polymorphismsLocusTairObjectId Attribute that is part of the association key
   * @param polymorphismName Attribute that is part of the association key
   * @param site the site on the gene model; indicates the gross position of the polymorphism
within each gene model (for example, exon, intron). Add the categories exon--non
synonymous mutation and exon--synonomous mutation. To save space, especially if
there are a lot of associated gene models, it’s OK to abbreviate exon to ‘E’
intron to ‘I’ etc. If text is abbreviated, provide a key so that the user knows
what each abbreviation means.
   */
  public AbstractPolymorphismSite(IPrimaryKey key, org.tair.db.locusdetail.ILocusGeneModel lociObject, org.tair.db.locusdetail.ILocusPolymorphism polymorphismsObject, java.lang.String geneModelName, java.lang.Long lociLocusTairObjectId, java.lang.Long polymorphismsLocusTairObjectId, java.lang.String polymorphismName, java.lang.String site) {
    this.key = key;

    this.geneModelName = geneModelName;

    if (geneModelName == null) {
      throw new com.poesys.db.InvalidParametersException("geneModelName is required for " + key.getValueList());
    }
    
    this.lociLocusTairObjectId = lociLocusTairObjectId;

    if (lociLocusTairObjectId == null) {
      throw new com.poesys.db.InvalidParametersException("lociLocusTairObjectId is required for " + key.getValueList());
    }
    
    this.polymorphismsLocusTairObjectId = polymorphismsLocusTairObjectId;

    if (polymorphismsLocusTairObjectId == null) {
      throw new com.poesys.db.InvalidParametersException("polymorphismsLocusTairObjectId is required for " + key.getValueList());
    }
    
    this.polymorphismName = polymorphismName;

    if (polymorphismName == null) {
      throw new com.poesys.db.InvalidParametersException("polymorphismName is required for " + key.getValueList());
    }
    
    this.site = site;

    if (site == null) {
      throw new com.poesys.db.InvalidParametersException("site is required for " + key.getValueList());
    }
    
    // Associated key object
    lociLocus = lociObject;
    
    // Associated key object
    polymorphism = polymorphismsObject;
    
    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    
    // Add the setters for the lociLocus property.
    querySetters.add(new QueryLociLocusSetter());
    
    // Set the internal key data member for the lociLocus object retrieval.
    lociLocusKey = org.tair.db.locusdetail.LocusdetailFactory.getLocusGeneModelPrimaryKey(geneModelName/* Source: AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + getAssociatedKeys Key: true */, lociLocusTairObjectId/* Source: AddNaturalKeyProperties + AddParentKeyAttributes + getAssociatedKeys Key: true */);
    // Add a setter to instantiate the required lociLocus object before insert.
    insertQuerySetters.add(new QueryLociLocusSetter());
    
    // Add the setters for the polymorphism property.
    querySetters.add(new QueryPolymorphismSetter());
    
    // Set the internal key data member for the polymorphism object retrieval.
    polymorphismKey = org.tair.db.locusdetail.LocusdetailFactory.getLocusPolymorphismPrimaryKey(polymorphismsLocusTairObjectId/* Source: AddNaturalKeyProperties + AddParentKeyAttributes + getAssociatedKeys Key: true */, polymorphismName/* Source: AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + getAssociatedKeys Key: true */);
    // Add a setter to instantiate the required polymorphism object before insert.
    insertQuerySetters.add(new QueryPolymorphismSetter());
  }

  @Override
  public boolean equals(Object arg0) {
    AbstractPolymorphismSite other = (AbstractPolymorphismSite)arg0;
    return other.key.equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    AbstractPolymorphismSite other = (AbstractPolymorphismSite)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.key.compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "org.tair.db.locusdetail";
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  @Override
  public java.sql.Connection getConnection() throws java.sql.SQLException {
    java.sql.Connection connection = null;
    
	/* 
	 * The resource bundle for the DTO's subsystem contains the suffix that
	 * distinguishes multiple versions of the subsystem in the database.properties
	 * file, such as "prod" or "test". Most database.properties files have only
	 * one implementation and use external facilities to switch between the
	 * databases (JNDI, for example, or producing different database.properties
	 * files in different setups). Use the subsystem resource bundle to get the
	 * suffix, then use the full subsystem name to get a connection factory for
	 * the DTO's subsystem, then use that factory to get a JDBC connection.
	 */
	java.util.ResourceBundle rb = 
	  java.util.ResourceBundle.getBundle("org.tair.db.locusdetail");
    String subsystem =
      "org.tair.db.locusdetail"
          + (rb.getString("suffix") == null
             || rb.getString("suffix").length() == 0 ? ""
              : "." + rb.getString("suffix"));
	  
	try {
	  connection = 
	    com.poesys.db.connection.ConnectionFactoryFactory.getInstance(subsystem).getConnection();
	} catch (com.poesys.db.InvalidParametersException e) {
	  throw new java.sql.SQLException(e.getMessage());
	} catch (java.io.IOException e) {
	  throw new java.sql.SQLException(e.getMessage());
	}
	
	return connection;
  }

  /**
   * Nested property site
   *
   * <p>
   * the site on the gene model; indicates the gross position of the polymorphism
   * within each gene model (for example, exon, intron). Add the categories exon--non
   * synonymous mutation and exon--synonomous mutation. To save space, especially if
   * there are a lot of associated gene models, it’s OK to abbreviate exon to ‘E’
   * intron to ‘I’ etc. If text is abbreviated, provide a key so that the user knows
   * what each abbreviation means.
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.String site;
  

  public java.lang.String getSite() {
    return site;
  }

  /**
   * Clear the site data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearSite() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the site.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the site on the gene model; indicates the gross position of the polymorphism
   * within each gene model (for example, exon, intron). Add the categories exon--non
   * synonymous mutation and exon--synonomous mutation. To save space, especially if
   * there are a lot of associated gene models, it’s OK to abbreviate exon to ‘E’
   * intron to ‘I’ etc. If text is abbreviated, provide a key so that the user knows
   * what each abbreviation means.
   * </p>
   *
   * @param site the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input site is null
   */
  public void setSite(java.lang.String site)
      throws com.poesys.db.InvalidParametersException {
    if (site == null) {
      throw new com.poesys.db.InvalidParametersException("site is required");
    }
    
    this.site = site;
    setChanged();
  }

  /**
   * Nested property lociLocus
   *
   * <p>
   * Associated object
   * </p>
   *
   * Added by AddAssociationKeyObjectProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private org.tair.db.locusdetail.ILocusGeneModel lociLocus;
  

  public org.tair.db.locusdetail.ILocusGeneModel getLociLocus() {
    return lociLocus;
  }

  /**
   * Clear the lociLocus data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearLociLocus() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property polymorphism
   *
   * <p>
   * Associated object
   * </p>
   *
   * Added by AddAssociationKeyObjectProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private org.tair.db.locusdetail.ILocusPolymorphism polymorphism;
  

  public org.tair.db.locusdetail.ILocusPolymorphism getPolymorphism() {
    return polymorphism;
  }

  /**
   * Clear the polymorphism data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearPolymorphism() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property geneModelName
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String geneModelName;
  

  public java.lang.String getGeneModelName() {
    return geneModelName;
  }

  /**
   * Clear the geneModelName data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearGeneModelName() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property lociLocusTairObjectId
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddNaturalKeyProperties + AddParentKeyAttributes + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long lociLocusTairObjectId;
  

  public java.lang.Long getLociLocusTairObjectId() {
    return lociLocusTairObjectId;
  }

  /**
   * Clear the lociLocusTairObjectId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearLociLocusTairObjectId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property polymorphismsLocusTairObjectId
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddNaturalKeyProperties + AddParentKeyAttributes + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long polymorphismsLocusTairObjectId;
  

  public java.lang.Long getPolymorphismsLocusTairObjectId() {
    return polymorphismsLocusTairObjectId;
  }

  /**
   * Clear the polymorphismsLocusTairObjectId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearPolymorphismsLocusTairObjectId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property polymorphismName
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String polymorphismName;
  

  public java.lang.String getPolymorphismName() {
    return polymorphismName;
  }

  /**
   * Clear the polymorphismName data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearPolymorphismName() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {
  }
}