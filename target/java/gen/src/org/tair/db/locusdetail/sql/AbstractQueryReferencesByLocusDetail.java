/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractQueryAssociatedOneToManyObjects.vsl

package org.tair.db.locusdetail.sql;


import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.poesys.db.ConstraintViolationException;
import com.poesys.db.InvalidParametersException;
import com.poesys.db.dao.query.IParameterizedQuerySql;
import com.poesys.db.pk.IPrimaryKey;


/**
 * <p>
 * A query Command pattern object that implements a SQL query of a collection of 
 * Reference objects using the primary key of an associated 
 * LocusDetail object through the association References. This
 * is a many-to-one association from Reference to LocusDetail.
 * </p>
 * <p>
 * This SQL specification contains a SQL statement that queries a collection of
 * Reference objects from the database using the foreign key type
 * LocusDetail.
 * </p>
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractQueryReferencesByLocusDetail 
    implements IParameterizedQuerySql<org.tair.db.locusdetail.IReference, org.tair.db.locusdetail.ILocusDetail> {
  /** SQL query statement for Reference */
  private static final String SQL =
    "SELECT Reference.locusTairObjectId, Reference.referenceTairObjectId, Reference.title, Reference.authors, Reference.publicationYear, Reference.locusCount, Reference.annotated, ConferenceAbstract.conference, JournalArticle.journal, JournalArticle.pubmedId, CASE WHEN ConferenceAbstract.locusTairObjectId IS NOT NULL THEN 'ConferenceAbstract' WHEN ConferenceAbstract.referenceTairObjectId IS NOT NULL THEN 'ConferenceAbstract' WHEN JournalArticle.locusTairObjectId IS NOT NULL THEN 'JournalArticle' WHEN JournalArticle.referenceTairObjectId IS NOT NULL THEN 'JournalArticle' ELSE NULL END AS discriminant FROM Reference LEFT OUTER JOIN ConferenceAbstract ConferenceAbstract ON Reference.locusTairObjectId = ConferenceAbstract.locusTairObjectId AND Reference.referenceTairObjectId = ConferenceAbstract.referenceTairObjectId LEFT OUTER JOIN JournalArticle JournalArticle ON Reference.locusTairObjectId = JournalArticle.locusTairObjectId AND Reference.referenceTairObjectId = JournalArticle.referenceTairObjectId WHERE Reference.locusTairObjectId = ?";

  public void bindParameters(PreparedStatement stmt, org.tair.db.locusdetail.ILocusDetail parameters)
      throws SQLException {
    // Set the parameters starting with the first parameter.
    parameters.getPrimaryKey().setParams(stmt, 1);
  }

  public String getParameterValues(org.tair.db.locusdetail.ILocusDetail parameters) {
    // Create the output string with the key parameters.
    return parameters.getPrimaryKey().getValueList();
  }

  public org.tair.db.locusdetail.IReference getData(ResultSet rs) throws SQLException,
      ConstraintViolationException {
    return org.tair.db.locusdetail.LocusdetailFactory.getReferenceData(getPrimaryKey(rs), rs);
  }

  public IPrimaryKey getPrimaryKey(ResultSet rs) throws SQLException,
      InvalidParametersException {
    return org.tair.db.locusdetail.LocusdetailFactory.getReferencePrimaryKey(rs, "");
  }

  public String getSql() {
    return SQL;
  }
}