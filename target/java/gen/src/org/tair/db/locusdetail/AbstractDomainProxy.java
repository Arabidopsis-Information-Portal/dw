/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDtoProxy.vsl

package org.tair.db.locusdetail;


import com.poesys.db.dto.AbstractLazyLoadingDtoProxy;


/**
 * <p>
 * A data-access layer data-transfer object (DTO) lazy-loading proxy for the 
 * Domain. This class is an abstract class that contains AndroMDA 
 * generated code; change nothing in this class. Instead, override any methods 
 * in the concrete subclass generated in the same package. AndroMDA will 
 * overwrite this class each time you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * A named protein domain
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractDomainProxy extends AbstractLazyLoadingDtoProxy implements IDomain {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  
    // Setter strategy nested classes for multiple-object associations

  /** Flag indicating whether the model property has been loaded */
  boolean modelLoaded = false;

  /**
   * Query setter for lazily querying nested model collection
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryModelByDomain
   */
  private class QueryModelSetter 
      extends com.poesys.db.dto.AbstractLazyListSetter<org.tair.db.locusdetail.IProteinModel, IDomain, java.util.Collection<org.tair.db.locusdetail.IProteinModel>> {
    /** Serial version UID for Serializable object */
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryModelSetter object.
     */
    public QueryModelSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.ProteinModel.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected IDomain getParametersDto() {
      return AbstractDomainProxy.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.tair.db.locusdetail.IProteinModel, IDomain> getSql() {
      return new org.tair.db.locusdetail.sql.QueryModelByDomain();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.locusdetail.IProteinModel> collection) {
      try {
        // Register the observer parent with the subject children.
        for (org.tair.db.locusdetail.IProteinModel child : collection) {
          child.attach(AbstractDomainProxy.this.dto,
                              com.poesys.db.dao.DataEvent.MARKED_DELETED);
          child.attach(AbstractDomainProxy.this.dto, com.poesys.db.dao.DataEvent.DELETE);
        }
        setModel(collection);
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Just lazy loading here, not actually setting. Ignore this exception.        
      }
    }

    @Override
    public boolean isSet() {
      // Set if proxy has loaded model
      return modelLoaded;
    }
  }


  /**
   * Read-Object setter for de-serializing nested model collection
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryProteinModel
   */
  private class ReadModelSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.tair.db.locusdetail.IProteinModel> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadModelSetter object to read the model collection.
     */
    public ReadModelSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.ProteinModel.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.locusdetail.IProteinModel> getObjectCollection() {
      java.util.Collection<org.tair.db.locusdetail.IProteinModel> model = null;
      try {
        model = ((org.tair.db.locusdetail.Domain)dto).getModel();
      } catch (java.sql.SQLException e) {
        throw new RuntimeException("SQL Exception on collection query: " + e.getMessage(), e);
      }
      return model;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.tair.db.locusdetail.Domain)dto).modelKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.IProteinModel> getSql() {
      return new org.tair.db.locusdetail.sql.QueryProteinModel();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.locusdetail.IProteinModel> collection) {
      ((org.tair.db.locusdetail.Domain)dto).model = collection;
    }
  }



  /**
   * Read-Object setter for de-serializing nested proteinModelDomain collection
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryProteinModelDomain
   */
  private class ReadProteinModelDomainSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.tair.db.locusdetail.IProteinModelDomain> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadProteinModelDomainSetter object to read the proteinModelDomain collection.
     */
    public ReadProteinModelDomainSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.ProteinModelDomain.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.locusdetail.IProteinModelDomain> getObjectCollection() {
      java.util.Collection<org.tair.db.locusdetail.IProteinModelDomain> proteinModelDomain =  ((org.tair.db.locusdetail.Domain)dto).getProteinModelDomain();
      return proteinModelDomain;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.tair.db.locusdetail.Domain)dto).proteinModelDomainKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.IProteinModelDomain> getSql() {
      return new org.tair.db.locusdetail.sql.QueryProteinModelDomain();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.locusdetail.IProteinModelDomain> collection) {
      ((org.tair.db.locusdetail.Domain)dto).proteinModelDomain = collection;
    }
  }

  /**
   * Create a DomainProxy. The concrete subclass must call this constructor.
   *
   * @param dto the DTO to proxy
   */
  public AbstractDomainProxy(Domain dto) {
    super(dto);

    // Setter arrays
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters.add(new ReadModelSetter());
    readObjectSetters.add(new ReadProteinModelDomainSetter());
  }

  @Override
  public boolean equals(Object obj) {
    AbstractDomainProxy otherProxy = (AbstractDomainProxy)obj;
    return ((Domain)dto).equals(otherProxy.dto);
  }

  @Override
  public int hashCode() {
    return ((Domain)dto).hashCode();
  }

  // Local properties (attributes, associations, and association classes)

  // Source: AddNaturalKeyProperties
  public java.lang.String getAccession() {
    return ((Domain)dto).getAccession();
  }

  // Source: AddLocalAttributeProperties
  public java.lang.String getAccessionUrl() {
    return ((Domain)dto).getAccessionUrl();
  }

  // Source: AddLocalAttributeProperties
  public java.lang.String getDomain() {
    return ((Domain)dto).getDomain();
  }

  // Source: AddLocalAttributeProperties
  public java.lang.String getDomainUrl() {
    return ((Domain)dto).getDomainUrl();
  }

  // Source: AddLocalAttributeProperties
  public java.lang.String getDatabase() {
    return ((Domain)dto).getDatabase();
  }

  // Source: AddLocalAttributeProperties
  public java.lang.String getDatabaseUrl() {
    return ((Domain)dto).getDatabaseUrl();
  }

  // Source: AddLocalAttributeProperties
  public java.lang.String getStructuralClassType() {
    return ((Domain)dto).getStructuralClassType();
  }

  // Source: AddLocalAttributeProperties
  public java.lang.String getClassUrl() {
    return ((Domain)dto).getClassUrl();
  }

  // Source: TransformToProperty + AddToManyAssociationCollectionProperties
  public java.util.Collection<org.tair.db.locusdetail.IProteinModel> getModel() throws java.sql.SQLException {
    // Lazy-load the local property model if not loaded.
    if (!modelLoaded) {
      try {
        com.poesys.db.dto.ISet setter = new QueryModelSetter();
        setter.set(dto.getConnection());
      } catch (com.poesys.db.InvalidParametersException e) {
        throw new java.sql.SQLException(e.getMessage());
      }
    }
    return ((Domain)dto).getModel();
  }

  public void clearModel() {
    // Only clear if loaded already.
    if (modelLoaded) {
      try {
        // Call the local lazy property setter to clear the property.
        ((Domain)dto).setModel(null);
        ((Domain)dto).undoStatus();
        modelLoaded = false;
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Couldn't set status to CHANGED, ignore because we don't want it set
      }
    }
  }

  /**
   * Set the model from a lazy-loading proxy. The IDbDto-
   * derived interface does not contain this method.
   *
   * @param model the lazily loaded value to assign
   */
  void setModel(java.util.Collection<org.tair.db.locusdetail.IProteinModel> model)
      {
    ((Domain)dto).setModel(model);
    // Mark the property loaded and undo the status change.
    dto.undoStatus();
    modelLoaded = true;
  }

  // Source: AddAssociationClassCollectionProperties
  public java.util.Collection<org.tair.db.locusdetail.IProteinModelDomain> getProteinModelDomain() {
    return ((Domain)dto).getProteinModelDomain();
  }

  public void markChildrenDeleted() throws com.poesys.db.dto.DtoStatusException {
  	((Domain)dto).markChildrenDeleted();
  }
}