/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package org.tair.db.locusdetail;


import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;
import com.poesys.db.dto.DtoStatusException;


/**
 * <p>
 * A data-access layer data-transfer object for the ModelFeature. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * A gene feature (orf, intron, exon, cdr, 5', 3') of a gene model of a locus,
 * including UTR and CDS information; each object is identified by the locus, the
 * gene model, the feature type (intron/exon), and the feature number (the order of
 * the feature within the region); the n features of each type are ordered by the
 * feature numbers from the 5' end (1) to the 3' end (n), starting with exon 1.
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>CompositeKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: false
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractModelFeature extends AbstractDto implements IModelFeature {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  // Setter strategy nested classes for single-object associations
  
  /**
   * Nested class that manages the geneModel association data
   *
   * Source: AddToOneAssociationRequiredObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryGeneModelSetter extends com.poesys.db.dto.AbstractObjectSetter<org.tair.db.locusdetail.ILocusGeneModel> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryGeneModelSetter object.
     */
    public QueryGeneModelSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.LocusGeneModel.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return geneModelKey;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.ILocusGeneModel> getSql() {
      return new org.tair.db.locusdetail.sql.QueryLocusGeneModel();
    }

    @Override
    protected void set(org.tair.db.locusdetail.ILocusGeneModel dto) {
      // No status change, this is just filling in the object data.
      geneModel = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated geneModel is not null
      return geneModel != null;
    }
  }


  /**
   * Foreign key object used by QueryGeneModelSetter nested class to query object
   */
  private IPrimaryKey geneModelKey;
  
  /**
   * Set the foreign key geneModelKey. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param geneModelKey the foreign key
   */
  void setGeneModelKey(IPrimaryKey geneModelKey) {
    this.geneModelKey = geneModelKey;
  }


  /**
   * Create an empty ModelFeature for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractModelFeature() {
    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();

    // Add the setters for the geneModel property.
    querySetters.add(new QueryGeneModelSetter());
  }

  /**
   * Create a ModelFeature. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the ModelFeature
   * @param geneModelName composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param locusTairObjectId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param featureType the kind of feature: intron or exon
   * @param featureNumber an integer that uniquely identifies the feature within the locus, gene model,
and feature type; also orders the feature within the feature type
   * @param start the starting coordinate for the feature within the gene
   * @param end the ending coordinate for the feature within the gene
   * @param agiStart the starting coordinate for the feature on the chromosome
   * @param agiEnd the ending coordinate of the feature on the chromosome
   */
  public AbstractModelFeature(IPrimaryKey key, java.lang.String geneModelName, java.lang.Long locusTairObjectId, java.lang.String featureType, java.lang.Integer featureNumber, java.lang.Integer start, java.lang.Integer end, java.lang.Integer agiStart, java.lang.Integer agiEnd) {
    this.key = key;

    this.geneModelName = geneModelName;

    if (geneModelName == null) {
      throw new com.poesys.db.InvalidParametersException("geneModelName is required for " + key.getValueList());
    }
    
    this.locusTairObjectId = locusTairObjectId;

    if (locusTairObjectId == null) {
      throw new com.poesys.db.InvalidParametersException("locusTairObjectId is required for " + key.getValueList());
    }
    
    this.featureType = featureType;

    if (featureType == null) {
      throw new com.poesys.db.InvalidParametersException("featureType is required for " + key.getValueList());
    }
    
    this.featureNumber = featureNumber;

    if (featureNumber == null) {
      throw new com.poesys.db.InvalidParametersException("featureNumber is required for " + key.getValueList());
    }
    
    this.start = start;

    if (start == null) {
      throw new com.poesys.db.InvalidParametersException("start is required for " + key.getValueList());
    }
    
    this.end = end;

    if (end == null) {
      throw new com.poesys.db.InvalidParametersException("end is required for " + key.getValueList());
    }
    
    this.agiStart = agiStart;

    if (agiStart == null) {
      throw new com.poesys.db.InvalidParametersException("agiStart is required for " + key.getValueList());
    }
    
    this.agiEnd = agiEnd;

    if (agiEnd == null) {
      throw new com.poesys.db.InvalidParametersException("agiEnd is required for " + key.getValueList());
    }
    
    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    
    // Add the setters for the geneModel property.
    querySetters.add(new QueryGeneModelSetter());
    
    // Set the internal key data member for the geneModel object retrieval.
    geneModelKey = org.tair.db.locusdetail.LocusdetailFactory.getLocusGeneModelPrimaryKey(geneModelName/* Source: AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + addAssociationForeignKeys: geneModelName Key: true */, locusTairObjectId/* Source: AddNaturalKeyProperties + AddParentKeyAttributes + addAssociationForeignKeys: locusTairObjectId Key: true */);
    // Add a setter to instantiate the required geneModel object before insert.
    insertQuerySetters.add(new QueryGeneModelSetter());
  }

  @Override
  public boolean equals(Object arg0) {
    AbstractModelFeature other = (AbstractModelFeature)arg0;
    return other.key.equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    AbstractModelFeature other = (AbstractModelFeature)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.key.compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "org.tair.db.locusdetail";
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  @Override
  public java.sql.Connection getConnection() throws java.sql.SQLException {
    java.sql.Connection connection = null;
    
	/* 
	 * The resource bundle for the DTO's subsystem contains the suffix that
	 * distinguishes multiple versions of the subsystem in the database.properties
	 * file, such as "prod" or "test". Most database.properties files have only
	 * one implementation and use external facilities to switch between the
	 * databases (JNDI, for example, or producing different database.properties
	 * files in different setups). Use the subsystem resource bundle to get the
	 * suffix, then use the full subsystem name to get a connection factory for
	 * the DTO's subsystem, then use that factory to get a JDBC connection.
	 */
	java.util.ResourceBundle rb = 
	  java.util.ResourceBundle.getBundle("org.tair.db.locusdetail");
    String subsystem =
      "org.tair.db.locusdetail"
          + (rb.getString("suffix") == null
             || rb.getString("suffix").length() == 0 ? ""
              : "." + rb.getString("suffix"));
	  
	try {
	  connection = 
	    com.poesys.db.connection.ConnectionFactoryFactory.getInstance(subsystem).getConnection();
	} catch (com.poesys.db.InvalidParametersException e) {
	  throw new java.sql.SQLException(e.getMessage());
	} catch (java.io.IOException e) {
	  throw new java.sql.SQLException(e.getMessage());
	}
	
	return connection;
  }

  /**
   * Nested property geneModelName
   *
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   *
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddParentKeyAttributes
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String geneModelName;
  

  public java.lang.String getGeneModelName() {
    return geneModelName;
  }

  /**
   * Clear the geneModelName data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearGeneModelName() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property locusTairObjectId
   *
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   *
   * Added by AddNaturalKeyProperties + AddParentKeyAttributes + AddParentKeyAttributes
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long locusTairObjectId;
  

  public java.lang.Long getLocusTairObjectId() {
    return locusTairObjectId;
  }

  /**
   * Clear the locusTairObjectId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearLocusTairObjectId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property featureType
   *
   * <p>
   * the kind of feature: intron or exon
   * </p>
   *
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String featureType;
  

  public java.lang.String getFeatureType() {
    return featureType;
  }

  /**
   * Clear the featureType data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearFeatureType() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property featureNumber
   *
   * <p>
   * an integer that uniquely identifies the feature within the locus, gene model,
   * and feature type; also orders the feature within the feature type
   * </p>
   *
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Integer featureNumber;
  

  public java.lang.Integer getFeatureNumber() {
    return featureNumber;
  }

  /**
   * Clear the featureNumber data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearFeatureNumber() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property start
   *
   * <p>
   * the starting coordinate for the feature within the gene
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Integer start;
  

  public java.lang.Integer getStart() {
    return start;
  }

  /**
   * Clear the start data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearStart() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property end
   *
   * <p>
   * the ending coordinate for the feature within the gene
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Integer end;
  

  public java.lang.Integer getEnd() {
    return end;
  }

  /**
   * Clear the end data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearEnd() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property agiStart
   *
   * <p>
   * the starting coordinate for the feature on the chromosome
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Integer agiStart;
  

  public java.lang.Integer getAgiStart() {
    return agiStart;
  }

  /**
   * Clear the agiStart data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearAgiStart() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property agiEnd
   *
   * <p>
   * the ending coordinate of the feature on the chromosome
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Integer agiEnd;
  

  public java.lang.Integer getAgiEnd() {
    return agiEnd;
  }

  /**
   * Clear the agiEnd data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearAgiEnd() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property geneModel
   *
   * <p>
   * the gene model to which the feature belongs
   * </p>
   *
   * Added by AddToOneAssociationRequiredObjectProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private org.tair.db.locusdetail.ILocusGeneModel geneModel;
  

  public org.tair.db.locusdetail.ILocusGeneModel getGeneModel() {
    return geneModel;
  }

  /**
   * Clear the geneModel data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearGeneModel() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {
  }
}