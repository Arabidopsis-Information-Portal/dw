/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package org.tair.db.locusdetail;


import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;
import com.poesys.db.dto.DtoStatusException;


/**
 * <p>
 * A data-access layer data-transfer object for the LocusGeneModel. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * The set of gene models of the parent locus excluding the representative gene
 * model
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>CompositeKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: false
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractLocusGeneModel extends AbstractDto implements ILocusGeneModel {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  // Setter strategy nested classes for single-object associations
  
  /**
   * Nested class that manages the locus association data
   *
   * Source: AddToOneAssociationRequiredObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryLocusSetter extends com.poesys.db.dto.AbstractObjectSetter<org.tair.db.locusdetail.ILocusDetail> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryLocusSetter object.
     */
    public QueryLocusSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.LocusDetail.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return locusKey;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.locusdetail.ILocusDetail> getSql() {
      return new org.tair.db.locusdetail.sql.QueryLocusDetail();
    }

    @Override
    protected void set(org.tair.db.locusdetail.ILocusDetail dto) {
      // No status change, this is just filling in the object data.
      locus = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated locus is not null
      return locus != null;
    }
  }


  /**
   * Foreign key object used by QueryLocusSetter nested class to query object
   */
  private IPrimaryKey locusKey;
  
  /**
   * Set the foreign key locusKey. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param locusKey the foreign key
   */
  void setLocusKey(IPrimaryKey locusKey) {
    this.locusKey = locusKey;
  }

  // Setter strategy nested classes for multiple-object associations

   
   
  /**
   * Query setter for querying nested locusGeneModelAnnotation
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryLocusGeneModelAnnotationByLocusGeneModel
   */
  private class QueryLocusGeneModelAnnotationSetter 
      extends com.poesys.db.dto.AbstractListSetter<org.tair.db.locusdetail.ILocusGeneModelAnnotation, ILocusGeneModel, java.util.Collection<org.tair.db.locusdetail.ILocusGeneModelAnnotation>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryLocusGeneModelAnnotationSetter object.
     */
    public QueryLocusGeneModelAnnotationSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.LocusGeneModelAnnotation.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ILocusGeneModel getParametersDto() {
      return AbstractLocusGeneModel.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.tair.db.locusdetail.ILocusGeneModelAnnotation, ILocusGeneModel> getSql() {
      return new org.tair.db.locusdetail.sql.QueryLocusGeneModelAnnotationByLocusGeneModel();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.locusdetail.ILocusGeneModelAnnotation> list) {
      // No status change; this is just filling in the object data.
      locusGeneModelAnnotation = list;
      // Add the primary keys to the serialized key list if there are any.
      if (locusGeneModelAnnotation != null) {
        for (com.poesys.db.dto.IDbDto object : locusGeneModelAnnotation) {
          locusGeneModelAnnotationKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated locusGeneModelAnnotation list is not null
      return locusGeneModelAnnotation != null;
    }
  }

  /**
   * Insert setter for inserting nested locusGeneModelAnnotation.
   *
   * @see org.tair.db.locusdetail.sql.InsertLocusGeneModelAnnotation
   */
  private class InsertLocusGeneModelAnnotationSetter 
      extends com.poesys.db.dto.AbstractBatchInsertSetter<org.tair.db.locusdetail.ILocusGeneModelAnnotation, java.util.Collection<org.tair.db.locusdetail.ILocusGeneModelAnnotation>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;
    
    // locusGeneModelAnnotation source: AddAssociationClassCollectionProperties

    /**
     * Create an InsertLocusGeneModelAnnotationSetter object.
     */
    public InsertLocusGeneModelAnnotationSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected int getBatchSize() {
      return BATCH_SIZE;
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.LocusGeneModelAnnotation.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.locusdetail.ILocusGeneModelAnnotation> getDtos() {
      return locusGeneModelAnnotation;
    }

    @Override
    protected com.poesys.db.dao.insert.IInsertSql<org.tair.db.locusdetail.ILocusGeneModelAnnotation> getSql() {
      return new org.tair.db.locusdetail.sql.InsertLocusGeneModelAnnotation();
    }
  }

  /**
   * Setter for processing added locusGeneModelAnnotation and updated locusGeneModelAnnotation.
   * Deleted locusGeneModelAnnotation are deleted in the database cascade delete.
   */
   
  private class UpdateLocusGeneModelAnnotationSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<org.tair.db.locusdetail.ILocusGeneModelAnnotation, java.util.Collection<org.tair.db.locusdetail.ILocusGeneModelAnnotation>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdateLocusGeneModelAnnotationSetter object.
     */
    public UpdateLocusGeneModelAnnotationSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, java.util.Collection<org.tair.db.locusdetail.ILocusGeneModelAnnotation> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
        // locusGeneModelAnnotation source: AddAssociationClassCollectionProperties
        // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.locusdetail.ILocusGeneModelAnnotation> factory = 
        manager.getFactory(org.tair.db.locusdetail.LocusGeneModelAnnotation.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<org.tair.db.locusdetail.ILocusGeneModelAnnotation> dao =
        factory.getUpdateBatch(new org.tair.db.locusdetail.sql.UpdateLocusGeneModelAnnotation());
      dao.update(connection, dtos, BATCH_SIZE);
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, java.util.Collection<org.tair.db.locusdetail.ILocusGeneModelAnnotation> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.locusdetail.ILocusGeneModelAnnotation> factory = 
        manager.getFactory(org.tair.db.locusdetail.LocusGeneModelAnnotation.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<org.tair.db.locusdetail.ILocusGeneModelAnnotation> dao = 
        factory.getDeleteBatch(new org.tair.db.locusdetail.sql.DeleteLocusGeneModelAnnotation());
      dao.delete(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.sql.Connection connection, java.util.Collection<org.tair.db.locusdetail.ILocusGeneModelAnnotation> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.locusdetail.ILocusGeneModelAnnotation> factory = 
        manager.getFactory(org.tair.db.locusdetail.LocusGeneModelAnnotation.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<org.tair.db.locusdetail.ILocusGeneModelAnnotation> dao =
        factory.getInsertBatch(new org.tair.db.locusdetail.sql.InsertLocusGeneModelAnnotation());
      dao.insert(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected java.util.Collection<org.tair.db.locusdetail.ILocusGeneModelAnnotation> getDtos() {
      return locusGeneModelAnnotation;
    }
    
    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.LocusGeneModelAnnotation.class.getName();
    }
  }

  /**
   * Query setter for querying nested polymorphismSite
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryPolymorphismSiteByLocusGeneModel
   */
  private class QueryPolymorphismSiteSetter 
      extends com.poesys.db.dto.AbstractListSetter<org.tair.db.locusdetail.IPolymorphismSite, ILocusGeneModel, java.util.Collection<org.tair.db.locusdetail.IPolymorphismSite>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryPolymorphismSiteSetter object.
     */
    public QueryPolymorphismSiteSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.PolymorphismSite.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ILocusGeneModel getParametersDto() {
      return AbstractLocusGeneModel.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.tair.db.locusdetail.IPolymorphismSite, ILocusGeneModel> getSql() {
      return new org.tair.db.locusdetail.sql.QueryPolymorphismSiteByLocusGeneModel();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.locusdetail.IPolymorphismSite> list) {
      // No status change; this is just filling in the object data.
      polymorphismSite = list;
      // Add the primary keys to the serialized key list if there are any.
      if (polymorphismSite != null) {
        for (com.poesys.db.dto.IDbDto object : polymorphismSite) {
          polymorphismSiteKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated polymorphismSite list is not null
      return polymorphismSite != null;
    }
  }

  /**
   * Insert setter for inserting nested polymorphismSite.
   *
   * @see org.tair.db.locusdetail.sql.InsertPolymorphismSite
   */
  private class InsertPolymorphismSiteSetter 
      extends com.poesys.db.dto.AbstractBatchInsertSetter<org.tair.db.locusdetail.IPolymorphismSite, java.util.Collection<org.tair.db.locusdetail.IPolymorphismSite>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;
    
    // polymorphismSite source: AddAssociationClassCollectionProperties

    /**
     * Create an InsertPolymorphismSiteSetter object.
     */
    public InsertPolymorphismSiteSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected int getBatchSize() {
      return BATCH_SIZE;
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.PolymorphismSite.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.locusdetail.IPolymorphismSite> getDtos() {
      return polymorphismSite;
    }

    @Override
    protected com.poesys.db.dao.insert.IInsertSql<org.tair.db.locusdetail.IPolymorphismSite> getSql() {
      return new org.tair.db.locusdetail.sql.InsertPolymorphismSite();
    }
  }

  /**
   * Setter for processing added polymorphismSite and updated polymorphismSite.
   * Deleted polymorphismSite are deleted in the database cascade delete.
   */
   
  private class UpdatePolymorphismSiteSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<org.tair.db.locusdetail.IPolymorphismSite, java.util.Collection<org.tair.db.locusdetail.IPolymorphismSite>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdatePolymorphismSiteSetter object.
     */
    public UpdatePolymorphismSiteSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, java.util.Collection<org.tair.db.locusdetail.IPolymorphismSite> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
        // polymorphismSite source: AddAssociationClassCollectionProperties
        // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.locusdetail.IPolymorphismSite> factory = 
        manager.getFactory(org.tair.db.locusdetail.PolymorphismSite.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<org.tair.db.locusdetail.IPolymorphismSite> dao =
        factory.getUpdateBatch(new org.tair.db.locusdetail.sql.UpdatePolymorphismSite());
      dao.update(connection, dtos, BATCH_SIZE);
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, java.util.Collection<org.tair.db.locusdetail.IPolymorphismSite> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.locusdetail.IPolymorphismSite> factory = 
        manager.getFactory(org.tair.db.locusdetail.PolymorphismSite.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<org.tair.db.locusdetail.IPolymorphismSite> dao = 
        factory.getDeleteBatch(new org.tair.db.locusdetail.sql.DeletePolymorphismSite());
      dao.delete(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.sql.Connection connection, java.util.Collection<org.tair.db.locusdetail.IPolymorphismSite> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.locusdetail.IPolymorphismSite> factory = 
        manager.getFactory(org.tair.db.locusdetail.PolymorphismSite.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<org.tair.db.locusdetail.IPolymorphismSite> dao =
        factory.getInsertBatch(new org.tair.db.locusdetail.sql.InsertPolymorphismSite());
      dao.insert(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected java.util.Collection<org.tair.db.locusdetail.IPolymorphismSite> getDtos() {
      return polymorphismSite;
    }
    
    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.PolymorphismSite.class.getName();
    }
  }

  /**
   * Query setter for querying nested features
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryFeaturesByLocusGeneModel
   */
  private class QueryFeaturesSetter 
      extends com.poesys.db.dto.AbstractListSetter<org.tair.db.locusdetail.IModelFeature, ILocusGeneModel, java.util.List<org.tair.db.locusdetail.IModelFeature>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryFeaturesSetter object.
     */
    public QueryFeaturesSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.ModelFeature.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ILocusGeneModel getParametersDto() {
      return AbstractLocusGeneModel.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.tair.db.locusdetail.IModelFeature, ILocusGeneModel> getSql() {
      return new org.tair.db.locusdetail.sql.QueryFeaturesByLocusGeneModel();
    }

    @Override
    protected void set(java.util.List<org.tair.db.locusdetail.IModelFeature> list) {
      // No status change; this is just filling in the object data.
      features = list;
      // Add the primary keys to the serialized key list if there are any.
      if (features != null) {
        for (com.poesys.db.dto.IDbDto object : features) {
          featuresKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated features list is not null
      return features != null;
    }
  }
   
  /**
   * Query setter for querying nested cdnas
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryCdnasByLocusGeneModel
   */
  private class QueryCdnasSetter 
      extends com.poesys.db.dto.AbstractListSetter<org.tair.db.locusdetail.ILocusGeneModelCdna, ILocusGeneModel, java.util.Collection<org.tair.db.locusdetail.ILocusGeneModelCdna>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryCdnasSetter object.
     */
    public QueryCdnasSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.LocusGeneModelCdna.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ILocusGeneModel getParametersDto() {
      return AbstractLocusGeneModel.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.tair.db.locusdetail.ILocusGeneModelCdna, ILocusGeneModel> getSql() {
      return new org.tair.db.locusdetail.sql.QueryCdnasByLocusGeneModel();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.locusdetail.ILocusGeneModelCdna> list) {
      // No status change; this is just filling in the object data.
      cdnas = list;
      // Add the primary keys to the serialized key list if there are any.
      if (cdnas != null) {
        for (com.poesys.db.dto.IDbDto object : cdnas) {
          cdnasKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated cdnas list is not null
      return cdnas != null;
    }
  }
   
  /**
   * Query setter for querying nested proteinModel
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.locusdetail.sql.QueryProteinModelByLocusGeneModel
   */
  private class QueryProteinModelSetter 
      extends com.poesys.db.dto.AbstractListSetter<org.tair.db.locusdetail.IProteinModel, ILocusGeneModel, java.util.Collection<org.tair.db.locusdetail.IProteinModel>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryProteinModelSetter object.
     */
    public QueryProteinModelSetter() {
      super("org.tair.db.locusdetail", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.locusdetail.ProteinModel.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ILocusGeneModel getParametersDto() {
      return AbstractLocusGeneModel.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.tair.db.locusdetail.IProteinModel, ILocusGeneModel> getSql() {
      return new org.tair.db.locusdetail.sql.QueryProteinModelByLocusGeneModel();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.locusdetail.IProteinModel> list) {
      // No status change; this is just filling in the object data.
      proteinModel = list;
      // Add the primary keys to the serialized key list if there are any.
      if (proteinModel != null) {
        for (com.poesys.db.dto.IDbDto object : proteinModel) {
          proteinModelKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated proteinModel list is not null
      return proteinModel != null;
    }
  }
   
  /**
   * Create an empty LocusGeneModel for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractLocusGeneModel() {
    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();

    // Add the setters for the locus property.
    querySetters.add(new QueryLocusSetter());
    
    // Add the many-to-many collection setters for the annotation property.
    
    // Add the many-to-many collection setters for the polymorphism property.
    
    // Add the many-to-many collection setters for the locusGeneModelAnnotation property.
    querySetters.add(new QueryLocusGeneModelAnnotationSetter());
    insertSetters.add(new InsertLocusGeneModelAnnotationSetter());
    postSetters.add(new UpdateLocusGeneModelAnnotationSetter());
    
    // Add the many-to-many collection setters for the polymorphismSite property.
    querySetters.add(new QueryPolymorphismSiteSetter());
    insertSetters.add(new InsertPolymorphismSiteSetter());
    postSetters.add(new UpdatePolymorphismSiteSetter());
    
    // Add the many-to-many collection setters for the features property.
    querySetters.add(new QueryFeaturesSetter());
    
    // Add the many-to-many collection setters for the cdnas property.
    querySetters.add(new QueryCdnasSetter());
    
    // Add the many-to-many collection setters for the proteinModel property.
    querySetters.add(new QueryProteinModelSetter());
  }

  /**
   * Create a LocusGeneModel. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the LocusGeneModel
   * @param locusTairObjectId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param geneModelName gene model name; usually in the format ATcGnnnnn.n, where the first part is the
locus name and the part following the dot is the model number; unique within the
locus
   * @param geneModelType the type of the gene model, such as "protein coding"
   * @param representative whether this gene model is the representative gene model for the parent locus,
meaning it acts as the default gene model in situations where no gene model is
specified
   * @param spliceVariant whether this gene model represents a splice variant
   * @param computationalDescription a computationally generated description of the gene model, or "none" if there is
no such description
   * @param curatedSummary an optional curator-written summary for the gene model; null if the summary is
the same as the curated summary for the parent locus
   * @param confidence an optional confidence score string that rates the gene models according to some
confidence algorithm
   */
  public AbstractLocusGeneModel(IPrimaryKey key, java.lang.Long locusTairObjectId, java.lang.String geneModelName, java.lang.String geneModelType, java.lang.Boolean representative, java.lang.Boolean spliceVariant, java.lang.String computationalDescription, java.lang.String curatedSummary, java.lang.String confidence) {
    this.key = key;

    this.locusTairObjectId = locusTairObjectId;

    if (locusTairObjectId == null) {
      throw new com.poesys.db.InvalidParametersException("locusTairObjectId is required for " + key.getValueList());
    }
    
    this.geneModelName = geneModelName;

    if (geneModelName == null) {
      throw new com.poesys.db.InvalidParametersException("geneModelName is required for " + key.getValueList());
    }
    
    this.geneModelType = geneModelType;

    if (geneModelType == null) {
      throw new com.poesys.db.InvalidParametersException("geneModelType is required for " + key.getValueList());
    }
    
    this.representative = representative;

    if (representative == null) {
      throw new com.poesys.db.InvalidParametersException("representative is required for " + key.getValueList());
    }
    
    this.spliceVariant = spliceVariant;

    if (spliceVariant == null) {
      throw new com.poesys.db.InvalidParametersException("spliceVariant is required for " + key.getValueList());
    }
    
    this.computationalDescription = computationalDescription;

    if (computationalDescription == null) {
      throw new com.poesys.db.InvalidParametersException("computationalDescription is required for " + key.getValueList());
    }
    
    this.curatedSummary = curatedSummary;

    this.confidence = confidence;

    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    
    // Add the setters for the locus property.
    querySetters.add(new QueryLocusSetter());
    
    // Set the internal key data member for the locus object retrieval.
    locusKey = org.tair.db.locusdetail.LocusdetailFactory.getLocusDetailPrimaryKey(locusTairObjectId/* Source: AddNaturalKeyProperties + addAssociationForeignKeys: locusTairObjectId Key: true */);
    // Add a setter to instantiate the required locus object before insert.
    insertQuerySetters.add(new QueryLocusSetter());
    
    // Add the many-to-many collection setters for the annotation property.
    
    // Add the many-to-many collection setters for the polymorphism property.
    
    // Add the many-to-many collection setters for the locusGeneModelAnnotation property.
    querySetters.add(new QueryLocusGeneModelAnnotationSetter());
    insertSetters.add(new InsertLocusGeneModelAnnotationSetter());
    postSetters.add(new UpdateLocusGeneModelAnnotationSetter());
    
    // Add the many-to-many collection setters for the polymorphismSite property.
    querySetters.add(new QueryPolymorphismSiteSetter());
    insertSetters.add(new InsertPolymorphismSiteSetter());
    postSetters.add(new UpdatePolymorphismSiteSetter());
    
    // Add the many-to-many collection setters for the features property.
    querySetters.add(new QueryFeaturesSetter());
    
    // Add the many-to-many collection setters for the cdnas property.
    querySetters.add(new QueryCdnasSetter());
    
    // Add the many-to-many collection setters for the proteinModel property.
    querySetters.add(new QueryProteinModelSetter());
  }

  @Override
  public boolean equals(Object arg0) {
    AbstractLocusGeneModel other = (AbstractLocusGeneModel)arg0;
    return other.key.equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    AbstractLocusGeneModel other = (AbstractLocusGeneModel)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.key.compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "org.tair.db.locusdetail";
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
    // Only process deletes if child exists.
    if (features != null) {
      for (com.poesys.db.dto.IDbDto dto : features) {
        dto.cascadeDelete();
      }
    }
    // Only process deletes if child exists.
    if (cdnas != null) {
      for (com.poesys.db.dto.IDbDto dto : cdnas) {
        dto.cascadeDelete();
      }
    }
    // Only process deletes if child exists.
    if (proteinModel != null) {
      for (com.poesys.db.dto.IDbDto dto : proteinModel) {
        dto.cascadeDelete();
      }
    }
    // Only process deletes if child exists.
    if (locusGeneModelAnnotation != null) {
      for (com.poesys.db.dto.IDbDto dto : locusGeneModelAnnotation) {
        dto.cascadeDelete();
      }
    }
    // Only process deletes if child exists.
    if (polymorphismSite != null) {
      for (com.poesys.db.dto.IDbDto dto : polymorphismSite) {
        dto.cascadeDelete();
      }
    }
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  @Override
  public java.sql.Connection getConnection() throws java.sql.SQLException {
    java.sql.Connection connection = null;
    
	/* 
	 * The resource bundle for the DTO's subsystem contains the suffix that
	 * distinguishes multiple versions of the subsystem in the database.properties
	 * file, such as "prod" or "test". Most database.properties files have only
	 * one implementation and use external facilities to switch between the
	 * databases (JNDI, for example, or producing different database.properties
	 * files in different setups). Use the subsystem resource bundle to get the
	 * suffix, then use the full subsystem name to get a connection factory for
	 * the DTO's subsystem, then use that factory to get a JDBC connection.
	 */
	java.util.ResourceBundle rb = 
	  java.util.ResourceBundle.getBundle("org.tair.db.locusdetail");
    String subsystem =
      "org.tair.db.locusdetail"
          + (rb.getString("suffix") == null
             || rb.getString("suffix").length() == 0 ? ""
              : "." + rb.getString("suffix"));
	  
	try {
	  connection = 
	    com.poesys.db.connection.ConnectionFactoryFactory.getInstance(subsystem).getConnection();
	} catch (com.poesys.db.InvalidParametersException e) {
	  throw new java.sql.SQLException(e.getMessage());
	} catch (java.io.IOException e) {
	  throw new java.sql.SQLException(e.getMessage());
	}
	
	return connection;
  }

  /**
   * Nested property locusTairObjectId
   *
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   *
   * Added by AddNaturalKeyProperties + AddParentKeyAttributes
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long locusTairObjectId;
  

  public java.lang.Long getLocusTairObjectId() {
    return locusTairObjectId;
  }

  /**
   * Clear the locusTairObjectId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearLocusTairObjectId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property geneModelName
   *
   * <p>
   * gene model name; usually in the format ATcGnnnnn.n, where the first part is the
   * locus name and the part following the dot is the model number; unique within the
   * locus
   * </p>
   *
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String geneModelName;
  

  public java.lang.String getGeneModelName() {
    return geneModelName;
  }

  /**
   * Clear the geneModelName data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearGeneModelName() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property geneModelType
   *
   * <p>
   * the type of the gene model, such as "protein coding"
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String geneModelType;
  

  public java.lang.String getGeneModelType() {
    return geneModelType;
  }

  /**
   * Clear the geneModelType data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearGeneModelType() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property representative
   *
   * <p>
   * whether this gene model is the representative gene model for the parent locus,
   * meaning it acts as the default gene model in situations where no gene model is
   * specified
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Boolean representative;
  

  public java.lang.Boolean getRepresentative() {
    return representative;
  }

  /**
   * Clear the representative data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearRepresentative() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property spliceVariant
   *
   * <p>
   * whether this gene model represents a splice variant
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Boolean spliceVariant;
  

  public java.lang.Boolean getSpliceVariant() {
    return spliceVariant;
  }

  /**
   * Clear the spliceVariant data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearSpliceVariant() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property computationalDescription
   *
   * <p>
   * a computationally generated description of the gene model, or "none" if there is
   * no such description
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String computationalDescription;
  

  public java.lang.String getComputationalDescription() {
    return computationalDescription;
  }

  /**
   * Clear the computationalDescription data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearComputationalDescription() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property curatedSummary
   *
   * <p>
   * an optional curator-written summary for the gene model; null if the summary is
   * the same as the curated summary for the parent locus
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String curatedSummary;
  

  public java.lang.String getCuratedSummary() {
    return curatedSummary;
  }

  /**
   * Clear the curatedSummary data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearCuratedSummary() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property confidence
   *
   * <p>
   * an optional confidence score string that rates the gene models according to some
   * confidence algorithm
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String confidence;
  

  public java.lang.String getConfidence() {
    return confidence;
  }

  /**
   * Clear the confidence data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearConfidence() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property locus
   *
   * 
   *
   * Added by AddToOneAssociationRequiredObjectProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private org.tair.db.locusdetail.ILocusDetail locus;
  

  public org.tair.db.locusdetail.ILocusDetail getLocus() {
    return locus;
  }

  /**
   * Clear the locus data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearLocus() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property annotation
   *
   * <p>
   * the set of annotations for the gene model
   * </p>
   *
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: true
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.tair.db.locusdetail.IAnnotation> annotation;
  // Ordered list of keys of the objects in the $property.uniquename list
  java.util.List<com.poesys.db.pk.IPrimaryKey> annotationKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  

  public java.util.Collection<org.tair.db.locusdetail.IAnnotation> getAnnotation() throws java.sql.SQLException {
    return annotation;
  }

  /**
   * Clear the annotation data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearAnnotation() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  public void setAnnotation(java.util.Collection<org.tair.db.locusdetail.IAnnotation> annotation) {
    this.annotation = annotation;
    // Add the primary keys of the new collection to the serialized key list.
    annotationKeys.clear();
    if (annotation != null) {
      for (com.poesys.db.dto.IDbDto object : annotation) {
        annotationKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }

  /**
   * Nested property polymorphism
   *
   * <p>
   * the set of polymorphisms at sites on the locus
   * </p>
   *
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: true
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.tair.db.locusdetail.ILocusPolymorphism> polymorphism;
  // Ordered list of keys of the objects in the $property.uniquename list
  java.util.List<com.poesys.db.pk.IPrimaryKey> polymorphismKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  

  public java.util.Collection<org.tair.db.locusdetail.ILocusPolymorphism> getPolymorphism() throws java.sql.SQLException {
    return polymorphism;
  }

  /**
   * Clear the polymorphism data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearPolymorphism() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  public void setPolymorphism(java.util.Collection<org.tair.db.locusdetail.ILocusPolymorphism> polymorphism) {
    this.polymorphism = polymorphism;
    // Add the primary keys of the new collection to the serialized key list.
    polymorphismKeys.clear();
    if (polymorphism != null) {
      for (com.poesys.db.dto.IDbDto object : polymorphism) {
        polymorphismKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }

  /**
   * Nested property locusGeneModelAnnotation
   *
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   *
   * Added by AddAssociationClassCollectionProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.tair.db.locusdetail.ILocusGeneModelAnnotation> locusGeneModelAnnotation;
  // Ordered list of keys of the objects in the $property.uniquename list
  java.util.List<com.poesys.db.pk.IPrimaryKey> locusGeneModelAnnotationKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  

  public java.util.Collection<org.tair.db.locusdetail.ILocusGeneModelAnnotation> getLocusGeneModelAnnotation() {
    return locusGeneModelAnnotation;
  }

  /**
   * Clear the locusGeneModelAnnotation data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearLocusGeneModelAnnotation() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property polymorphismSite
   *
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   *
   * Added by AddAssociationClassCollectionProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.tair.db.locusdetail.IPolymorphismSite> polymorphismSite;
  // Ordered list of keys of the objects in the $property.uniquename list
  java.util.List<com.poesys.db.pk.IPrimaryKey> polymorphismSiteKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  

  public java.util.Collection<org.tair.db.locusdetail.IPolymorphismSite> getPolymorphismSite() {
    return polymorphismSite;
  }

  /**
   * Clear the polymorphismSite data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearPolymorphismSite() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property features
   *
   * <p>
   * an ordered list of coordinates for each feature (intron or exon) of the gene
   * model, ordered by starting position
   * </p>
   *
   * Added by AddToManyChildCollectionProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.List<org.tair.db.locusdetail.IModelFeature> features;
  // Ordered list of keys of the objects in the $property.uniquename list
  java.util.List<com.poesys.db.pk.IPrimaryKey> featuresKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  

  public java.util.List<org.tair.db.locusdetail.IModelFeature> getFeatures() {
    return features;
  }

  /**
   * Clear the features data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearFeatures() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property cdnas
   *
   * <p>
   * the cDNA sequences from the locus gene model
   * </p>
   *
   * Added by AddToManyChildCollectionProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.tair.db.locusdetail.ILocusGeneModelCdna> cdnas;
  // Ordered list of keys of the objects in the $property.uniquename list
  java.util.List<com.poesys.db.pk.IPrimaryKey> cdnasKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  

  public java.util.Collection<org.tair.db.locusdetail.ILocusGeneModelCdna> getCdnas() {
    return cdnas;
  }

  /**
   * Clear the cdnas data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearCdnas() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property proteinModel
   *
   * <p>
   * the protein model for a protein coding gene model that models the translation of
   * the gene sequence into the protein amino acid sequence
   * </p>
   *
   * Added by AddToManyChildCollectionProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.tair.db.locusdetail.IProteinModel> proteinModel;
  // Ordered list of keys of the objects in the $property.uniquename list
  java.util.List<com.poesys.db.pk.IPrimaryKey> proteinModelKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  

  public java.util.Collection<org.tair.db.locusdetail.IProteinModel> getProteinModel() {
    return proteinModel;
  }

  /**
   * Clear the proteinModel data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearProteinModel() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {

    // Clean up features.
    if (subject != null && subject instanceof org.tair.db.locusdetail.IModelFeature && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        features != null) {
      // Delete to-many features child from collection
      features.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Clean up cdnas.
    if (subject != null && subject instanceof org.tair.db.locusdetail.ILocusGeneModelCdna && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        cdnas != null) {
      // Delete to-many cdnas child from collection
      cdnas.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Clean up proteinModel.
    if (subject != null && subject instanceof org.tair.db.locusdetail.IProteinModel && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        proteinModel != null) {
      // Delete to-many proteinModel child from collection
      proteinModel.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Clean up locusGeneModelAnnotation.
    if (subject != null && subject instanceof org.tair.db.locusdetail.ILocusGeneModelAnnotation && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        locusGeneModelAnnotation != null) {
      // Delete to-many locusGeneModelAnnotation child from collection
      locusGeneModelAnnotation.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Clean up polymorphismSite.
    if (subject != null && subject instanceof org.tair.db.locusdetail.IPolymorphismSite && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        polymorphismSite != null) {
      // Delete to-many polymorphismSite child from collection
      polymorphismSite.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Cascade delete to locusGeneModelAnnotation.
    if (event == com.poesys.db.dao.DataEvent.MARKED_DELETED &&
        locusGeneModelAnnotation != null) {
      // Mark locusGeneModelAnnotation association object cascade-deleted.
      outer: for (org.tair.db.locusdetail.ILocusGeneModelAnnotation value : locusGeneModelAnnotation) {
        com.poesys.db.pk.AssociationPrimaryKey keys = 
          (com.poesys.db.pk.AssociationPrimaryKey) value.getPrimaryKey();
        for (com.poesys.db.pk.IPrimaryKey key : keys.getKeyListCopy()) {
          if (key.equals(subject.getPrimaryKey())) {
            value.cascadeDelete();
            break outer;
          }
        }
      }
    }

    // Cascade delete to polymorphismSite.
    if (event == com.poesys.db.dao.DataEvent.MARKED_DELETED &&
        polymorphismSite != null) {
      // Mark polymorphismSite association object cascade-deleted.
      outer: for (org.tair.db.locusdetail.IPolymorphismSite value : polymorphismSite) {
        com.poesys.db.pk.AssociationPrimaryKey keys = 
          (com.poesys.db.pk.AssociationPrimaryKey) value.getPrimaryKey();
        for (com.poesys.db.pk.IPrimaryKey key : keys.getKeyListCopy()) {
          if (key.equals(subject.getPrimaryKey())) {
            value.cascadeDelete();
            break outer;
          }
        }
      }
    }
  }
}