/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractQueryAssociatedManyToManyObjects.vsl


package org.tair.db.locusdetail.sql;


import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.poesys.db.ConstraintViolationException;
import com.poesys.db.InvalidParametersException;
import com.poesys.db.dao.query.IParameterizedQuerySql;
import com.poesys.db.pk.IPrimaryKey;



/**
 * <p>
 * A query Command pattern object that implements a SQL query of a collection of 
 * LocusDetail objects using the primary key of an associated 
 * Annotation object through the association Locus using the 
 * association class LocusAnnotation. This association is a many-to-many 
 * association from LocusDetail to Annotation.
 * </p>
 * <p>
 * This SQL specification contains a SQL statement that queries a collection of
 * LocusDetail objects from the database table LocusDetail by
 * joining to the database table LocusAnnotation and using the 
 * primary key from Annotation to query the collection.
 * </p>
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractQueryLocusByAnnotation 
    implements IParameterizedQuerySql<org.tair.db.locusdetail.ILocusDetail, org.tair.db.locusdetail.IAnnotation> {
  /** SQL query statement for LocusDetail */
  private static final String SQL =
    "SELECT a.locusTairObjectId, a.locusName, a.primarySymbol, a.primarySymbolFullName, a.chromosome, a.spanStartPosition, a.spanEndPosition, a.curatedSummary, a.geneModelCount, a.polymorphismCount, a.articleCount, a.abstractCount, a.geneFamilyName, a.geneFamilyTairObjectId, a.taxonId FROM LocusDetail a JOIN LocusAnnotation b ON a.locusTairObjectId = b.locusTairObjectId WHERE b.category = ? AND b.evidenceCode = ? AND b.evidenceWith = ? AND b.keyword = ? AND b.reference = ? AND b.relationshipType = ?";

  public void bindParameters(PreparedStatement stmt, org.tair.db.locusdetail.IAnnotation parameters)
      throws SQLException {
    // Set the parameters starting with the first parameter.
    parameters.getPrimaryKey().setParams(stmt, 1);
  }

  public String getParameterValues(org.tair.db.locusdetail.IAnnotation parameters) {
    // Create the output string with the key parameters.
    return parameters.getPrimaryKey().getValueList();
  }

  public org.tair.db.locusdetail.ILocusDetail getData(ResultSet rs) 
      throws SQLException, ConstraintViolationException {
    IPrimaryKey key = 
      org.tair.db.locusdetail.LocusdetailFactory.getLocusDetailPrimaryKey(rs, "");
    return org.tair.db.locusdetail.LocusdetailFactory.getLocusDetailData(key, rs);
  }

  public IPrimaryKey getPrimaryKey(ResultSet rs) throws SQLException,
      InvalidParametersException {
    return org.tair.db.locusdetail.LocusdetailFactory.getLocusDetailPrimaryKey(rs, "");
  }

  public String getSql() {
    return SQL;
  }
}