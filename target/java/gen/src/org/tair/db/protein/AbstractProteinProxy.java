/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDtoProxy.vsl

package org.tair.db.protein;


import com.poesys.db.dto.AbstractLazyLoadingDtoProxy;


/**
 * <p>
 * A data-access layer data-transfer object (DTO) lazy-loading proxy for the 
 * Protein. This class is an abstract class that contains AndroMDA 
 * generated code; change nothing in this class. Instead, override any methods 
 * in the concrete subclass generated in the same package. AndroMDA will 
 * overwrite this class each time you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * An amino acid possibly related to a transcript
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractProteinProxy extends AbstractLazyLoadingDtoProxy implements IProtein {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  


  /**
   * Read-Object setter for de-serializing nested transcript collection
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.protein.sql.QueryProteinTranscript
   */
  private class ReadTranscriptSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.tair.db.protein.IProteinTranscript> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadTranscriptSetter object to read the transcript collection.
     */
    public ReadTranscriptSetter() {
      super("org.tair.db.protein", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.protein.ProteinTranscript.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.protein.IProteinTranscript> getObjectCollection() {
      java.util.Collection<org.tair.db.protein.IProteinTranscript> transcript =  ((org.tair.db.protein.Protein)dto).getTranscript();
      return transcript;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.tair.db.protein.Protein)dto).transcriptKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.protein.IProteinTranscript> getSql() {
      return new org.tair.db.protein.sql.QueryProteinTranscript();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.protein.IProteinTranscript> collection) {
      ((org.tair.db.protein.Protein)dto).transcript = collection;
    }
  }


  public void addTranscriptProteinTranscript(org.tair.db.protein.IProteinTranscript object) {
    ((Protein)dto).addTranscriptProteinTranscript(object);
  }



  /**
   * Read-Object setter for de-serializing nested domains collection
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.protein.sql.QueryDomain
   */
  private class ReadDomainsSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.tair.db.protein.IDomain> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadDomainsSetter object to read the domains collection.
     */
    public ReadDomainsSetter() {
      super("org.tair.db.protein", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.protein.Domain.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.protein.IDomain> getObjectCollection() {
      java.util.Collection<org.tair.db.protein.IDomain> domains =  ((org.tair.db.protein.Protein)dto).getDomains();
      return domains;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.tair.db.protein.Protein)dto).domainsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.protein.IDomain> getSql() {
      return new org.tair.db.protein.sql.QueryDomain();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.protein.IDomain> collection) {
      ((org.tair.db.protein.Protein)dto).domains = collection;
    }
  }


  public void addDomainsDomain(org.tair.db.protein.IDomain object) {
    ((Protein)dto).addDomainsDomain(object);
  }



  /**
   * Read-Object setter for de-serializing nested links collection
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.protein.sql.QueryProteinResourceLink
   */
  private class ReadLinksSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.tair.db.protein.IProteinResourceLink> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadLinksSetter object to read the links collection.
     */
    public ReadLinksSetter() {
      super("org.tair.db.protein", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.protein.ProteinResourceLink.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.protein.IProteinResourceLink> getObjectCollection() {
      java.util.Collection<org.tair.db.protein.IProteinResourceLink> links =  ((org.tair.db.protein.Protein)dto).getLinks();
      return links;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.tair.db.protein.Protein)dto).linksKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.protein.IProteinResourceLink> getSql() {
      return new org.tair.db.protein.sql.QueryProteinResourceLink();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.protein.IProteinResourceLink> collection) {
      ((org.tair.db.protein.Protein)dto).links = collection;
    }
  }


  public void addLinksProteinResourceLink(org.tair.db.protein.IProteinResourceLink object) {
    ((Protein)dto).addLinksProteinResourceLink(object);
  }

  /**
   * Create a ProteinProxy. The concrete subclass must call this constructor.
   *
   * @param dto the DTO to proxy
   */
  public AbstractProteinProxy(Protein dto) {
    super(dto);

    // Setter arrays
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters.add(new ReadTranscriptSetter());
    readObjectSetters.add(new ReadDomainsSetter());
    readObjectSetters.add(new ReadLinksSetter());
  }

  @Override
  public boolean equals(Object obj) {
    AbstractProteinProxy otherProxy = (AbstractProteinProxy)obj;
    return ((Protein)dto).equals(otherProxy.dto);
  }

  @Override
  public int hashCode() {
    return ((Protein)dto).hashCode();
  }

  // Local properties (attributes, associations, and association classes)

  // Source: AddNaturalKeyProperties
  public java.lang.Long getTairObjectId() {
    return ((Protein)dto).getTairObjectId();
  }

  // Source: AddLocalAttributeProperties
  public java.lang.String getName() {
    return ((Protein)dto).getName();
  }

  public void setName(java.lang.String name)
      throws com.poesys.db.InvalidParametersException {
    ((Protein)dto).setName(name);
  }

  // Source: AddLocalAttributeProperties
  public java.lang.String getSequence() {
    return ((Protein)dto).getSequence();
  }

  public void setSequence(java.lang.String sequence)
      throws com.poesys.db.InvalidParametersException {
    ((Protein)dto).setSequence(sequence);
  }

  // Source: AddLocalAttributeProperties
  public java.lang.String getGenbankGi() {
    return ((Protein)dto).getGenbankGi();
  }

  public void setGenbankGi(java.lang.String genbankGi)
      {
    ((Protein)dto).setGenbankGi(genbankGi);
  }

  // Source: AddLocalAttributeProperties
  public java.lang.String getGenPept() {
    return ((Protein)dto).getGenPept();
  }

  public void setGenPept(java.lang.String genPept)
      {
    ((Protein)dto).setGenPept(genPept);
  }

  // Source: AddLocalAttributeProperties
  public java.lang.Double getMolecularWeight() {
    return ((Protein)dto).getMolecularWeight();
  }

  public void setMolecularWeight(java.lang.Double molecularWeight)
      {
    ((Protein)dto).setMolecularWeight(molecularWeight);
  }

  // Source: AddLocalAttributeProperties
  public java.lang.Double getIsoelectricPoint() {
    return ((Protein)dto).getIsoelectricPoint();
  }

  public void setIsoelectricPoint(java.lang.Double isoelectricPoint)
      {
    ((Protein)dto).setIsoelectricPoint(isoelectricPoint);
  }

  // Source: AddLocalAttributeProperties
  public java.lang.Integer getLength() {
    return ((Protein)dto).getLength();
  }

  public void setLength(java.lang.Integer length)
      throws com.poesys.db.InvalidParametersException {
    ((Protein)dto).setLength(length);
  }

  // Source: AddLocalAttributeProperties
  public java.sql.Timestamp getDateLastModified() {
    return ((Protein)dto).getDateLastModified();
  }

  public void setDateLastModified(java.sql.Timestamp dateLastModified)
      throws com.poesys.db.InvalidParametersException {
    ((Protein)dto).setDateLastModified(dateLastModified);
  }

  // Source: AddToManyChildCollectionProperties
  public java.util.Collection<org.tair.db.protein.IProteinTranscript> getTranscript() {
    return ((Protein)dto).getTranscript();
  }

  public void setTranscript(java.util.Collection<org.tair.db.protein.IProteinTranscript> transcript)
      {
    ((Protein)dto).setTranscript(transcript);
  }

  // Source: AddToManyChildCollectionProperties
  public java.util.Collection<org.tair.db.protein.IDomain> getDomains() {
    return ((Protein)dto).getDomains();
  }

  public void setDomains(java.util.Collection<org.tair.db.protein.IDomain> domains)
      {
    ((Protein)dto).setDomains(domains);
  }

  // Source: AddToManyChildCollectionProperties
  public java.util.Collection<org.tair.db.protein.IProteinResourceLink> getLinks() {
    return ((Protein)dto).getLinks();
  }

  public void setLinks(java.util.Collection<org.tair.db.protein.IProteinResourceLink> links)
      {
    ((Protein)dto).setLinks(links);
  }

  public void markChildrenDeleted() throws com.poesys.db.dto.DtoStatusException {
  	((Protein)dto).markChildrenDeleted();
  }
}