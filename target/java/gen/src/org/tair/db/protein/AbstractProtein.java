/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package org.tair.db.protein;


import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;
import com.poesys.db.dto.DtoStatusException;


/**
 * <p>
 * A data-access layer data-transfer object for the Protein. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * An amino acid possibly related to a transcript
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>NaturalKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractProtein extends AbstractDto implements IProtein {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  
  // Setter strategy nested classes for multiple-object associations

  /**
   * Query setter for querying nested transcript
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.protein.sql.QueryTranscriptByProtein
   */
  private class QueryTranscriptSetter 
      extends com.poesys.db.dto.AbstractListSetter<org.tair.db.protein.IProteinTranscript, IProtein, java.util.Collection<org.tair.db.protein.IProteinTranscript>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryTranscriptSetter object.
     */
    public QueryTranscriptSetter() {
      super("org.tair.db.protein", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.protein.ProteinTranscript.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected IProtein getParametersDto() {
      return AbstractProtein.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.tair.db.protein.IProteinTranscript, IProtein> getSql() {
      return new org.tair.db.protein.sql.QueryTranscriptByProtein();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.protein.IProteinTranscript> list) {
      // No status change; this is just filling in the object data.
      transcript = list;
      // Add the primary keys to the serialized key list if there are any.
      if (transcript != null) {
        for (com.poesys.db.dto.IDbDto object : transcript) {
          transcriptKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated transcript list is not null
      return transcript != null;
    }
  }

  /**
   * Read-Object setter for de-serializing nested transcript collection
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.protein.sql.QueryProteinTranscript
   */
  private class ReadTranscriptSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.tair.db.protein.IProteinTranscript> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadTranscriptSetter object to read the transcript collection.
     */
    public ReadTranscriptSetter() {
      super("org.tair.db.protein", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.protein.ProteinTranscript.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.protein.IProteinTranscript> getObjectCollection() {
      return transcript;
    }

    @Override
    protected java.util.List<IPrimaryKey> getPrimaryKeys() {
      return transcriptKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.protein.IProteinTranscript> getSql() {
      return new org.tair.db.protein.sql.QueryProteinTranscript();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.protein.IProteinTranscript> collection) {
      transcript = collection;
    }
  }

  /**
   * Insert setter for inserting nested transcript.
   *
   * @see org.tair.db.protein.sql.InsertProteinTranscript
   */
  private class InsertTranscriptSetter 
      extends com.poesys.db.dto.AbstractBatchInsertSetter<org.tair.db.protein.IProteinTranscript, java.util.Collection<org.tair.db.protein.IProteinTranscript>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;
    
    // transcript source: AddToManyChildCollectionProperties

    /**
     * Create an InsertTranscriptSetter object.
     */
    public InsertTranscriptSetter() {
      super("org.tair.db.protein", 2147483647);
    }

    @Override
    protected int getBatchSize() {
      return BATCH_SIZE;
    }

    @Override
    protected String getClassName() {
      return org.tair.db.protein.ProteinTranscript.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.protein.IProteinTranscript> getDtos() {
      return transcript;
    }

    @Override
    protected com.poesys.db.dao.insert.IInsertSql<org.tair.db.protein.IProteinTranscript> getSql() {
      return new org.tair.db.protein.sql.InsertProteinTranscript();
    }
  }

  /**
   * Setter for processing added transcript and updated transcript.
   * Deleted transcript are deleted in the database cascade delete.
   */
   
  private class UpdateTranscriptSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<org.tair.db.protein.IProteinTranscript, java.util.Collection<org.tair.db.protein.IProteinTranscript>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdateTranscriptSetter object.
     */
    public UpdateTranscriptSetter() {
      super("org.tair.db.protein", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, java.util.Collection<org.tair.db.protein.IProteinTranscript> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
        // transcript source: AddToManyChildCollectionProperties
        // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.protein.IProteinTranscript> factory = 
        manager.getFactory(org.tair.db.protein.ProteinTranscript.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<org.tair.db.protein.IProteinTranscript> dao =
        factory.getUpdateBatch(new org.tair.db.protein.sql.UpdateProteinTranscript());
      dao.update(connection, dtos, BATCH_SIZE);
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, java.util.Collection<org.tair.db.protein.IProteinTranscript> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.protein.IProteinTranscript> factory = 
        manager.getFactory(org.tair.db.protein.ProteinTranscript.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<org.tair.db.protein.IProteinTranscript> dao = 
        factory.getDeleteBatch(new org.tair.db.protein.sql.DeleteProteinTranscript());
      dao.delete(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.sql.Connection connection, java.util.Collection<org.tair.db.protein.IProteinTranscript> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.protein.IProteinTranscript> factory = 
        manager.getFactory(org.tair.db.protein.ProteinTranscript.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<org.tair.db.protein.IProteinTranscript> dao =
        factory.getInsertBatch(new org.tair.db.protein.sql.InsertProteinTranscript());
      dao.insert(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected java.util.Collection<org.tair.db.protein.IProteinTranscript> getDtos() {
      return transcript;
    }
    
    @Override
    protected String getClassName() {
      return org.tair.db.protein.ProteinTranscript.class.getName();
    }
  }

  public void addTranscriptProteinTranscript(org.tair.db.protein.IProteinTranscript object) {
    if (transcript == null) {
      // Association not yet created, create it.
      transcript = new java.util.concurrent.CopyOnWriteArrayList<org.tair.db.protein.IProteinTranscript>();
    }
    transcript.add(object);
    // Add the primary key to the primary key array.
    transcriptKeys.add(object.getPrimaryKey());
  }
   
  /**
   * Query setter for querying nested domains
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.protein.sql.QueryDomainsByProtein
   */
  private class QueryDomainsSetter 
      extends com.poesys.db.dto.AbstractListSetter<org.tair.db.protein.IDomain, IProtein, java.util.Collection<org.tair.db.protein.IDomain>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryDomainsSetter object.
     */
    public QueryDomainsSetter() {
      super("org.tair.db.protein", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.protein.Domain.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected IProtein getParametersDto() {
      return AbstractProtein.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.tair.db.protein.IDomain, IProtein> getSql() {
      return new org.tair.db.protein.sql.QueryDomainsByProtein();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.protein.IDomain> list) {
      // No status change; this is just filling in the object data.
      domains = list;
      // Add the primary keys to the serialized key list if there are any.
      if (domains != null) {
        for (com.poesys.db.dto.IDbDto object : domains) {
          domainsKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated domains list is not null
      return domains != null;
    }
  }

  /**
   * Read-Object setter for de-serializing nested domains collection
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.protein.sql.QueryDomain
   */
  private class ReadDomainsSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.tair.db.protein.IDomain> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadDomainsSetter object to read the domains collection.
     */
    public ReadDomainsSetter() {
      super("org.tair.db.protein", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.protein.Domain.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.protein.IDomain> getObjectCollection() {
      return domains;
    }

    @Override
    protected java.util.List<IPrimaryKey> getPrimaryKeys() {
      return domainsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.protein.IDomain> getSql() {
      return new org.tair.db.protein.sql.QueryDomain();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.protein.IDomain> collection) {
      domains = collection;
    }
  }

  /**
   * Insert setter for inserting nested domains.
   *
   * @see org.tair.db.protein.sql.InsertDomain
   */
  private class InsertDomainsSetter 
      extends com.poesys.db.dto.AbstractBatchInsertSetter<org.tair.db.protein.IDomain, java.util.Collection<org.tair.db.protein.IDomain>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;
    
    // domains source: AddToManyChildCollectionProperties

    /**
     * Create an InsertDomainsSetter object.
     */
    public InsertDomainsSetter() {
      super("org.tair.db.protein", 2147483647);
    }

    @Override
    protected int getBatchSize() {
      return BATCH_SIZE;
    }

    @Override
    protected String getClassName() {
      return org.tair.db.protein.Domain.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.protein.IDomain> getDtos() {
      return domains;
    }

    @Override
    protected com.poesys.db.dao.insert.IInsertSql<org.tair.db.protein.IDomain> getSql() {
      return new org.tair.db.protein.sql.InsertDomain();
    }
  }

  /**
   * Setter for processing added domains and updated domains.
   * Deleted domains are deleted in the database cascade delete.
   */
   
  private class UpdateDomainsSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<org.tair.db.protein.IDomain, java.util.Collection<org.tair.db.protein.IDomain>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdateDomainsSetter object.
     */
    public UpdateDomainsSetter() {
      super("org.tair.db.protein", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, java.util.Collection<org.tair.db.protein.IDomain> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
        // domains source: AddToManyChildCollectionProperties
        // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.protein.IDomain> factory = 
        manager.getFactory(org.tair.db.protein.Domain.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<org.tair.db.protein.IDomain> dao =
        factory.getUpdateBatch(new org.tair.db.protein.sql.UpdateDomain());
      dao.update(connection, dtos, BATCH_SIZE);
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, java.util.Collection<org.tair.db.protein.IDomain> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.protein.IDomain> factory = 
        manager.getFactory(org.tair.db.protein.Domain.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<org.tair.db.protein.IDomain> dao = 
        factory.getDeleteBatch(new org.tair.db.protein.sql.DeleteDomain());
      dao.delete(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.sql.Connection connection, java.util.Collection<org.tair.db.protein.IDomain> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.protein.IDomain> factory = 
        manager.getFactory(org.tair.db.protein.Domain.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<org.tair.db.protein.IDomain> dao =
        factory.getInsertBatch(new org.tair.db.protein.sql.InsertDomain());
      dao.insert(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected java.util.Collection<org.tair.db.protein.IDomain> getDtos() {
      return domains;
    }
    
    @Override
    protected String getClassName() {
      return org.tair.db.protein.Domain.class.getName();
    }
  }

  public void addDomainsDomain(org.tair.db.protein.IDomain object) {
    if (domains == null) {
      // Association not yet created, create it.
      domains = new java.util.concurrent.CopyOnWriteArrayList<org.tair.db.protein.IDomain>();
    }
    domains.add(object);
    // Add the primary key to the primary key array.
    domainsKeys.add(object.getPrimaryKey());
  }
   
  /**
   * Query setter for querying nested links
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.protein.sql.QueryLinksByProtein
   */
  private class QueryLinksSetter 
      extends com.poesys.db.dto.AbstractListSetter<org.tair.db.protein.IProteinResourceLink, IProtein, java.util.Collection<org.tair.db.protein.IProteinResourceLink>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryLinksSetter object.
     */
    public QueryLinksSetter() {
      super("org.tair.db.protein", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.protein.ProteinResourceLink.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected IProtein getParametersDto() {
      return AbstractProtein.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.tair.db.protein.IProteinResourceLink, IProtein> getSql() {
      return new org.tair.db.protein.sql.QueryLinksByProtein();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.protein.IProteinResourceLink> list) {
      // No status change; this is just filling in the object data.
      links = list;
      // Add the primary keys to the serialized key list if there are any.
      if (links != null) {
        for (com.poesys.db.dto.IDbDto object : links) {
          linksKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated links list is not null
      return links != null;
    }
  }

  /**
   * Read-Object setter for de-serializing nested links collection
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.protein.sql.QueryProteinResourceLink
   */
  private class ReadLinksSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.tair.db.protein.IProteinResourceLink> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadLinksSetter object to read the links collection.
     */
    public ReadLinksSetter() {
      super("org.tair.db.protein", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.protein.ProteinResourceLink.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.protein.IProteinResourceLink> getObjectCollection() {
      return links;
    }

    @Override
    protected java.util.List<IPrimaryKey> getPrimaryKeys() {
      return linksKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.protein.IProteinResourceLink> getSql() {
      return new org.tair.db.protein.sql.QueryProteinResourceLink();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.protein.IProteinResourceLink> collection) {
      links = collection;
    }
  }
   
  public void addLinksProteinResourceLink(org.tair.db.protein.IProteinResourceLink object) {
    if (links == null) {
      // Association not yet created, create it.
      links = new java.util.concurrent.CopyOnWriteArrayList<org.tair.db.protein.IProteinResourceLink>();
    }
    links.add(object);
    // Add the primary key to the primary key array.
    linksKeys.add(object.getPrimaryKey());
  }
   
  /**
   * Create an empty Protein for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractProtein() {
    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    
    // Add the many-to-many collection setters for the transcript property.
    querySetters.add(new QueryTranscriptSetter());
    readObjectSetters.add(new ReadTranscriptSetter());
    insertSetters.add(new InsertTranscriptSetter());
    postSetters.add(new UpdateTranscriptSetter());
    
    // Add the many-to-many collection setters for the domains property.
    querySetters.add(new QueryDomainsSetter());
    readObjectSetters.add(new ReadDomainsSetter());
    insertSetters.add(new InsertDomainsSetter());
    postSetters.add(new UpdateDomainsSetter());
    
    // Add the many-to-many collection setters for the links property.
    querySetters.add(new QueryLinksSetter());
    readObjectSetters.add(new ReadLinksSetter());
  }

  /**
   * Create a Protein. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the Protein
   * @param tairObjectId 
   * @param name 
   * @param sequence 
   * @param genbankGi 
   * @param genPept 
   * @param molecularWeight 
   * @param isoelectricPoint 
   * @param length 
   * @param dateLastModified 
   */
  public AbstractProtein(IPrimaryKey key, java.lang.Long tairObjectId, java.lang.String name, java.lang.String sequence, java.lang.String genbankGi, java.lang.String genPept, java.lang.Double molecularWeight, java.lang.Double isoelectricPoint, java.lang.Integer length, java.sql.Timestamp dateLastModified) {
    this.key = key;

    this.tairObjectId = tairObjectId;

    if (tairObjectId == null) {
      throw new com.poesys.db.InvalidParametersException("tairObjectId is required for " + key.getValueList());
    }
    
    this.name = name;

    if (name == null) {
      throw new com.poesys.db.InvalidParametersException("name is required for " + key.getValueList());
    }
    
    this.sequence = sequence;

    if (sequence == null) {
      throw new com.poesys.db.InvalidParametersException("sequence is required for " + key.getValueList());
    }
    
    this.genbankGi = genbankGi;

    this.genPept = genPept;

    this.molecularWeight = molecularWeight;

    this.isoelectricPoint = isoelectricPoint;

    this.length = length;

    if (length == null) {
      throw new com.poesys.db.InvalidParametersException("length is required for " + key.getValueList());
    }
    
    this.dateLastModified = dateLastModified;

    if (dateLastModified == null) {
      throw new com.poesys.db.InvalidParametersException("dateLastModified is required for " + key.getValueList());
    }
    
    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    
    // Add the many-to-many collection setters for the transcript property.
    querySetters.add(new QueryTranscriptSetter());
    readObjectSetters.add(new ReadTranscriptSetter());
    insertSetters.add(new InsertTranscriptSetter());
    postSetters.add(new UpdateTranscriptSetter());
    
    // Add the many-to-many collection setters for the domains property.
    querySetters.add(new QueryDomainsSetter());
    readObjectSetters.add(new ReadDomainsSetter());
    insertSetters.add(new InsertDomainsSetter());
    postSetters.add(new UpdateDomainsSetter());
    
    // Add the many-to-many collection setters for the links property.
    querySetters.add(new QueryLinksSetter());
    readObjectSetters.add(new ReadLinksSetter());
  }

  @Override
  public boolean equals(Object arg0) {
    AbstractProtein other = (AbstractProtein)arg0;
    return other.key.equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    AbstractProtein other = (AbstractProtein)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.key.compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "org.tair.db.protein";
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
    // Only process deletes if child exists.
    if (transcript != null) {
      for (com.poesys.db.dto.IDbDto dto : transcript) {
        dto.cascadeDelete();
      }
    }
    // Only process deletes if child exists.
    if (domains != null) {
      for (com.poesys.db.dto.IDbDto dto : domains) {
        dto.cascadeDelete();
      }
    }
    // Only process deletes if child exists.
    if (links != null) {
      for (com.poesys.db.dto.IDbDto dto : links) {
        dto.cascadeDelete();
      }
    }
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  @Override
  public java.sql.Connection getConnection() throws java.sql.SQLException {
    java.sql.Connection connection = null;
    
	/* 
	 * The resource bundle for the DTO's subsystem contains the suffix that
	 * distinguishes multiple versions of the subsystem in the database.properties
	 * file, such as "prod" or "test". Most database.properties files have only
	 * one implementation and use external facilities to switch between the
	 * databases (JNDI, for example, or producing different database.properties
	 * files in different setups). Use the subsystem resource bundle to get the
	 * suffix, then use the full subsystem name to get a connection factory for
	 * the DTO's subsystem, then use that factory to get a JDBC connection.
	 */
	java.util.ResourceBundle rb = 
	  java.util.ResourceBundle.getBundle("org.tair.db.protein");
    String subsystem =
      "org.tair.db.protein"
          + (rb.getString("suffix") == null
             || rb.getString("suffix").length() == 0 ? ""
              : "." + rb.getString("suffix"));
	  
	try {
	  connection = 
	    com.poesys.db.connection.ConnectionFactoryFactory.getInstance(subsystem).getConnection();
	} catch (com.poesys.db.InvalidParametersException e) {
	  throw new java.sql.SQLException(e.getMessage());
	} catch (java.io.IOException e) {
	  throw new java.sql.SQLException(e.getMessage());
	}
	
	return connection;
  }

  /**
   * Nested property tairObjectId
   *
   * 
   *
   * Added by AddNaturalKeyProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long tairObjectId;
  

  public java.lang.Long getTairObjectId() {
    return tairObjectId;
  }

  /**
   * Clear the tairObjectId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTairObjectId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property name
   *
   * 
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.String name;
  

  public java.lang.String getName() {
    return name;
  }

  /**
   * Clear the name data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearName() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the name.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * 
   *
   * @param name the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input name is null
   */
  public void setName(java.lang.String name)
      throws com.poesys.db.InvalidParametersException {
    if (name == null) {
      throw new com.poesys.db.InvalidParametersException("name is required");
    }
    
    this.name = name;
    setChanged();
  }

  /**
   * Nested property sequence
   *
   * 
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.String sequence;
  

  public java.lang.String getSequence() {
    return sequence;
  }

  /**
   * Clear the sequence data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearSequence() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the sequence.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * 
   *
   * @param sequence the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input sequence is null
   */
  public void setSequence(java.lang.String sequence)
      throws com.poesys.db.InvalidParametersException {
    if (sequence == null) {
      throw new com.poesys.db.InvalidParametersException("sequence is required");
    }
    
    this.sequence = sequence;
    setChanged();
  }

  /**
   * Nested property genbankGi
   *
   * 
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.String genbankGi;
  

  public java.lang.String getGenbankGi() {
    return genbankGi;
  }

  /**
   * Clear the genbankGi data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearGenbankGi() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the genbankGi.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * 
   *
   * @param genbankGi the value with which to set the property
   */
  public  void setGenbankGi(java.lang.String genbankGi) {
    this.genbankGi = genbankGi;
    setChanged();
  }

  /**
   * Nested property genPept
   *
   * 
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.String genPept;
  

  public java.lang.String getGenPept() {
    return genPept;
  }

  /**
   * Clear the genPept data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearGenPept() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the genPept.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * 
   *
   * @param genPept the value with which to set the property
   */
  public  void setGenPept(java.lang.String genPept) {
    this.genPept = genPept;
    setChanged();
  }

  /**
   * Nested property molecularWeight
   *
   * 
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.Double molecularWeight;
  

  public java.lang.Double getMolecularWeight() {
    return molecularWeight;
  }

  /**
   * Clear the molecularWeight data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearMolecularWeight() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the molecularWeight.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * 
   *
   * @param molecularWeight the value with which to set the property
   */
  public  void setMolecularWeight(java.lang.Double molecularWeight) {
    this.molecularWeight = molecularWeight;
    setChanged();
  }

  /**
   * Nested property isoelectricPoint
   *
   * 
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.Double isoelectricPoint;
  

  public java.lang.Double getIsoelectricPoint() {
    return isoelectricPoint;
  }

  /**
   * Clear the isoelectricPoint data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearIsoelectricPoint() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the isoelectricPoint.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * 
   *
   * @param isoelectricPoint the value with which to set the property
   */
  public  void setIsoelectricPoint(java.lang.Double isoelectricPoint) {
    this.isoelectricPoint = isoelectricPoint;
    setChanged();
  }

  /**
   * Nested property length
   *
   * 
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.Integer length;
  

  public java.lang.Integer getLength() {
    return length;
  }

  /**
   * Clear the length data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearLength() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the length.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * 
   *
   * @param length the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input length is null
   */
  public void setLength(java.lang.Integer length)
      throws com.poesys.db.InvalidParametersException {
    if (length == null) {
      throw new com.poesys.db.InvalidParametersException("length is required");
    }
    
    this.length = length;
    setChanged();
  }

  /**
   * Nested property dateLastModified
   *
   * 
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.sql.Timestamp dateLastModified;
  

  public java.sql.Timestamp getDateLastModified() {
    return dateLastModified;
  }

  /**
   * Clear the dateLastModified data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearDateLastModified() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the dateLastModified.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * 
   *
   * @param dateLastModified the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input dateLastModified is null
   */
  public void setDateLastModified(java.sql.Timestamp dateLastModified)
      throws com.poesys.db.InvalidParametersException {
    if (dateLastModified == null) {
      throw new com.poesys.db.InvalidParametersException("dateLastModified is required");
    }
    
    this.dateLastModified = dateLastModified;
    setChanged();
  }

  /**
   * Nested property transcript
   *
   * 
   *
   * Added by AddToManyChildCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.tair.db.protein.IProteinTranscript> transcript;
  // Ordered list of keys of the objects in the $property.uniquename list
  java.util.List<com.poesys.db.pk.IPrimaryKey> transcriptKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  

  public java.util.Collection<org.tair.db.protein.IProteinTranscript> getTranscript() {
    return transcript;
  }

  /**
   * Clear the transcript data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTranscript() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the transcript.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * 
   *
   * @param transcript the value with which to set the property
   */
  public  void setTranscript(java.util.Collection<org.tair.db.protein.IProteinTranscript> transcript) {
    this.transcript = transcript;
    // Add the primary keys of the new collection to the serialized key list.
    transcriptKeys.clear();
    if (transcript != null) {
      for (com.poesys.db.dto.IDbDto object : transcript) {
        transcriptKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }

  /**
   * Nested property domains
   *
   * <p>
   * the set of domains in the protein
   * </p>
   *
   * Added by AddToManyChildCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.tair.db.protein.IDomain> domains;
  // Ordered list of keys of the objects in the $property.uniquename list
  java.util.List<com.poesys.db.pk.IPrimaryKey> domainsKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  

  public java.util.Collection<org.tair.db.protein.IDomain> getDomains() {
    return domains;
  }

  /**
   * Clear the domains data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearDomains() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the domains.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the set of domains in the protein
   * </p>
   *
   * @param domains the value with which to set the property
   */
  public  void setDomains(java.util.Collection<org.tair.db.protein.IDomain> domains) {
    this.domains = domains;
    // Add the primary keys of the new collection to the serialized key list.
    domainsKeys.clear();
    if (domains != null) {
      for (com.poesys.db.dto.IDbDto object : domains) {
        domainsKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }

  /**
   * Nested property links
   *
   * <p>
   * the set of resource links that apply to the protein
   * </p>
   *
   * Added by AddToManyChildCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.tair.db.protein.IProteinResourceLink> links;
  // Ordered list of keys of the objects in the $property.uniquename list
  java.util.List<com.poesys.db.pk.IPrimaryKey> linksKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  

  public java.util.Collection<org.tair.db.protein.IProteinResourceLink> getLinks() {
    return links;
  }

  /**
   * Clear the links data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearLinks() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the links.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the set of resource links that apply to the protein
   * </p>
   *
   * @param links the value with which to set the property
   */
  public  void setLinks(java.util.Collection<org.tair.db.protein.IProteinResourceLink> links) {
    this.links = links;
    // Add the primary keys of the new collection to the serialized key list.
    linksKeys.clear();
    if (links != null) {
      for (com.poesys.db.dto.IDbDto object : links) {
        linksKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {

    // Clean up transcript.
    if (subject != null && subject instanceof org.tair.db.protein.IProteinTranscript && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        transcript != null) {
      // Delete to-many transcript child from collection
      transcript.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Clean up domains.
    if (subject != null && subject instanceof org.tair.db.protein.IDomain && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        domains != null) {
      // Delete to-many domains child from collection
      domains.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Clean up links.
    if (subject != null && subject instanceof org.tair.db.protein.IProteinResourceLink && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        links != null) {
      // Delete to-many links child from collection
      links.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }
  }
}