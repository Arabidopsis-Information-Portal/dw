/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractSubsystemFactory.vsl

package org.tair.db.genomicregion;


import java.sql.ResultSet;
import java.sql.SQLException;

import com.poesys.db.InvalidParametersException;
import com.poesys.db.pk.IPrimaryKey;


/**
 * <p>
 * A separate, shareable set of factory methods for all the genomicregion
 * classes, including JDBC data-setting, parameter-setting, and
 * primary-key-generation methods. This class is abstract and has a single
 * concrete subclass, GenomicregionFactory, that you can modify to override
 * the default behavior in the abstract class or implement an as-yet 
 * unimplemented method.
 * </p>
 * <p>
 * the subsystem that contains information about genomes and their genomic regions
 * (chromosomes or scaffolds, features, and so on)
 * </p>
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractGenomicregionFactory {
  /**
   * Retrieve the Est data from the result set's current row and create
   * a Est object.
   * 
   * @param key the primary key for the Genomicregion
   * @param rs the query result set
   * @return a Est instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static IEst getEstData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument tairObjectId gets the JDBC value with a function call.
    java.lang.Long tairObjectIdValue = rs.getLong("tairObjectId");
    // Constructor argument seqTairObjectId gets the JDBC value with a function call.
    java.lang.Long seqTairObjectIdValue = rs.getLong("seqTairObjectId");
    // Constructor argument name gets the JDBC value with a function call.
    java.lang.String nameValue = rs.getString("name");
    // Constructor argument sequence gets the JDBC value with a function call.
    java.lang.String sequenceValue = rs.getString("sequence");
    // Constructor argument genbankAccession gets the JDBC value with a function call.
    java.lang.String genbankAccessionValue = rs.getString("genbankAccession");
    // Constructor argument length gets the JDBC value with a function call.
    java.lang.Long lengthValue = rs.getLong("length");
    // Constructor argument startPosition gets the JDBC value with a function call.
    java.lang.Long startPositionValue = rs.getLong("startPosition");
    // Constructor argument endPosition gets the JDBC value with a function call.
    java.lang.Long endPositionValue = rs.getLong("endPosition");
    // Constructor argument cloneName gets the JDBC value with a function call.
    java.lang.String cloneNameValue = rs.getString("cloneName");
    // Constructor argument cloneId gets the JDBC value with a function call.
    java.lang.Long cloneIdValue = rs.getLong("cloneId");
    // Constructor argument dateEntered gets the JDBC value with a function call.
    java.sql.Timestamp dateEnteredValue = rs.getTimestamp("dateEntered");
    if (rs.wasNull()) {
      dateEnteredValue = null;
    };
    // Est has no lazily loaded members, so there is no need for Proxy.
    IEst newObject = 
      new Est(key, tairObjectIdValue, seqTairObjectIdValue, nameValue, sequenceValue, genbankAccessionValue, lengthValue, startPositionValue, endPositionValue, cloneNameValue, cloneIdValue, dateEnteredValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a Est based on a result set that must contain
   * the Est primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a Est CompositeKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getEstPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    IPrimaryKey parentKey = getTranscriptPrimaryKey(rs, "");
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    java.lang.Long seqTairObjectIdValue = rs.getLong("seqTairObjectId");
    list.add(new com.poesys.db.col.LongColumnValue(prefix + "seqTairObjectId", seqTairObjectIdValue));
	IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.tair.db.genomicregion.Est");
    key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "org.tair.db.genomicregion.Est");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a Est based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param seqTairObjectId the unique TAIR identifier for the EST sequence
   * @param tairObjectId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @return a Est CompositeKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getEstPrimaryKey(java.lang.Long seqTairObjectId, java.lang.Long tairObjectId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    IPrimaryKey parentKey = getTranscriptPrimaryKey(tairObjectId);

    // Check the parent key; if it is null, the return key should be null.
    if (parentKey != null) {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.LongColumnValue("seqTairObjectId", seqTairObjectId));
	  IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.tair.db.genomicregion.Est");
      key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "org.tair.db.genomicregion.Est");
    }
    return key;
  }

  /**
   * Retrieve the Polypeptide data from the result set's current row and create
   * a Polypeptide object.
   * 
   * @param key the primary key for the Genomicregion
   * @param rs the query result set
   * @return a Polypeptide instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static IPolypeptide getPolypeptideData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument tairObjectId gets the JDBC value with a function call.
    java.lang.Long tairObjectIdValue = rs.getLong("tairObjectId");
    // Constructor argument aaSequenceId gets the JDBC value with a function call.
    java.lang.Long aaSequenceIdValue = rs.getLong("aaSequenceId");
    // Constructor argument genbankDefinition gets the JDBC value with a function call.
    java.lang.String genbankDefinitionValue = rs.getString("genbankDefinition");
    // Constructor argument experimental gets the JDBC value with a function call.
    java.lang.Boolean experimentalValue = rs.getBoolean("experimental");
    if (rs.wasNull()) {
      experimentalValue = null;
    };
    // Constructor argument description gets the JDBC value with a function call.
    java.lang.String descriptionValue = rs.getString("description");
    // Constructor argument genbankGi gets the JDBC value with a function call.
    java.lang.String genbankGiValue = rs.getString("genbankGi");
    // Constructor argument PirAccession gets the JDBC value with a function call.
    java.lang.String PirAccessionValue = rs.getString("PirAccession");
    // Constructor argument pl gets the JDBC value with a function call.
    java.lang.Double plValue = rs.getDouble("pl");
    if (rs.wasNull()) {
      plValue = null;
    };
    // Constructor argument molecularWeight gets the JDBC value with a function call.
    java.lang.Double molecularWeightValue = rs.getDouble("molecularWeight");
    if (rs.wasNull()) {
      molecularWeightValue = null;
    };
    // Constructor argument ecNumber gets the JDBC value with a function call.
    java.lang.String ecNumberValue = rs.getString("ecNumber");
    // Constructor argument tremblId gets the JDBC value with a function call.
    java.lang.String tremblIdValue = rs.getString("tremblId");
    // Constructor argument swissProtId gets the JDBC value with a function call.
    java.lang.String swissProtIdValue = rs.getString("swissProtId");
    // Constructor argument uniProtId gets the JDBC value with a function call.
    java.lang.String uniProtIdValue = rs.getString("uniProtId");
    // Constructor argument dateEntered gets the JDBC value with a function call.
    java.sql.Timestamp dateEnteredValue = rs.getTimestamp("dateEntered");
    if (rs.wasNull()) {
      dateEnteredValue = null;
    };
    // Polypeptide has no lazily loaded members, so there is no need for Proxy.
    IPolypeptide newObject = 
      new Polypeptide(key, tairObjectIdValue, aaSequenceIdValue, genbankDefinitionValue, experimentalValue, descriptionValue, genbankGiValue, PirAccessionValue, plValue, molecularWeightValue, ecNumberValue, tremblIdValue, swissProtIdValue, uniProtIdValue, dateEnteredValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a Polypeptide based on a result set that must contain
   * the Polypeptide primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a Polypeptide CompositeKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getPolypeptidePrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    IPrimaryKey parentKey = getTranscriptPrimaryKey(rs, "");
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    java.lang.Long aaSequenceIdValue = rs.getLong("aaSequenceId");
    list.add(new com.poesys.db.col.LongColumnValue(prefix + "aaSequenceId", aaSequenceIdValue));
	IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.tair.db.genomicregion.Polypeptide");
    key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "org.tair.db.genomicregion.Polypeptide");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a Polypeptide based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param aaSequenceId the unique TAIR amino acid sequence identifier
   * @param tairObjectId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @return a Polypeptide CompositeKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getPolypeptidePrimaryKey(java.lang.Long aaSequenceId, java.lang.Long tairObjectId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    IPrimaryKey parentKey = getTranscriptPrimaryKey(tairObjectId);

    // Check the parent key; if it is null, the return key should be null.
    if (parentKey != null) {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.LongColumnValue("aaSequenceId", aaSequenceId));
	  IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.tair.db.genomicregion.Polypeptide");
      key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "org.tair.db.genomicregion.Polypeptide");
    }
    return key;
  }

  /**
   * <p>
   * Get a primary key for a Region based on a result set that must contain
   * the Region primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Region is abstract; only the getPrimaryKey method for a concrete
   * subclass may call this method to get the primary key from its superclass.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>NaturalKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a Region NaturalKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getRegionPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    java.lang.Long tairObjectIdValue = rs.getLong("tairObjectIdTairObjectId");

    list.add(new com.poesys.db.col.LongColumnValue(prefix + "tairObjectIdTairObjectId", tairObjectIdValue));
    key = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.tair.db.genomicregion.Region");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a Region based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Region is abstract; only the getPrimaryKey method for a concrete
   * subclass may call this method to get the primary key from its superclass.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>NaturalKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param tairObjectId the unique identifier in the TAIR database for the region (locus, gene,
chromosome, contig)
   * @return a Region NaturalKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getRegionPrimaryKey(java.lang.Long tairObjectId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Track generated inputs for nullity.
    boolean noNulls = true;
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    if (tairObjectId != null && noNulls) {
      list.add(new com.poesys.db.col.LongColumnValue("tairObjectIdTairObjectId", tairObjectId));
    } else {
      noNulls = false;
    }
    if (noNulls) {
      key = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.tair.db.genomicregion.Region");
    }
    return key;
  }

  /**
   * Retrieve the ReferenceGenome data from the result set's current row and create
   * a ReferenceGenome object.
   * 
   * @param key the primary key for the Genomicregion
   * @param rs the query result set
   * @return a ReferenceGenome instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static IReferenceGenome getReferenceGenomeData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument genome gets the JDBC value with a function call.
    java.lang.String genomeValue = rs.getString("genome");
    // Constructor argument dateEntered gets the JDBC value with a function call.
    java.sql.Timestamp dateEnteredValue = rs.getTimestamp("dateEntered");
    // Constructor argument taxonTaxonId gets the JDBC value with a function call.
    java.lang.Long taxonTaxonIdValue = rs.getLong("taxonTaxonId");
    // Constructor argument accession gets the JDBC value with a function call.
    java.lang.String accessionValue = rs.getString("accession");
    // Constructor argument name gets the JDBC value with a function call.
    java.lang.String nameValue = rs.getString("name");
    // Constructor argument referenceVariantTaxonId gets the JDBC value with a function call.
    java.lang.Long referenceVariantTaxonIdValue = rs.getLong("referenceVariantTaxonId");
    // ReferenceGenome has no lazily loaded members, so there is no need for Proxy.
    IReferenceGenome newObject = 
      new ReferenceGenome(key, genomeValue, dateEnteredValue, taxonTaxonIdValue, accessionValue, nameValue, referenceVariantTaxonIdValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a ReferenceGenome based on a result set that must contain
   * the ReferenceGenome primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>NaturalKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a ReferenceGenome NaturalKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getReferenceGenomePrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    java.lang.String genomeValue = rs.getString("genome");

    list.add(new com.poesys.db.col.StringColumnValue(prefix + "genome", genomeValue));
    key = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.tair.db.genomicregion.ReferenceGenome");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a ReferenceGenome based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>NaturalKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param genome the unique name for the reference genome, such as AGI or LYRATA
   * @return a ReferenceGenome NaturalKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getReferenceGenomePrimaryKey(java.lang.String genome)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Track generated inputs for nullity.
    boolean noNulls = true;
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    if (genome != null && noNulls) {
      list.add(new com.poesys.db.col.StringColumnValue("genome", genome));
    } else {
      noNulls = false;
    }
    if (noNulls) {
      key = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.tair.db.genomicregion.ReferenceGenome");
    }
    return key;
  }

  /**
   * Retrieve the Transcript data from the result set's current row and create
   * a Transcript object.
   * 
   * @param key the primary key for the Genomicregion
   * @param rs the query result set
   * @return a Transcript instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ITranscript getTranscriptData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument tairObjectId gets the JDBC value with a function call.
    java.lang.Long tairObjectIdValue = rs.getLong("tairObjectIdTairObjectId");
    // Constructor argument name gets the JDBC value with a function call.
    java.lang.String nameValue = rs.getString("name");
    // Constructor argument dateEntered gets the JDBC value with a function call.
    java.sql.Timestamp dateEnteredValue = rs.getTimestamp("dateEntered");
    // Constructor argument parentRegionTairObjectId gets the JDBC value with a function call.
    java.lang.Long parentRegionTairObjectIdValue = rs.getLong("parentRegionTairObjectId");
    if (rs.wasNull()) {
      tairObjectIdValue = null;
    };
    // Constructor argument genome gets the JDBC value with a function call.
    java.lang.String genomeValue = rs.getString("genome");
    // Constructor argument sequence gets the JDBC value with a function call.
    java.lang.String sequenceValue = rs.getString("sequence");
    // Constructor argument seqTairObjectId gets the JDBC value with a function call.
    java.lang.Long seqTairObjectIdValue = rs.getLong("seqTairObjectId");
    // Constructor argument genbankAccession gets the JDBC value with a function call.
    java.lang.String genbankAccessionValue = rs.getString("genbankAccession");
    // Constructor argument primarySymbol gets the JDBC value with a function call.
    java.lang.String primarySymbolValue = rs.getString("primarySymbol");
    // Constructor argument primarySymbolFullName gets the JDBC value with a function call.
    java.lang.String primarySymbolFullNameValue = rs.getString("primarySymbolFullName");
    // Constructor argument startPosition gets the JDBC value with a function call.
    java.lang.Long startPositionValue = rs.getLong("startPosition");
    // Constructor argument endPosition gets the JDBC value with a function call.
    java.lang.Long endPositionValue = rs.getLong("endPosition");
    // Constructor argument length gets the JDBC value with a function call.
    java.lang.Long lengthValue = rs.getLong("length");
    // Constructor argument orientation gets the JDBC value with a function call.
    java.lang.String orientationValue = rs.getString("orientation");
    // Constructor argument basis gets the JDBC value with a function call.
    java.lang.String basisValue = rs.getString("basis");
    // Constructor argument derived gets the JDBC value with a function call.
    java.lang.Boolean derivedValue = rs.getBoolean("derived");
    // Constructor argument representativeGeneModel gets the JDBC value with a function call.
    java.lang.Boolean representativeGeneModelValue = rs.getBoolean("representativeGeneModel");
    // Constructor argument transcribesTairObjectId gets the JDBC value with a function call.
    java.lang.Long transcribesTairObjectIdValue = rs.getLong("transcribesTairObjectId");
    // Transcript has no lazily loaded members, so there is no need for Proxy.
    ITranscript newObject = 
      new Transcript(key, tairObjectIdValue, nameValue, dateEnteredValue, parentRegionTairObjectIdValue, genomeValue, sequenceValue, seqTairObjectIdValue, genbankAccessionValue, primarySymbolValue, primarySymbolFullNameValue, startPositionValue, endPositionValue, lengthValue, orientationValue, basisValue, derivedValue, representativeGeneModelValue, transcribesTairObjectIdValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a Transcript based on a result set that must contain
   * the Transcript primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a Transcript None primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTranscriptPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    key = org.tair.db.genomicregion.GenomicregionFactory.getRegionPrimaryKey(rs, "");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a Transcript based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param tairObjectId the unique identifier in the TAIR database for the region (locus, gene,
chromosome, contig)
   * @return a Transcript None primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTranscriptPrimaryKey(java.lang.Long tairObjectId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    key = org.tair.db.genomicregion.GenomicregionFactory.getRegionPrimaryKey(tairObjectId);
    return key;
  }

  /**
   * Retrieve the Chromosome data from the result set's current row and create
   * a Chromosome object.
   * 
   * @param key the primary key for the Genomicregion
   * @param rs the query result set
   * @return a Chromosome instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static IChromosome getChromosomeData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument tairObjectId gets the JDBC value with a function call.
    java.lang.Long tairObjectIdValue = rs.getLong("tairObjectIdTairObjectId");
    // Constructor argument name gets the JDBC value with a function call.
    java.lang.String nameValue = rs.getString("name");
    // Constructor argument dateEntered gets the JDBC value with a function call.
    java.sql.Timestamp dateEnteredValue = rs.getTimestamp("dateEntered");
    // Constructor argument parentRegionTairObjectId gets the JDBC value with a function call.
    java.lang.Long parentRegionTairObjectIdValue = rs.getLong("parentRegionTairObjectId");
    if (rs.wasNull()) {
      tairObjectIdValue = null;
    };
    // Constructor argument genome gets the JDBC value with a function call.
    java.lang.String genomeValue = rs.getString("genome");
    // Constructor argument sequence gets the JDBC value with a function call.
    java.lang.String sequenceValue = rs.getString("sequence");
    // Chromosome has no lazily loaded members, so there is no need for Proxy.
    IChromosome newObject = 
      new Chromosome(key, tairObjectIdValue, nameValue, dateEnteredValue, parentRegionTairObjectIdValue, genomeValue, sequenceValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a Chromosome based on a result set that must contain
   * the Chromosome primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a Chromosome None primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getChromosomePrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    key = org.tair.db.genomicregion.GenomicregionFactory.getRegionPrimaryKey(rs, "");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a Chromosome based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param tairObjectId the unique identifier in the TAIR database for the region (locus, gene,
chromosome, contig)
   * @return a Chromosome None primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getChromosomePrimaryKey(java.lang.Long tairObjectId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    key = org.tair.db.genomicregion.GenomicregionFactory.getRegionPrimaryKey(tairObjectId);
    return key;
  }

  /**
   * Retrieve the Contig data from the result set's current row and create
   * a Contig object.
   * 
   * @param key the primary key for the Genomicregion
   * @param rs the query result set
   * @return a Contig instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static IContig getContigData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument tairObjectId gets the JDBC value with a function call.
    java.lang.Long tairObjectIdValue = rs.getLong("tairObjectIdTairObjectId");
    // Constructor argument name gets the JDBC value with a function call.
    java.lang.String nameValue = rs.getString("name");
    // Constructor argument dateEntered gets the JDBC value with a function call.
    java.sql.Timestamp dateEnteredValue = rs.getTimestamp("dateEntered");
    // Constructor argument parentRegionTairObjectId gets the JDBC value with a function call.
    java.lang.Long parentRegionTairObjectIdValue = rs.getLong("parentRegionTairObjectId");
    if (rs.wasNull()) {
      tairObjectIdValue = null;
    };
    // Constructor argument genome gets the JDBC value with a function call.
    java.lang.String genomeValue = rs.getString("genome");
    // Constructor argument sequence gets the JDBC value with a function call.
    java.lang.String sequenceValue = rs.getString("sequence");
    // Contig has no lazily loaded members, so there is no need for Proxy.
    IContig newObject = 
      new Contig(key, tairObjectIdValue, nameValue, dateEnteredValue, parentRegionTairObjectIdValue, genomeValue, sequenceValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a Contig based on a result set that must contain
   * the Contig primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a Contig None primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getContigPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    key = org.tair.db.genomicregion.GenomicregionFactory.getRegionPrimaryKey(rs, "");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a Contig based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param tairObjectId the unique identifier in the TAIR database for the region (locus, gene,
chromosome, contig)
   * @return a Contig None primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getContigPrimaryKey(java.lang.Long tairObjectId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    key = org.tair.db.genomicregion.GenomicregionFactory.getRegionPrimaryKey(tairObjectId);
    return key;
  }

  /**
   * Retrieve the Gene data from the result set's current row and create
   * a Gene object.
   * 
   * @param key the primary key for the Genomicregion
   * @param rs the query result set
   * @return a Gene instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static IGene getGeneData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument tairObjectId gets the JDBC value with a function call.
    java.lang.Long tairObjectIdValue = rs.getLong("tairObjectIdTairObjectId");
    // Constructor argument name gets the JDBC value with a function call.
    java.lang.String nameValue = rs.getString("name");
    // Constructor argument dateEntered gets the JDBC value with a function call.
    java.sql.Timestamp dateEnteredValue = rs.getTimestamp("dateEntered");
    // Constructor argument parentRegionTairObjectId gets the JDBC value with a function call.
    java.lang.Long parentRegionTairObjectIdValue = rs.getLong("parentRegionTairObjectId");
    if (rs.wasNull()) {
      tairObjectIdValue = null;
    };
    // Constructor argument genome gets the JDBC value with a function call.
    java.lang.String genomeValue = rs.getString("genome");
    // Constructor argument curatedSummary gets the JDBC value with a function call.
    java.lang.String curatedSummaryValue = rs.getString("curatedSummary");
    // Gene has no lazily loaded members, so there is no need for Proxy.
    IGene newObject = 
      new Gene(key, tairObjectIdValue, nameValue, dateEnteredValue, parentRegionTairObjectIdValue, genomeValue, curatedSummaryValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a Gene based on a result set that must contain
   * the Gene primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a Gene None primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getGenePrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    key = org.tair.db.genomicregion.GenomicregionFactory.getRegionPrimaryKey(rs, "");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a Gene based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param tairObjectId the unique identifier in the TAIR database for the region (locus, gene,
chromosome, contig)
   * @return a Gene None primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getGenePrimaryKey(java.lang.Long tairObjectId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    key = org.tair.db.genomicregion.GenomicregionFactory.getRegionPrimaryKey(tairObjectId);
    return key;
  }

  /**
   * Retrieve the ExperimentalCdna data from the result set's current row and create
   * a ExperimentalCdna object.
   * 
   * @param key the primary key for the Genomicregion
   * @param rs the query result set
   * @return a ExperimentalCdna instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static IExperimentalCdna getExperimentalCdnaData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument tairObjectId gets the JDBC value with a function call.
    java.lang.Long tairObjectIdValue = rs.getLong("tairObjectId");
    // Constructor argument seqTairObjectId gets the JDBC value with a function call.
    java.lang.Long seqTairObjectIdValue = rs.getLong("seqTairObjectId");
    // Constructor argument name gets the JDBC value with a function call.
    java.lang.String nameValue = rs.getString("name");
    // Constructor argument sequence gets the JDBC value with a function call.
    java.lang.String sequenceValue = rs.getString("sequence");
    // Constructor argument genbankAccession gets the JDBC value with a function call.
    java.lang.String genbankAccessionValue = rs.getString("genbankAccession");
    // Constructor argument vectorType gets the JDBC value with a function call.
    java.lang.String vectorTypeValue = rs.getString("vectorType");
    // Constructor argument fullLengthCds gets the JDBC value with a function call.
    java.lang.Boolean fullLengthCdsValue = rs.getBoolean("fullLengthCds");
    // Constructor argument length gets the JDBC value with a function call.
    java.lang.Long lengthValue = rs.getLong("length");
    // Constructor argument startPosition gets the JDBC value with a function call.
    java.lang.Long startPositionValue = rs.getLong("startPosition");
    // Constructor argument endPosition gets the JDBC value with a function call.
    java.lang.Long endPositionValue = rs.getLong("endPosition");
    // Constructor argument dateEntered gets the JDBC value with a function call.
    java.sql.Timestamp dateEnteredValue = rs.getTimestamp("dateEntered");
    if (rs.wasNull()) {
      dateEnteredValue = null;
    };
    // ExperimentalCdna has no lazily loaded members, so there is no need for Proxy.
    IExperimentalCdna newObject = 
      new ExperimentalCdna(key, tairObjectIdValue, seqTairObjectIdValue, nameValue, sequenceValue, genbankAccessionValue, vectorTypeValue, fullLengthCdsValue, lengthValue, startPositionValue, endPositionValue, dateEnteredValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a ExperimentalCdna based on a result set that must contain
   * the ExperimentalCdna primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a ExperimentalCdna CompositeKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getExperimentalCdnaPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    IPrimaryKey parentKey = getTranscriptPrimaryKey(rs, "");
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    java.lang.Long seqTairObjectIdValue = rs.getLong("seqTairObjectId");
    list.add(new com.poesys.db.col.LongColumnValue(prefix + "seqTairObjectId", seqTairObjectIdValue));
	IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.tair.db.genomicregion.ExperimentalCdna");
    key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "org.tair.db.genomicregion.ExperimentalCdna");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a ExperimentalCdna based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param seqTairObjectId the unique TAIR identifier for the cDNA sequence
   * @param tairObjectId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @return a ExperimentalCdna CompositeKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getExperimentalCdnaPrimaryKey(java.lang.Long seqTairObjectId, java.lang.Long tairObjectId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    IPrimaryKey parentKey = getTranscriptPrimaryKey(tairObjectId);

    // Check the parent key; if it is null, the return key should be null.
    if (parentKey != null) {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.LongColumnValue("seqTairObjectId", seqTairObjectId));
	  IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.tair.db.genomicregion.ExperimentalCdna");
      key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "org.tair.db.genomicregion.ExperimentalCdna");
    }
    return key;
  }

}