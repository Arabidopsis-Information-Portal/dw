/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDtoProxy.vsl

package org.tair.db.genomicregion;


import com.poesys.db.dto.AbstractLazyLoadingDtoProxy;


/**
 * <p>
 * A data-access layer data-transfer object (DTO) lazy-loading proxy for the 
 * Gene. This class is an abstract class that contains AndroMDA 
 * generated code; change nothing in this class. Instead, override any methods 
 * in the concrete subclass generated in the same package. AndroMDA will 
 * overwrite this class each time you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * SO_0000704: A region (or regions) that includes all of the sequence elements
 * necessary to encode a functional transcript. A gene may include regulatory
 * regions, transcribed regions and/or other functional sequence regions.
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractGeneProxy extends AbstractLazyLoadingDtoProxy implements IGene {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  


  /**
   * Read-Object setter for de-serializing nested transcripts collection
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see org.tair.db.genomicregion.sql.QueryTranscript
   */
  private class ReadTranscriptsSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.tair.db.genomicregion.ITranscript> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadTranscriptsSetter object to read the transcripts collection.
     */
    public ReadTranscriptsSetter() {
      super("org.tair.db.genomicregion", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.genomicregion.Transcript.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.genomicregion.ITranscript> getObjectCollection() {
      java.util.Collection<org.tair.db.genomicregion.ITranscript> transcripts =  ((org.tair.db.genomicregion.Gene)dto).getTranscripts();
      return transcripts;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.tair.db.genomicregion.Gene)dto).transcriptsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.genomicregion.ITranscript> getSql() {
      return new org.tair.db.genomicregion.sql.QueryTranscript();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.genomicregion.ITranscript> collection) {
      ((org.tair.db.genomicregion.Gene)dto).transcripts = collection;
    }
  }


  public void addTranscriptsTranscript(org.tair.db.genomicregion.ITranscript object) {
    ((Gene)dto).addTranscriptsTranscript(object);
  }

  /**
   * Create a GeneProxy. The concrete subclass must call this constructor.
   *
   * @param dto the DTO to proxy
   */
  public AbstractGeneProxy(Gene dto) {
    super(dto);

    // Setter arrays
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters.add(new ReadTranscriptsSetter());
  }

  @Override
  public boolean equals(Object obj) {
    AbstractGeneProxy otherProxy = (AbstractGeneProxy)obj;
    return ((Gene)dto).equals(otherProxy.dto);
  }

  @Override
  public int hashCode() {
    return ((Gene)dto).hashCode();
  }
  // Inherited properties

  public java.lang.Long getTairObjectId() {
    return ((IGene)dto).getTairObjectId();
  }

  public org.tair.db.genomicregion.IRegion getParent() {
    return ((IGene)dto).getParent();
  }

  /**
   * Set the property parent.
   * 
   * @param parent the value for the property
   */
  public void setParent(org.tair.db.genomicregion.IRegion parent)
      {
    ((Gene)dto).setParent(parent);
  }

  public org.tair.db.genomicregion.IReferenceGenome getReferenceGenome() {
    return ((IGene)dto).getReferenceGenome();
  }

  /**
   * Set the property referenceGenome.
   * 
   * @param referenceGenome the value for the property
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  public void setReferenceGenome(org.tair.db.genomicregion.IReferenceGenome referenceGenome)
      throws com.poesys.db.InvalidParametersException {
    ((Gene)dto).setReferenceGenome(referenceGenome);
  }

  public java.lang.String getName() {
    return ((IGene)dto).getName();
  }

  /**
   * Set the property name.
   * 
   * @param name the value for the property
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  public void setName(java.lang.String name)
      throws com.poesys.db.InvalidParametersException {
    ((Gene)dto).setName(name);
  }

  public java.sql.Timestamp getDateEntered() {
    return ((IGene)dto).getDateEntered();
  }

  /**
   * Set the property dateEntered.
   * 
   * @param dateEntered the value for the property
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  public void setDateEntered(java.sql.Timestamp dateEntered)
      throws com.poesys.db.InvalidParametersException {
    ((Gene)dto).setDateEntered(dateEntered);
  }

  public java.lang.Long getParentRegionTairObjectId() {
    return ((IGene)dto).getParentRegionTairObjectId();
  }

  public java.lang.String getGenome() {
    return ((IGene)dto).getGenome();
  }

  // Local properties (attributes, associations, and association classes)

  // Source: AddLocalAttributeProperties
  public java.lang.String getCuratedSummary() {
    return ((Gene)dto).getCuratedSummary();
  }

  public void setCuratedSummary(java.lang.String curatedSummary)
      {
    ((Gene)dto).setCuratedSummary(curatedSummary);
  }

  // Source: TransformToProperty + AddToManyAssociationCollectionProperties
  public java.util.Collection<org.tair.db.genomicregion.ITranscript> getTranscripts() {
    return ((Gene)dto).getTranscripts();
  }

  public void setTranscripts(java.util.Collection<org.tair.db.genomicregion.ITranscript> transcripts)
      throws com.poesys.db.InvalidParametersException {
    ((Gene)dto).setTranscripts(transcripts);
  }

  public void markChildrenDeleted() throws com.poesys.db.dto.DtoStatusException {
  	((Gene)dto).markChildrenDeleted();
  }
}