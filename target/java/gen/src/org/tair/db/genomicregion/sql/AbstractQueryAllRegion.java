/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractQueryAll.vsl

package org.tair.db.genomicregion.sql;


import java.sql.ResultSet;
import java.sql.SQLException;

import com.poesys.db.InvalidParametersException;
import com.poesys.db.dao.query.IQuerySql;
import com.poesys.db.pk.IPrimaryKey;

import org.tair.db.genomicregion.GenomicregionFactory;


/**
 * <p>
 * A query Command pattern object that implements a SQL query for all the 
 * Region objects in the database; use with caution
 * </p>
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractQueryAllRegion implements IQuerySql<org.tair.db.genomicregion.IRegion> {
  /** SQL query statement for Region */
  private static final String SQL =
    "SELECT Region.tairObjectIdTairObjectId, Region.name, Region.dateEntered, Region.parentRegionTairObjectId, Region.genome, Transcript.parentRegionTairObjectId, Transcript.genome, Transcript.sequence, Transcript.seqTairObjectId, Transcript.genbankAccession, Transcript.primarySymbol, Transcript.primarySymbolFullName, Transcript.startPosition, Transcript.endPosition, Transcript.length, Transcript.orientation, Transcript.basis, Transcript.derived, Transcript.representativeGeneModel, Transcript.transcribesTairObjectId, Chromosome.parentRegionTairObjectId, Chromosome.genome, Chromosome.sequence, Contig.parentRegionTairObjectId, Contig.genome, Contig.sequence, Gene.parentRegionTairObjectId, Gene.genome, Gene.curatedSummary, CASE WHEN Transcript.tairObjectIdTairObjectId IS NOT NULL THEN 'Transcript' WHEN Chromosome.tairObjectIdTairObjectId IS NOT NULL THEN 'Chromosome' WHEN Contig.tairObjectIdTairObjectId IS NOT NULL THEN 'Contig' WHEN Gene.tairObjectIdTairObjectId IS NOT NULL THEN 'Gene' ELSE NULL END AS discriminant FROM Region LEFT OUTER JOIN Transcript Transcript ON Region.tairObjectIdTairObjectId = Transcript.tairObjectIdTairObjectId LEFT OUTER JOIN Chromosome Chromosome ON Region.tairObjectIdTairObjectId = Chromosome.tairObjectIdTairObjectId LEFT OUTER JOIN Contig Contig ON Region.tairObjectIdTairObjectId = Contig.tairObjectIdTairObjectId LEFT OUTER JOIN Gene Gene ON Region.tairObjectIdTairObjectId = Gene.tairObjectIdTairObjectId";

  public org.tair.db.genomicregion.IRegion getData(ResultSet rs) throws SQLException {
    IPrimaryKey key = 
      GenomicregionFactory.getRegionPrimaryKey(rs, "");
      
    // Region has subclasses, so the query returns an object of the actual
    // type rather than just of type Region. It uses a discriminant expression
    // that the result set returns to figure out which class to instantiate.
    
    // Get the discriminant from the result set.
    String discriminant = rs.getString("discriminant");
    
    // Check whether the discriminant is null and throw exception.
    if (discriminant == null) {
      throw new com.poesys.bs.delegate.DelegateException("Missing subclass for queried object of superclass org.tair.db.genomicregion.Region");
    }
    
    org.tair.db.genomicregion.IRegion data = null;
    // Check for Transcript, set return only if not already set
    if (discriminant.equals("Transcript") && data == null) {
      // Use the genomicregion factory to get the data.
      data = 
        (org.tair.db.genomicregion.IRegion)org.tair.db.genomicregion.GenomicregionFactory.getTranscriptData(key, rs);
    }
    // Check for Chromosome, set return only if not already set
    if (discriminant.equals("Chromosome") && data == null) {
      // Use the genomicregion factory to get the data.
      data = 
        (org.tair.db.genomicregion.IRegion)org.tair.db.genomicregion.GenomicregionFactory.getChromosomeData(key, rs);
    }
    // Check for Contig, set return only if not already set
    if (discriminant.equals("Contig") && data == null) {
      // Use the genomicregion factory to get the data.
      data = 
        (org.tair.db.genomicregion.IRegion)org.tair.db.genomicregion.GenomicregionFactory.getContigData(key, rs);
    }
    // Check for Gene, set return only if not already set
    if (discriminant.equals("Gene") && data == null) {
      // Use the genomicregion factory to get the data.
      data = 
        (org.tair.db.genomicregion.IRegion)org.tair.db.genomicregion.GenomicregionFactory.getGeneData(key, rs);
    }
    return data;
  }
  
  public IPrimaryKey getPrimaryKey(ResultSet rs) throws SQLException,
      InvalidParametersException {
    return GenomicregionFactory.getRegionPrimaryKey(rs, "");
  }

  public String getSql() {
    return SQL;
  }
}