/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package org.tair.db.genomicregion;


import com.poesys.db.pk.IPrimaryKey;

/**
 * <p>
 * A data-access layer data-transfer object for the Gene. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * SO_0000704: A region (or regions) that includes all of the sequence elements
 * necessary to encode a functional transcript. A gene may include regulatory
 * regions, transcribed regions and/or other functional sequence regions.
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractGene extends org.tair.db.genomicregion.Region implements IGene {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  
  // Setter strategy nested classes for multiple-object associations

  /**
   * Query setter for querying nested transcripts
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see org.tair.db.genomicregion.sql.QueryTranscriptsByGene
   */
  private class QueryTranscriptsSetter 
      extends com.poesys.db.dto.AbstractListSetter<org.tair.db.genomicregion.ITranscript, IGene, java.util.Collection<org.tair.db.genomicregion.ITranscript>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryTranscriptsSetter object.
     */
    public QueryTranscriptsSetter() {
      super("org.tair.db.genomicregion", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.genomicregion.Transcript.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected IGene getParametersDto() {
      return AbstractGene.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.tair.db.genomicregion.ITranscript, IGene> getSql() {
      return new org.tair.db.genomicregion.sql.QueryTranscriptsByGene();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.genomicregion.ITranscript> list) {
      // No status change; this is just filling in the object data.
      transcripts = list;
      // Add the primary keys to the serialized key list if there are any.
      if (transcripts != null) {
        for (com.poesys.db.dto.IDbDto object : transcripts) {
          transcriptsKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated transcripts list is not null
      return transcripts != null;
    }
  }

  /**
   * Read-Object setter for de-serializing nested transcripts collection
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see org.tair.db.genomicregion.sql.QueryTranscript
   */
  private class ReadTranscriptsSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.tair.db.genomicregion.ITranscript> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadTranscriptsSetter object to read the transcripts collection.
     */
    public ReadTranscriptsSetter() {
      super("org.tair.db.genomicregion", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.genomicregion.Transcript.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.genomicregion.ITranscript> getObjectCollection() {
      return transcripts;
    }

    @Override
    protected java.util.List<IPrimaryKey> getPrimaryKeys() {
      return transcriptsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.genomicregion.ITranscript> getSql() {
      return new org.tair.db.genomicregion.sql.QueryTranscript();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.genomicregion.ITranscript> collection) {
      transcripts = collection;
    }
  }

  /**
   * Insert setter for inserting nested transcripts.
   *
   * @see org.tair.db.genomicregion.sql.InsertTranscript
   */
  private class InsertTranscriptsSetter 
      extends com.poesys.db.dto.AbstractBatchInsertSetter<org.tair.db.genomicregion.ITranscript, java.util.Collection<org.tair.db.genomicregion.ITranscript>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;
    
    // transcripts source: TransformToProperty + AddToManyAssociationCollectionProperties

    /**
     * Create an InsertTranscriptsSetter object.
     */
    public InsertTranscriptsSetter() {
      super("org.tair.db.genomicregion", 2147483647);
    }

    @Override
    protected int getBatchSize() {
      return BATCH_SIZE;
    }

    @Override
    protected String getClassName() {
      return org.tair.db.genomicregion.Transcript.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.genomicregion.ITranscript> getDtos() {
      return transcripts;
    }

    @Override
    protected com.poesys.db.dao.insert.IInsertSql<org.tair.db.genomicregion.ITranscript> getSql() {
      return new org.tair.db.genomicregion.sql.InsertTranscript();
    }
  }

  /**
   * Setter for processing added transcripts, updated transcripts, and 
   * deleted transcripts. 
   */
   
  private class UpdateTranscriptsSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<org.tair.db.genomicregion.ITranscript, java.util.Collection<org.tair.db.genomicregion.ITranscript>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdateTranscriptsSetter object.
     */
    public UpdateTranscriptsSetter() {
      super("org.tair.db.genomicregion", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, java.util.Collection<org.tair.db.genomicregion.ITranscript> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
        // transcripts source: TransformToProperty + AddToManyAssociationCollectionProperties
        // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.genomicregion.ITranscript> factory = 
        manager.getFactory(org.tair.db.genomicregion.Transcript.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<org.tair.db.genomicregion.ITranscript> dao =
        factory.getUpdateBatch(new org.tair.db.genomicregion.sql.UpdateTranscript());
      dao.update(connection, dtos, BATCH_SIZE);
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, java.util.Collection<org.tair.db.genomicregion.ITranscript> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.genomicregion.ITranscript> factory = 
        manager.getFactory(org.tair.db.genomicregion.Transcript.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<org.tair.db.genomicregion.ITranscript> dao = 
        factory.getDeleteBatch(new org.tair.db.genomicregion.sql.DeleteTranscript());
      dao.delete(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.sql.Connection connection, java.util.Collection<org.tair.db.genomicregion.ITranscript> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.genomicregion.ITranscript> factory = 
        manager.getFactory(org.tair.db.genomicregion.Transcript.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<org.tair.db.genomicregion.ITranscript> dao =
        factory.getInsertBatch(new org.tair.db.genomicregion.sql.InsertTranscript());
      dao.insert(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected java.util.Collection<org.tair.db.genomicregion.ITranscript> getDtos() {
      return transcripts;
    }
    
    @Override
    protected String getClassName() {
      return org.tair.db.genomicregion.Transcript.class.getName();
    }
  }

  public void addTranscriptsTranscript(org.tair.db.genomicregion.ITranscript object) {
    if (transcripts == null) {
      // Association not yet created, create it.
      transcripts = new java.util.concurrent.CopyOnWriteArrayList<org.tair.db.genomicregion.ITranscript>();
    }
    transcripts.add(object);
    // Add the primary key to the primary key array.
    transcriptsKeys.add(object.getPrimaryKey());
  }
   
  /**
   * Create an empty Gene for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractGene() {
    super();
    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    
    // Add the many-to-many collection setters for the transcripts property.
    querySetters.add(new QueryTranscriptsSetter());
    readObjectSetters.add(new ReadTranscriptsSetter());
    insertSetters.add(new InsertTranscriptsSetter());
    postSetters.add(new UpdateTranscriptsSetter());
  }

  /**
   * Create a Gene. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the Gene
   * @param tairObjectId the unique identifier in the TAIR database for the region (locus, gene,
chromosome, contig)
   * @param name the name of the genomic region, such as the chromosome name (1, M), the
locus/gene name (AT1G01010), the transcript name (AT1G01010.1), or the contig
name (MI421-MI421); may or may not be unique within a genome
   * @param dateEntered the date on which the region was created in the source database
   * @param parentRegionTairObjectId foreign key used by setter to query associated object
   * @param genome foreign key used by setter to query associated object
   * @param curatedSummary an optional, general summary of the locus written by a curator; not a gene model
summary
   */
  public AbstractGene(IPrimaryKey key, java.lang.Long tairObjectId, java.lang.String name, java.sql.Timestamp dateEntered, java.lang.Long parentRegionTairObjectId, java.lang.String genome, java.lang.String curatedSummary) {
    super(key, tairObjectId, name, dateEntered, parentRegionTairObjectId, genome);

    this.curatedSummary = curatedSummary;

    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    
    // Add the many-to-many collection setters for the transcripts property.
    querySetters.add(new QueryTranscriptsSetter());
    readObjectSetters.add(new ReadTranscriptsSetter());
    insertSetters.add(new InsertTranscriptsSetter());
    postSetters.add(new UpdateTranscriptsSetter());
  }


  /**
   * Nested property curatedSummary
   *
   * <p>
   * an optional, general summary of the locus written by a curator; not a gene model
   * summary
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.String curatedSummary;
  

  public java.lang.String getCuratedSummary() {
    return curatedSummary;
  }

  /**
   * Clear the curatedSummary data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearCuratedSummary() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the curatedSummary.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * an optional, general summary of the locus written by a curator; not a gene model
   * summary
   * </p>
   *
   * @param curatedSummary the value with which to set the property
   */
  public  void setCuratedSummary(java.lang.String curatedSummary) {
    this.curatedSummary = curatedSummary;
    setChanged();
  }

  /**
   * Nested property transcripts
   *
   * 
   *
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.tair.db.genomicregion.ITranscript> transcripts;
  // Ordered list of keys of the objects in the $property.uniquename list
  java.util.List<com.poesys.db.pk.IPrimaryKey> transcriptsKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  

  public java.util.Collection<org.tair.db.genomicregion.ITranscript> getTranscripts() {
    return transcripts;
  }

  /**
   * Clear the transcripts data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTranscripts() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the transcripts.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * 
   *
   * @param transcripts the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input transcripts is null
   */
  public void setTranscripts(java.util.Collection<org.tair.db.genomicregion.ITranscript> transcripts)
      throws com.poesys.db.InvalidParametersException {
    if (transcripts == null) {
      throw new com.poesys.db.InvalidParametersException("transcripts is required");
    }
    
    this.transcripts = transcripts;
    // Add the primary keys of the new collection to the serialized key list.
    transcriptsKeys.clear();
    if (transcripts != null) {
      for (com.poesys.db.dto.IDbDto object : transcripts) {
        transcriptsKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {
  }
}