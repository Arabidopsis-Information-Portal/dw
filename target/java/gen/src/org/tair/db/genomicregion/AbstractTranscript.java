/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package org.tair.db.genomicregion;


import com.poesys.db.pk.IPrimaryKey;

/**
 * <p>
 * A data-access layer data-transfer object for the Transcript. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * SO:0000673: An RNA synthesized on a DNA or RNA template by an RNA polymerase.
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractTranscript extends org.tair.db.genomicregion.Region implements ITranscript {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  // Setter strategy nested classes for single-object associations
  
  /**
   * Nested class that manages the transcribes association data
   *
   * Source: AddToOneAssociationRequiredObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryTranscribesSetter extends com.poesys.db.dto.AbstractObjectSetter<org.tair.db.genomicregion.IGene> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryTranscribesSetter object.
     */
    public QueryTranscribesSetter() {
      super("org.tair.db.genomicregion", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.genomicregion.Gene.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return transcribesKey;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.genomicregion.IGene> getSql() {
      return new org.tair.db.genomicregion.sql.QueryGene();
    }

    @Override
    protected void set(org.tair.db.genomicregion.IGene dto) {
      // No status change, this is just filling in the object data.
      transcribes = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated transcribes is not null
      return transcribes != null;
    }
  }

  /**
   * Insert setter for inserting nested transcribes.
   */
  private class InsertTranscribesSetter 
      extends com.poesys.db.dto.AbstractInsertSetter<org.tair.db.genomicregion.IGene> {
    // transcribes source: AddToOneAssociationRequiredObjectProperties
    private static final long serialVersionUID = 1L;

    /**
     * Create an InsertTranscribesSetter object.
     */
    public InsertTranscribesSetter() {
      super("org.tair.db.genomicregion", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.genomicregion.Gene.class.getName();
    }

    @Override
    protected org.tair.db.genomicregion.IGene getDto() {
      return transcribes;
    }

    @Override
    protected com.poesys.db.dao.insert.IInsertSql<org.tair.db.genomicregion.IGene> getSql() {
      return new org.tair.db.genomicregion.sql.InsertGene();
    }
    
    @Override
    protected boolean createKey() {
      // Key type: None
      return true;
    }
  }

  /**
   * Setter for processing added transcribes, updated transcribes, and 
   * deleted transcribes. 
   */
   
  private class UpdateTranscribesSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObject<org.tair.db.genomicregion.IGene> {
    private static final long serialVersionUID = 1L;

    /**
     * Create an UpdateTranscribesSetter object.
     */
    public UpdateTranscribesSetter() {
      super("org.tair.db.genomicregion", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, org.tair.db.genomicregion.IGene dto)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
        // transcribes source: AddToOneAssociationRequiredObjectProperties
        // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.genomicregion.IGene> factory = 
        manager.getFactory(org.tair.db.genomicregion.Gene.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdate<org.tair.db.genomicregion.IGene> dao = 
        factory.getUpdate(new org.tair.db.genomicregion.sql.UpdateGene());
      dao.update(connection, dto);
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, org.tair.db.genomicregion.IGene dto)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.genomicregion.IGene> factory = 
        manager.getFactory(org.tair.db.genomicregion.Gene.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDelete<org.tair.db.genomicregion.IGene> dao = 
        factory.getDelete(new org.tair.db.genomicregion.sql.DeleteGene());
      dao.delete(connection, dto);
    }

    @Override
    protected void doNew(java.sql.Connection connection, org.tair.db.genomicregion.IGene dto)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.genomicregion.IGene> factory = 
        manager.getFactory(org.tair.db.genomicregion.Gene.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsert<org.tair.db.genomicregion.IGene> dao =
        factory.getInsert(new org.tair.db.genomicregion.sql.InsertGene(), createKey());
      dao.insert(connection, dto);
    }

    @Override
    protected org.tair.db.genomicregion.IGene getDto() {
      return transcribes;
    }
    
    @Override
    protected String getClassName() {
      return org.tair.db.genomicregion.Gene.class.getName();
    }

    @Override
    protected boolean createKey() {
      // Key type: None
      return true;
    }
  }

  /**
   * Foreign key object used by QueryTranscribesSetter nested class to query object
   */
  private IPrimaryKey transcribesKey;
  
  /**
   * Set the foreign key transcribesKey. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param transcribesKey the foreign key
   */
  void setTranscribesKey(IPrimaryKey transcribesKey) {
    this.transcribesKey = transcribesKey;
  }

  // Setter strategy nested classes for multiple-object associations

  /**
   * Query setter for querying nested ests
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.genomicregion.sql.QueryEstsByTranscript
   */
  private class QueryEstsSetter 
      extends com.poesys.db.dto.AbstractListSetter<org.tair.db.genomicregion.IEst, ITranscript, java.util.Collection<org.tair.db.genomicregion.IEst>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryEstsSetter object.
     */
    public QueryEstsSetter() {
      super("org.tair.db.genomicregion", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.genomicregion.Est.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ITranscript getParametersDto() {
      return AbstractTranscript.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.tair.db.genomicregion.IEst, ITranscript> getSql() {
      return new org.tair.db.genomicregion.sql.QueryEstsByTranscript();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.genomicregion.IEst> list) {
      // No status change; this is just filling in the object data.
      ests = list;
      // Add the primary keys to the serialized key list if there are any.
      if (ests != null) {
        for (com.poesys.db.dto.IDbDto object : ests) {
          estsKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated ests list is not null
      return ests != null;
    }
  }

  /**
   * Read-Object setter for de-serializing nested ests collection
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.genomicregion.sql.QueryEst
   */
  private class ReadEstsSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.tair.db.genomicregion.IEst> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadEstsSetter object to read the ests collection.
     */
    public ReadEstsSetter() {
      super("org.tair.db.genomicregion", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.genomicregion.Est.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.genomicregion.IEst> getObjectCollection() {
      return ests;
    }

    @Override
    protected java.util.List<IPrimaryKey> getPrimaryKeys() {
      return estsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.genomicregion.IEst> getSql() {
      return new org.tair.db.genomicregion.sql.QueryEst();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.genomicregion.IEst> collection) {
      ests = collection;
    }
  }
   
  public void addEstsEst(org.tair.db.genomicregion.IEst object) {
    if (ests == null) {
      // Association not yet created, create it.
      ests = new java.util.concurrent.CopyOnWriteArrayList<org.tair.db.genomicregion.IEst>();
    }
    ests.add(object);
    // Add the primary key to the primary key array.
    estsKeys.add(object.getPrimaryKey());
  }
   
  /**
   * Query setter for querying nested proteins
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.genomicregion.sql.QueryProteinsByTranscript
   */
  private class QueryProteinsSetter 
      extends com.poesys.db.dto.AbstractListSetter<org.tair.db.genomicregion.IPolypeptide, ITranscript, java.util.Collection<org.tair.db.genomicregion.IPolypeptide>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryProteinsSetter object.
     */
    public QueryProteinsSetter() {
      super("org.tair.db.genomicregion", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.genomicregion.Polypeptide.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ITranscript getParametersDto() {
      return AbstractTranscript.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.tair.db.genomicregion.IPolypeptide, ITranscript> getSql() {
      return new org.tair.db.genomicregion.sql.QueryProteinsByTranscript();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.genomicregion.IPolypeptide> list) {
      // No status change; this is just filling in the object data.
      proteins = list;
      // Add the primary keys to the serialized key list if there are any.
      if (proteins != null) {
        for (com.poesys.db.dto.IDbDto object : proteins) {
          proteinsKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated proteins list is not null
      return proteins != null;
    }
  }

  /**
   * Read-Object setter for de-serializing nested proteins collection
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.genomicregion.sql.QueryPolypeptide
   */
  private class ReadProteinsSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.tair.db.genomicregion.IPolypeptide> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadProteinsSetter object to read the proteins collection.
     */
    public ReadProteinsSetter() {
      super("org.tair.db.genomicregion", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.genomicregion.Polypeptide.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.genomicregion.IPolypeptide> getObjectCollection() {
      return proteins;
    }

    @Override
    protected java.util.List<IPrimaryKey> getPrimaryKeys() {
      return proteinsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.genomicregion.IPolypeptide> getSql() {
      return new org.tair.db.genomicregion.sql.QueryPolypeptide();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.genomicregion.IPolypeptide> collection) {
      proteins = collection;
    }
  }

  /**
   * Insert setter for inserting nested proteins.
   *
   * @see org.tair.db.genomicregion.sql.InsertPolypeptide
   */
  private class InsertProteinsSetter 
      extends com.poesys.db.dto.AbstractBatchInsertSetter<org.tair.db.genomicregion.IPolypeptide, java.util.Collection<org.tair.db.genomicregion.IPolypeptide>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;
    
    // proteins source: AddToManyChildCollectionProperties

    /**
     * Create an InsertProteinsSetter object.
     */
    public InsertProteinsSetter() {
      super("org.tair.db.genomicregion", 2147483647);
    }

    @Override
    protected int getBatchSize() {
      return BATCH_SIZE;
    }

    @Override
    protected String getClassName() {
      return org.tair.db.genomicregion.Polypeptide.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.genomicregion.IPolypeptide> getDtos() {
      return proteins;
    }

    @Override
    protected com.poesys.db.dao.insert.IInsertSql<org.tair.db.genomicregion.IPolypeptide> getSql() {
      return new org.tair.db.genomicregion.sql.InsertPolypeptide();
    }
  }

  /**
   * Setter for processing added proteins and updated proteins.
   * Deleted proteins are deleted in the database cascade delete.
   */
   
  private class UpdateProteinsSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<org.tair.db.genomicregion.IPolypeptide, java.util.Collection<org.tair.db.genomicregion.IPolypeptide>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdateProteinsSetter object.
     */
    public UpdateProteinsSetter() {
      super("org.tair.db.genomicregion", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, java.util.Collection<org.tair.db.genomicregion.IPolypeptide> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
        // proteins source: AddToManyChildCollectionProperties
        // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.genomicregion.IPolypeptide> factory = 
        manager.getFactory(org.tair.db.genomicregion.Polypeptide.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<org.tair.db.genomicregion.IPolypeptide> dao =
        factory.getUpdateBatch(new org.tair.db.genomicregion.sql.UpdatePolypeptide());
      dao.update(connection, dtos, BATCH_SIZE);
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, java.util.Collection<org.tair.db.genomicregion.IPolypeptide> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.genomicregion.IPolypeptide> factory = 
        manager.getFactory(org.tair.db.genomicregion.Polypeptide.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<org.tair.db.genomicregion.IPolypeptide> dao = 
        factory.getDeleteBatch(new org.tair.db.genomicregion.sql.DeletePolypeptide());
      dao.delete(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.sql.Connection connection, java.util.Collection<org.tair.db.genomicregion.IPolypeptide> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.genomicregion.IPolypeptide> factory = 
        manager.getFactory(org.tair.db.genomicregion.Polypeptide.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<org.tair.db.genomicregion.IPolypeptide> dao =
        factory.getInsertBatch(new org.tair.db.genomicregion.sql.InsertPolypeptide());
      dao.insert(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected java.util.Collection<org.tair.db.genomicregion.IPolypeptide> getDtos() {
      return proteins;
    }
    
    @Override
    protected String getClassName() {
      return org.tair.db.genomicregion.Polypeptide.class.getName();
    }
  }

  public void addProteinsPolypeptide(org.tair.db.genomicregion.IPolypeptide object) {
    if (proteins == null) {
      // Association not yet created, create it.
      proteins = new java.util.concurrent.CopyOnWriteArrayList<org.tair.db.genomicregion.IPolypeptide>();
    }
    proteins.add(object);
    // Add the primary key to the primary key array.
    proteinsKeys.add(object.getPrimaryKey());
  }
   
  /**
   * Query setter for querying nested experimentalCdnas
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.genomicregion.sql.QueryExperimentalCdnasByTranscript
   */
  private class QueryExperimentalCdnasSetter 
      extends com.poesys.db.dto.AbstractListSetter<org.tair.db.genomicregion.IExperimentalCdna, ITranscript, java.util.Collection<org.tair.db.genomicregion.IExperimentalCdna>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryExperimentalCdnasSetter object.
     */
    public QueryExperimentalCdnasSetter() {
      super("org.tair.db.genomicregion", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.genomicregion.ExperimentalCdna.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ITranscript getParametersDto() {
      return AbstractTranscript.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.tair.db.genomicregion.IExperimentalCdna, ITranscript> getSql() {
      return new org.tair.db.genomicregion.sql.QueryExperimentalCdnasByTranscript();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.genomicregion.IExperimentalCdna> list) {
      // No status change; this is just filling in the object data.
      experimentalCdnas = list;
      // Add the primary keys to the serialized key list if there are any.
      if (experimentalCdnas != null) {
        for (com.poesys.db.dto.IDbDto object : experimentalCdnas) {
          experimentalCdnasKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated experimentalCdnas list is not null
      return experimentalCdnas != null;
    }
  }

  /**
   * Read-Object setter for de-serializing nested experimentalCdnas collection
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.tair.db.genomicregion.sql.QueryExperimentalCdna
   */
  private class ReadExperimentalCdnasSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.tair.db.genomicregion.IExperimentalCdna> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadExperimentalCdnasSetter object to read the experimentalCdnas collection.
     */
    public ReadExperimentalCdnasSetter() {
      super("org.tair.db.genomicregion", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.genomicregion.ExperimentalCdna.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.genomicregion.IExperimentalCdna> getObjectCollection() {
      return experimentalCdnas;
    }

    @Override
    protected java.util.List<IPrimaryKey> getPrimaryKeys() {
      return experimentalCdnasKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.genomicregion.IExperimentalCdna> getSql() {
      return new org.tair.db.genomicregion.sql.QueryExperimentalCdna();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.genomicregion.IExperimentalCdna> collection) {
      experimentalCdnas = collection;
    }
  }
   
  public void addExperimentalCdnasExperimentalCdna(org.tair.db.genomicregion.IExperimentalCdna object) {
    if (experimentalCdnas == null) {
      // Association not yet created, create it.
      experimentalCdnas = new java.util.concurrent.CopyOnWriteArrayList<org.tair.db.genomicregion.IExperimentalCdna>();
    }
    experimentalCdnas.add(object);
    // Add the primary key to the primary key array.
    experimentalCdnasKeys.add(object.getPrimaryKey());
  }
   
  /**
   * Create an empty Transcript for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractTranscript() {
    super();
    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();

    // Add the setters for the transcribes property.
    querySetters.add(new QueryTranscribesSetter());
    preSetters.add(new InsertTranscribesSetter());
    postSetters.add(new UpdateTranscribesSetter());
    
    // Add the many-to-many collection setters for the ests property.
    querySetters.add(new QueryEstsSetter());
    readObjectSetters.add(new ReadEstsSetter());
    
    // Add the many-to-many collection setters for the proteins property.
    querySetters.add(new QueryProteinsSetter());
    readObjectSetters.add(new ReadProteinsSetter());
    insertSetters.add(new InsertProteinsSetter());
    postSetters.add(new UpdateProteinsSetter());
    
    // Add the many-to-many collection setters for the experimentalCdnas property.
    querySetters.add(new QueryExperimentalCdnasSetter());
    readObjectSetters.add(new ReadExperimentalCdnasSetter());
  }

  /**
   * Create a Transcript. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the Transcript
   * @param tairObjectId the unique identifier in the TAIR database for the region (locus, gene,
chromosome, contig)
   * @param name the name of the genomic region, such as the chromosome name (1, M), the
locus/gene name (AT1G01010), the transcript name (AT1G01010.1), or the contig
name (MI421-MI421); may or may not be unique within a genome
   * @param dateEntered the date on which the region was created in the source database
   * @param parentRegionTairObjectId foreign key used by setter to query associated object
   * @param genome foreign key used by setter to query associated object
   * @param sequence the complete DNA sequence for the transcript
   * @param seqTairObjectId the unique identifier for the cDNA
   * @param genbankAccession the unique identifier at GenBank for the cDNA sequence
   * @param primarySymbol the primary symbolic name for the transcript
   * @param primarySymbolFullName the full name for the primary symbolic name for the transcript (may be null)
   * @param startPosition the start of the transcript on the top level region (chromosome or contig)
   * @param endPosition the end of the transcript on the top-level parent region (chromosome or contig)
   * @param length the length of the transcript genomic region in base pairs (bp)
   * @param orientation the direction of the transcript genomic region in the DNA: forward or reverse;
   * @param basis the basis for assigning the transcript to the map:
BAC_end_sequencing
recombination
gene_annotation
fingerprint
hybridization
unknown
sequence_match
fingerprint_and_hybridization
   * @param derived whether the transcript  is derived ab initio or experimentally known in vivo
   * @param representativeGeneModel Is this transcript the representative alternatively spliced transcript for the
gene?
   * @param transcribesTairObjectId foreign key used by setter to query associated object
   */
  public AbstractTranscript(IPrimaryKey key, java.lang.Long tairObjectId, java.lang.String name, java.sql.Timestamp dateEntered, java.lang.Long parentRegionTairObjectId, java.lang.String genome, java.lang.String sequence, java.lang.Long seqTairObjectId, java.lang.String genbankAccession, java.lang.String primarySymbol, java.lang.String primarySymbolFullName, java.lang.Long startPosition, java.lang.Long endPosition, java.lang.Long length, java.lang.String orientation, java.lang.String basis, java.lang.Boolean derived, java.lang.Boolean representativeGeneModel, java.lang.Long transcribesTairObjectId) {
    super(key, tairObjectId, name, dateEntered, parentRegionTairObjectId, genome);

    this.sequence = sequence;

    if (sequence == null) {
      throw new com.poesys.db.InvalidParametersException("sequence is required for " + key.getValueList());
    }
    
    this.seqTairObjectId = seqTairObjectId;

    if (seqTairObjectId == null) {
      throw new com.poesys.db.InvalidParametersException("seqTairObjectId is required for " + key.getValueList());
    }
    
    this.genbankAccession = genbankAccession;

    this.primarySymbol = primarySymbol;

    this.primarySymbolFullName = primarySymbolFullName;

    this.startPosition = startPosition;

    if (startPosition == null) {
      throw new com.poesys.db.InvalidParametersException("startPosition is required for " + key.getValueList());
    }
    
    this.endPosition = endPosition;

    if (endPosition == null) {
      throw new com.poesys.db.InvalidParametersException("endPosition is required for " + key.getValueList());
    }
    
    this.length = length;

    if (length == null) {
      throw new com.poesys.db.InvalidParametersException("length is required for " + key.getValueList());
    }
    
    this.orientation = orientation;

    if (orientation == null) {
      throw new com.poesys.db.InvalidParametersException("orientation is required for " + key.getValueList());
    }
    
    this.basis = basis;

    if (basis == null) {
      throw new com.poesys.db.InvalidParametersException("basis is required for " + key.getValueList());
    }
    
    this.derived = derived;

    if (derived == null) {
      throw new com.poesys.db.InvalidParametersException("derived is required for " + key.getValueList());
    }
    
    this.representativeGeneModel = representativeGeneModel;

    if (representativeGeneModel == null) {
      throw new com.poesys.db.InvalidParametersException("representativeGeneModel is required for " + key.getValueList());
    }
    
    this.transcribesTairObjectId = transcribesTairObjectId;

    if (transcribesTairObjectId == null) {
      throw new com.poesys.db.InvalidParametersException("transcribesTairObjectId is required for " + key.getValueList());
    }
    
    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    
    // Add the setters for the transcribes property.
    querySetters.add(new QueryTranscribesSetter());
    insertSetters.add(new InsertTranscribesSetter());
    preSetters.add(new InsertTranscribesSetter());
    postSetters.add(new UpdateTranscribesSetter());
    
    // Set the internal key data member for the transcribes object retrieval.
    transcribesKey = org.tair.db.genomicregion.GenomicregionFactory.getGenePrimaryKey(transcribesTairObjectId/* Source: AddNaturalKeyProperties + AddInheritedKeyProperties + addAssociationForeignKeys: tairObjectId Key: false */);
    // Add a setter to instantiate the required transcribes object before insert.
    insertQuerySetters.add(new QueryTranscribesSetter());
    
    // Add the many-to-many collection setters for the ests property.
    querySetters.add(new QueryEstsSetter());
    readObjectSetters.add(new ReadEstsSetter());
    
    // Add the many-to-many collection setters for the proteins property.
    querySetters.add(new QueryProteinsSetter());
    readObjectSetters.add(new ReadProteinsSetter());
    insertSetters.add(new InsertProteinsSetter());
    postSetters.add(new UpdateProteinsSetter());
    
    // Add the many-to-many collection setters for the experimentalCdnas property.
    querySetters.add(new QueryExperimentalCdnasSetter());
    readObjectSetters.add(new ReadExperimentalCdnasSetter());
  }


  /**
   * Nested property sequence
   *
   * <p>
   * the complete DNA sequence for the transcript
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.String sequence;
  

  public java.lang.String getSequence() {
    return sequence;
  }

  /**
   * Clear the sequence data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearSequence() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the sequence.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the complete DNA sequence for the transcript
   * </p>
   *
   * @param sequence the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input sequence is null
   */
  public void setSequence(java.lang.String sequence)
      throws com.poesys.db.InvalidParametersException {
    if (sequence == null) {
      throw new com.poesys.db.InvalidParametersException("sequence is required");
    }
    
    this.sequence = sequence;
    setChanged();
  }

  /**
   * Nested property seqTairObjectId
   *
   * <p>
   * the unique identifier for the cDNA
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.Long seqTairObjectId;
  

  public java.lang.Long getSeqTairObjectId() {
    return seqTairObjectId;
  }

  /**
   * Clear the seqTairObjectId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearSeqTairObjectId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the seqTairObjectId.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the unique identifier for the cDNA
   * </p>
   *
   * @param seqTairObjectId the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input seqTairObjectId is null
   */
  public void setSeqTairObjectId(java.lang.Long seqTairObjectId)
      throws com.poesys.db.InvalidParametersException {
    if (seqTairObjectId == null) {
      throw new com.poesys.db.InvalidParametersException("seqTairObjectId is required");
    }
    
    this.seqTairObjectId = seqTairObjectId;
    setChanged();
  }

  /**
   * Nested property genbankAccession
   *
   * <p>
   * the unique identifier at GenBank for the cDNA sequence
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.String genbankAccession;
  

  public java.lang.String getGenbankAccession() {
    return genbankAccession;
  }

  /**
   * Clear the genbankAccession data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearGenbankAccession() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the genbankAccession.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the unique identifier at GenBank for the cDNA sequence
   * </p>
   *
   * @param genbankAccession the value with which to set the property
   */
  public  void setGenbankAccession(java.lang.String genbankAccession) {
    this.genbankAccession = genbankAccession;
    setChanged();
  }

  /**
   * Nested property primarySymbol
   *
   * <p>
   * the primary symbolic name for the transcript
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.String primarySymbol;
  

  public java.lang.String getPrimarySymbol() {
    return primarySymbol;
  }

  /**
   * Clear the primarySymbol data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearPrimarySymbol() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the primarySymbol.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the primary symbolic name for the transcript
   * </p>
   *
   * @param primarySymbol the value with which to set the property
   */
  public  void setPrimarySymbol(java.lang.String primarySymbol) {
    this.primarySymbol = primarySymbol;
    setChanged();
  }

  /**
   * Nested property primarySymbolFullName
   *
   * <p>
   * the full name for the primary symbolic name for the transcript (may be null)
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.String primarySymbolFullName;
  

  public java.lang.String getPrimarySymbolFullName() {
    return primarySymbolFullName;
  }

  /**
   * Clear the primarySymbolFullName data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearPrimarySymbolFullName() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the primarySymbolFullName.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the full name for the primary symbolic name for the transcript (may be null)
   * </p>
   *
   * @param primarySymbolFullName the value with which to set the property
   */
  public  void setPrimarySymbolFullName(java.lang.String primarySymbolFullName) {
    this.primarySymbolFullName = primarySymbolFullName;
    setChanged();
  }

  /**
   * Nested property startPosition
   *
   * <p>
   * the start of the transcript on the top level region (chromosome or contig)
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.Long startPosition;
  

  public java.lang.Long getStartPosition() {
    return startPosition;
  }

  /**
   * Clear the startPosition data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearStartPosition() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the startPosition.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the start of the transcript on the top level region (chromosome or contig)
   * </p>
   *
   * @param startPosition the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input startPosition is null
   */
  public void setStartPosition(java.lang.Long startPosition)
      throws com.poesys.db.InvalidParametersException {
    if (startPosition == null) {
      throw new com.poesys.db.InvalidParametersException("startPosition is required");
    }
    
    this.startPosition = startPosition;
    setChanged();
  }

  /**
   * Nested property endPosition
   *
   * <p>
   * the end of the transcript on the top-level parent region (chromosome or contig)
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.Long endPosition;
  

  public java.lang.Long getEndPosition() {
    return endPosition;
  }

  /**
   * Clear the endPosition data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearEndPosition() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the endPosition.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the end of the transcript on the top-level parent region (chromosome or contig)
   * </p>
   *
   * @param endPosition the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input endPosition is null
   */
  public void setEndPosition(java.lang.Long endPosition)
      throws com.poesys.db.InvalidParametersException {
    if (endPosition == null) {
      throw new com.poesys.db.InvalidParametersException("endPosition is required");
    }
    
    this.endPosition = endPosition;
    setChanged();
  }

  /**
   * Nested property length
   *
   * <p>
   * the length of the transcript genomic region in base pairs (bp)
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.Long length;
  

  public java.lang.Long getLength() {
    return length;
  }

  /**
   * Clear the length data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearLength() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the length.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the length of the transcript genomic region in base pairs (bp)
   * </p>
   *
   * @param length the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input length is null
   */
  public void setLength(java.lang.Long length)
      throws com.poesys.db.InvalidParametersException {
    if (length == null) {
      throw new com.poesys.db.InvalidParametersException("length is required");
    }
    
    this.length = length;
    setChanged();
  }

  /**
   * Nested property orientation
   *
   * <p>
   * the direction of the transcript genomic region in the DNA: forward or reverse;
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.String orientation;
  

  public java.lang.String getOrientation() {
    return orientation;
  }

  /**
   * Clear the orientation data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearOrientation() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the orientation.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the direction of the transcript genomic region in the DNA: forward or reverse;
   * </p>
   *
   * @param orientation the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input orientation is null
   */
  public void setOrientation(java.lang.String orientation)
      throws com.poesys.db.InvalidParametersException {
    if (orientation == null) {
      throw new com.poesys.db.InvalidParametersException("orientation is required");
    }
    
    this.orientation = orientation;
    setChanged();
  }

  /**
   * Nested property basis
   *
   * <p>
   * the basis for assigning the transcript to the map:
   * </p>
   * <p>
   * BAC_end_sequencing
   * </p>
   * <p>
   * recombination
   * </p>
   * <p>
   * gene_annotation
   * </p>
   * <p>
   * fingerprint
   * </p>
   * <p>
   * hybridization
   * </p>
   * <p>
   * unknown
   * </p>
   * <p>
   * sequence_match
   * </p>
   * <p>
   * fingerprint_and_hybridization
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.String basis;
  

  public java.lang.String getBasis() {
    return basis;
  }

  /**
   * Clear the basis data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearBasis() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the basis.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the basis for assigning the transcript to the map:
   * </p>
   * <p>
   * BAC_end_sequencing
   * </p>
   * <p>
   * recombination
   * </p>
   * <p>
   * gene_annotation
   * </p>
   * <p>
   * fingerprint
   * </p>
   * <p>
   * hybridization
   * </p>
   * <p>
   * unknown
   * </p>
   * <p>
   * sequence_match
   * </p>
   * <p>
   * fingerprint_and_hybridization
   * </p>
   *
   * @param basis the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input basis is null
   */
  public void setBasis(java.lang.String basis)
      throws com.poesys.db.InvalidParametersException {
    if (basis == null) {
      throw new com.poesys.db.InvalidParametersException("basis is required");
    }
    
    this.basis = basis;
    setChanged();
  }

  /**
   * Nested property derived
   *
   * <p>
   * whether the transcript  is derived ab initio or experimentally known in vivo
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.Boolean derived;
  

  public java.lang.Boolean getDerived() {
    return derived;
  }

  /**
   * Clear the derived data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearDerived() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the derived.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * whether the transcript  is derived ab initio or experimentally known in vivo
   * </p>
   *
   * @param derived the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input derived is null
   */
  public void setDerived(java.lang.Boolean derived)
      throws com.poesys.db.InvalidParametersException {
    if (derived == null) {
      throw new com.poesys.db.InvalidParametersException("derived is required");
    }
    
    this.derived = derived;
    setChanged();
  }

  /**
   * Nested property representativeGeneModel
   *
   * <p>
   * Is this transcript the representative alternatively spliced transcript for the
   * gene?
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.Boolean representativeGeneModel;
  

  public java.lang.Boolean getRepresentativeGeneModel() {
    return representativeGeneModel;
  }

  /**
   * Clear the representativeGeneModel data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearRepresentativeGeneModel() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the representativeGeneModel.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * Is this transcript the representative alternatively spliced transcript for the
   * gene?
   * </p>
   *
   * @param representativeGeneModel the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input representativeGeneModel is null
   */
  public void setRepresentativeGeneModel(java.lang.Boolean representativeGeneModel)
      throws com.poesys.db.InvalidParametersException {
    if (representativeGeneModel == null) {
      throw new com.poesys.db.InvalidParametersException("representativeGeneModel is required");
    }
    
    this.representativeGeneModel = representativeGeneModel;
    setChanged();
  }

  /**
   * Nested property transcribes
   *
   * 
   *
   * Added by AddToOneAssociationRequiredObjectProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private org.tair.db.genomicregion.IGene transcribes;
  

  public org.tair.db.genomicregion.IGene getTranscribes() {
    return transcribes;
  }

  /**
   * Clear the transcribes data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTranscribes() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the transcribes.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * 
   *
   * @param transcribes the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input transcribes is null
   */
  public void setTranscribes(org.tair.db.genomicregion.IGene transcribes)
      throws com.poesys.db.InvalidParametersException {
    if (transcribes == null) {
      throw new com.poesys.db.InvalidParametersException("transcribes is required");
    }
    
    this.transcribes = transcribes;
    // Set the IPrimaryKey cache lookup key.
    this.transcribesKey = transcribes.getPrimaryKey();
    setChanged();
  }

  /**
   * Nested property transcribesTairObjectId
   *
   * <p>
   * Foreign key used by setter to query associated object
   * </p>
   *
   * Added by AddNaturalKeyProperties + AddInheritedKeyProperties + AddToOneAssociationAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long transcribesTairObjectId;
  

  public java.lang.Long getTranscribesTairObjectId() {
    return transcribesTairObjectId;
  }

  /**
   * Clear the transcribesTairObjectId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTranscribesTairObjectId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property ests
   *
   * <p>
   * the collection of Extended Sequence Tags associated with the transcript
   * </p>
   *
   * Added by AddToManyChildCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.tair.db.genomicregion.IEst> ests;
  // Ordered list of keys of the objects in the $property.uniquename list
  java.util.List<com.poesys.db.pk.IPrimaryKey> estsKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  

  public java.util.Collection<org.tair.db.genomicregion.IEst> getEsts() {
    return ests;
  }

  /**
   * Clear the ests data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearEsts() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the ests.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the collection of Extended Sequence Tags associated with the transcript
   * </p>
   *
   * @param ests the value with which to set the property
   */
  public  void setEsts(java.util.Collection<org.tair.db.genomicregion.IEst> ests) {
    this.ests = ests;
    // Add the primary keys of the new collection to the serialized key list.
    estsKeys.clear();
    if (ests != null) {
      for (com.poesys.db.dto.IDbDto object : ests) {
        estsKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }

  /**
   * Nested property proteins
   *
   * <p>
   * the collection of polypeptides or proteins coded for by the transcript
   * </p>
   *
   * Added by AddToManyChildCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.tair.db.genomicregion.IPolypeptide> proteins;
  // Ordered list of keys of the objects in the $property.uniquename list
  java.util.List<com.poesys.db.pk.IPrimaryKey> proteinsKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  

  public java.util.Collection<org.tair.db.genomicregion.IPolypeptide> getProteins() {
    return proteins;
  }

  /**
   * Clear the proteins data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearProteins() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the proteins.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the collection of polypeptides or proteins coded for by the transcript
   * </p>
   *
   * @param proteins the value with which to set the property
   */
  public  void setProteins(java.util.Collection<org.tair.db.genomicregion.IPolypeptide> proteins) {
    this.proteins = proteins;
    // Add the primary keys of the new collection to the serialized key list.
    proteinsKeys.clear();
    if (proteins != null) {
      for (com.poesys.db.dto.IDbDto object : proteins) {
        proteinsKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }

  /**
   * Nested property experimentalCdnas
   *
   * <p>
   * the collection of cDNAs experimentally derived in vivo for the transcript
   * </p>
   *
   * Added by AddToManyChildCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.tair.db.genomicregion.IExperimentalCdna> experimentalCdnas;
  // Ordered list of keys of the objects in the $property.uniquename list
  java.util.List<com.poesys.db.pk.IPrimaryKey> experimentalCdnasKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  

  public java.util.Collection<org.tair.db.genomicregion.IExperimentalCdna> getExperimentalCdnas() {
    return experimentalCdnas;
  }

  /**
   * Clear the experimentalCdnas data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearExperimentalCdnas() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the experimentalCdnas.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the collection of cDNAs experimentally derived in vivo for the transcript
   * </p>
   *
   * @param experimentalCdnas the value with which to set the property
   */
  public  void setExperimentalCdnas(java.util.Collection<org.tair.db.genomicregion.IExperimentalCdna> experimentalCdnas) {
    this.experimentalCdnas = experimentalCdnas;
    // Add the primary keys of the new collection to the serialized key list.
    experimentalCdnasKeys.clear();
    if (experimentalCdnas != null) {
      for (com.poesys.db.dto.IDbDto object : experimentalCdnas) {
        experimentalCdnasKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {

    // Clean up ests.
    if (subject != null && subject instanceof org.tair.db.genomicregion.IEst && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        ests != null) {
      // Delete to-many ests child from collection
      ests.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Clean up proteins.
    if (subject != null && subject instanceof org.tair.db.genomicregion.IPolypeptide && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        proteins != null) {
      // Delete to-many proteins child from collection
      proteins.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Clean up experimentalCdnas.
    if (subject != null && subject instanceof org.tair.db.genomicregion.IExperimentalCdna && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        experimentalCdnas != null) {
      // Delete to-many experimentalCdnas child from collection
      experimentalCdnas.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }
  }
}