/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package org.tair.db.genomicregion;


import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;
import com.poesys.db.dto.DtoStatusException;


/**
 * <p>
 * A data-access layer data-transfer object for the Est. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * An Expressed Sequence Tag (EST); SO_0000345: A tag produced from a single
 * sequencing read from a cDNA clone or PCR product; typically a few hundred base
 * pairs long. In TAIR, this is a nucleotide sequence associated with a clone end
 * associated with a transcript.
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>CompositeKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: false
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractEst extends AbstractDto implements IEst {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  // Setter strategy nested classes for single-object associations
  
  /**
   * Nested class that manages the transcript association data
   *
   * Source: AddToOneAssociationRequiredObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryTranscriptSetter extends com.poesys.db.dto.AbstractObjectSetter<org.tair.db.genomicregion.ITranscript> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryTranscriptSetter object.
     */
    public QueryTranscriptSetter() {
      super("org.tair.db.genomicregion", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.genomicregion.Transcript.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return transcriptKey;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.genomicregion.ITranscript> getSql() {
      return new org.tair.db.genomicregion.sql.QueryTranscript();
    }

    @Override
    protected void set(org.tair.db.genomicregion.ITranscript dto) {
      // No status change, this is just filling in the object data.
      transcript = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated transcript is not null
      return transcript != null;
    }
  }

  /**
   * Insert setter for inserting nested transcript.
   */
  private class InsertTranscriptSetter 
      extends com.poesys.db.dto.AbstractInsertSetter<org.tair.db.genomicregion.ITranscript> {
    // transcript source: AddToOneAssociationRequiredObjectProperties
    private static final long serialVersionUID = 1L;

    /**
     * Create an InsertTranscriptSetter object.
     */
    public InsertTranscriptSetter() {
      super("org.tair.db.genomicregion", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.genomicregion.Transcript.class.getName();
    }

    @Override
    protected org.tair.db.genomicregion.ITranscript getDto() {
      return transcript;
    }

    @Override
    protected com.poesys.db.dao.insert.IInsertSql<org.tair.db.genomicregion.ITranscript> getSql() {
      return new org.tair.db.genomicregion.sql.InsertTranscript();
    }
    
    @Override
    protected boolean createKey() {
      // Key type: None
      return true;
    }
  }

  /**
   * Setter for processing added transcript, updated transcript, and 
   * deleted transcript. 
   */
   
  private class UpdateTranscriptSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObject<org.tair.db.genomicregion.ITranscript> {
    private static final long serialVersionUID = 1L;

    /**
     * Create an UpdateTranscriptSetter object.
     */
    public UpdateTranscriptSetter() {
      super("org.tair.db.genomicregion", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, org.tair.db.genomicregion.ITranscript dto)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
        // transcript source: AddToOneAssociationRequiredObjectProperties
        // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.genomicregion.ITranscript> factory = 
        manager.getFactory(org.tair.db.genomicregion.Transcript.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdate<org.tair.db.genomicregion.ITranscript> dao = 
        factory.getUpdate(new org.tair.db.genomicregion.sql.UpdateTranscript());
      dao.update(connection, dto);
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, org.tair.db.genomicregion.ITranscript dto)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.genomicregion.ITranscript> factory = 
        manager.getFactory(org.tair.db.genomicregion.Transcript.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDelete<org.tair.db.genomicregion.ITranscript> dao = 
        factory.getDelete(new org.tair.db.genomicregion.sql.DeleteTranscript());
      dao.delete(connection, dto);
    }

    @Override
    protected void doNew(java.sql.Connection connection, org.tair.db.genomicregion.ITranscript dto)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.tair.db.genomicregion.ITranscript> factory = 
        manager.getFactory(org.tair.db.genomicregion.Transcript.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsert<org.tair.db.genomicregion.ITranscript> dao =
        factory.getInsert(new org.tair.db.genomicregion.sql.InsertTranscript(), createKey());
      dao.insert(connection, dto);
    }

    @Override
    protected org.tair.db.genomicregion.ITranscript getDto() {
      return transcript;
    }
    
    @Override
    protected String getClassName() {
      return org.tair.db.genomicregion.Transcript.class.getName();
    }

    @Override
    protected boolean createKey() {
      // Key type: None
      return true;
    }
  }

  /**
   * Foreign key object used by QueryTranscriptSetter nested class to query object
   */
  private IPrimaryKey transcriptKey;
  
  /**
   * Set the foreign key transcriptKey. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param transcriptKey the foreign key
   */
  void setTranscriptKey(IPrimaryKey transcriptKey) {
    this.transcriptKey = transcriptKey;
  }


  /**
   * Create an empty Est for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractEst() {
    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();

    // Add the setters for the transcript property.
    querySetters.add(new QueryTranscriptSetter());
    preSetters.add(new InsertTranscriptSetter());
    postSetters.add(new UpdateTranscriptSetter());
  }

  /**
   * Create a Est. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the Est
   * @param tairObjectId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param seqTairObjectId the unique TAIR identifier for the EST sequence
   * @param name the sequence name
   * @param sequence the DNA associated with the EST
   * @param genbankAccession the unique identifier at GenBank for the cDNA sequence
   * @param length the length of the cDNA sequence, unit is bp (base pairs)
   * @param startPosition the starting position on the chromosome in unit bp (base pairs)
   * @param endPosition the ending position on the chromosome in unit bp (base pairs)
   * @param cloneName the name of the clone from which the EST derives
   * @param cloneId the unique TAIR identifier for the clone from which the EST derives
   * @param dateEntered the date on which the protein record was created in the source database
   */
  public AbstractEst(IPrimaryKey key, java.lang.Long tairObjectId, java.lang.Long seqTairObjectId, java.lang.String name, java.lang.String sequence, java.lang.String genbankAccession, java.lang.Long length, java.lang.Long startPosition, java.lang.Long endPosition, java.lang.String cloneName, java.lang.Long cloneId, java.sql.Timestamp dateEntered) {
    this.key = key;

    this.tairObjectId = tairObjectId;

    if (tairObjectId == null) {
      throw new com.poesys.db.InvalidParametersException("tairObjectId is required for " + key.getValueList());
    }
    
    this.seqTairObjectId = seqTairObjectId;

    if (seqTairObjectId == null) {
      throw new com.poesys.db.InvalidParametersException("seqTairObjectId is required for " + key.getValueList());
    }
    
    this.name = name;

    if (name == null) {
      throw new com.poesys.db.InvalidParametersException("name is required for " + key.getValueList());
    }
    
    this.sequence = sequence;

    if (sequence == null) {
      throw new com.poesys.db.InvalidParametersException("sequence is required for " + key.getValueList());
    }
    
    this.genbankAccession = genbankAccession;

    this.length = length;

    if (length == null) {
      throw new com.poesys.db.InvalidParametersException("length is required for " + key.getValueList());
    }
    
    this.startPosition = startPosition;

    if (startPosition == null) {
      throw new com.poesys.db.InvalidParametersException("startPosition is required for " + key.getValueList());
    }
    
    this.endPosition = endPosition;

    if (endPosition == null) {
      throw new com.poesys.db.InvalidParametersException("endPosition is required for " + key.getValueList());
    }
    
    this.cloneName = cloneName;

    if (cloneName == null) {
      throw new com.poesys.db.InvalidParametersException("cloneName is required for " + key.getValueList());
    }
    
    this.cloneId = cloneId;

    if (cloneId == null) {
      throw new com.poesys.db.InvalidParametersException("cloneId is required for " + key.getValueList());
    }
    
    this.dateEntered = dateEntered;

    // Setter arrays
    querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    
    // Add the setters for the transcript property.
    querySetters.add(new QueryTranscriptSetter());
    insertSetters.add(new InsertTranscriptSetter());
    preSetters.add(new InsertTranscriptSetter());
    postSetters.add(new UpdateTranscriptSetter());
    
    // Set the internal key data member for the transcript object retrieval.
    transcriptKey = org.tair.db.genomicregion.GenomicregionFactory.getTranscriptPrimaryKey(tairObjectId/* Source: AddNaturalKeyProperties + AddInheritedKeyProperties + addAssociationForeignKeys: tairObjectId Key: true */);
    // Add a setter to instantiate the required transcript object before insert.
    insertQuerySetters.add(new QueryTranscriptSetter());
  }

  @Override
  public boolean equals(Object arg0) {
    AbstractEst other = (AbstractEst)arg0;
    return other.key.equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    AbstractEst other = (AbstractEst)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.key.compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "org.tair.db.genomicregion";
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  @Override
  public java.sql.Connection getConnection() throws java.sql.SQLException {
    java.sql.Connection connection = null;
    
	/* 
	 * The resource bundle for the DTO's subsystem contains the suffix that
	 * distinguishes multiple versions of the subsystem in the database.properties
	 * file, such as "prod" or "test". Most database.properties files have only
	 * one implementation and use external facilities to switch between the
	 * databases (JNDI, for example, or producing different database.properties
	 * files in different setups). Use the subsystem resource bundle to get the
	 * suffix, then use the full subsystem name to get a connection factory for
	 * the DTO's subsystem, then use that factory to get a JDBC connection.
	 */
	java.util.ResourceBundle rb = 
	  java.util.ResourceBundle.getBundle("org.tair.db.genomicregion");
    String subsystem =
      "org.tair.db.genomicregion"
          + (rb.getString("suffix") == null
             || rb.getString("suffix").length() == 0 ? ""
              : "." + rb.getString("suffix"));
	  
	try {
	  connection = 
	    com.poesys.db.connection.ConnectionFactoryFactory.getInstance(subsystem).getConnection();
	} catch (com.poesys.db.InvalidParametersException e) {
	  throw new java.sql.SQLException(e.getMessage());
	} catch (java.io.IOException e) {
	  throw new java.sql.SQLException(e.getMessage());
	}
	
	return connection;
  }

  /**
   * Nested property tairObjectId
   *
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   *
   * Added by AddNaturalKeyProperties + AddInheritedKeyProperties + AddParentKeyAttributes
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long tairObjectId;
  

  public java.lang.Long getTairObjectId() {
    return tairObjectId;
  }

  /**
   * Clear the tairObjectId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTairObjectId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property seqTairObjectId
   *
   * <p>
   * the unique TAIR identifier for the EST sequence
   * </p>
   *
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long seqTairObjectId;
  

  public java.lang.Long getSeqTairObjectId() {
    return seqTairObjectId;
  }

  /**
   * Clear the seqTairObjectId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearSeqTairObjectId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property name
   *
   * <p>
   * the sequence name
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String name;
  

  public java.lang.String getName() {
    return name;
  }

  /**
   * Clear the name data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearName() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property sequence
   *
   * <p>
   * the DNA associated with the EST
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String sequence;
  

  public java.lang.String getSequence() {
    return sequence;
  }

  /**
   * Clear the sequence data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearSequence() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property genbankAccession
   *
   * <p>
   * the unique identifier at GenBank for the cDNA sequence
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String genbankAccession;
  

  public java.lang.String getGenbankAccession() {
    return genbankAccession;
  }

  /**
   * Clear the genbankAccession data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearGenbankAccession() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property length
   *
   * <p>
   * the length of the cDNA sequence, unit is bp (base pairs)
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long length;
  

  public java.lang.Long getLength() {
    return length;
  }

  /**
   * Clear the length data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearLength() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property startPosition
   *
   * <p>
   * the starting position on the chromosome in unit bp (base pairs)
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long startPosition;
  

  public java.lang.Long getStartPosition() {
    return startPosition;
  }

  /**
   * Clear the startPosition data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearStartPosition() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property endPosition
   *
   * <p>
   * the ending position on the chromosome in unit bp (base pairs)
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long endPosition;
  

  public java.lang.Long getEndPosition() {
    return endPosition;
  }

  /**
   * Clear the endPosition data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearEndPosition() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property cloneName
   *
   * <p>
   * the name of the clone from which the EST derives
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String cloneName;
  

  public java.lang.String getCloneName() {
    return cloneName;
  }

  /**
   * Clear the cloneName data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearCloneName() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property cloneId
   *
   * <p>
   * the unique TAIR identifier for the clone from which the EST derives
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long cloneId;
  

  public java.lang.Long getCloneId() {
    return cloneId;
  }

  /**
   * Clear the cloneId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearCloneId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property dateEntered
   *
   * <p>
   * the date on which the protein record was created in the source database
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.sql.Timestamp dateEntered;
  

  public java.sql.Timestamp getDateEntered() {
    return dateEntered;
  }

  /**
   * Clear the dateEntered data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearDateEntered() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * Nested property transcript
   *
   * <p>
   * the transcript to which the EST applies
   * </p>
   *
   * Added by AddToOneAssociationRequiredObjectProperties
   * Class is read/write: false
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private org.tair.db.genomicregion.ITranscript transcript;
  

  public org.tair.db.genomicregion.ITranscript getTranscript() {
    return transcript;
  }

  /**
   * Clear the transcript data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTranscript() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {
  }
}