/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractUpdate.vsl

package org.tair.db.genomicregion.sql;


import java.sql.PreparedStatement;
import java.sql.SQLException;

import com.poesys.db.dao.update.IUpdateSql;
import com.poesys.db.pk.IPrimaryKey;


/**
 * SQL statement specification for updating a Transcript with read/write properties
 * 
 * @author Robert J. Muller
 */
public class AbstractUpdateTranscript implements IUpdateSql<org.tair.db.genomicregion.ITranscript> {
  private static final String SQL =
    "UPDATE Transcript SET sequence = ?, seqTairObjectId = ?, genbankAccession = ?, primarySymbol = ?, primarySymbolFullName = ?, startPosition = ?, endPosition = ?, length = ?, orientation = ?, basis = ?, derived = ?, representativeGeneModel = ?, transcribesTairObjectId = ? WHERE ";

  public String getSql(IPrimaryKey key) {
    StringBuilder builder = new StringBuilder(SQL);
    builder.append(key.getSqlWhereExpression(""));
    return builder.toString();
  }

  public int setParams(PreparedStatement stmt, int index, org.tair.db.genomicregion.ITranscript object)
      throws SQLException {
    stmt.setString(index, object.getSequence());
    index++;
    stmt.setLong(index, object.getSeqTairObjectId());
    index++;
    stmt.setString(index, object.getGenbankAccession());
    index++;
    stmt.setString(index, object.getPrimarySymbol());
    index++;
    stmt.setString(index, object.getPrimarySymbolFullName());
    index++;
    stmt.setLong(index, object.getStartPosition());
    index++;
    stmt.setLong(index, object.getEndPosition());
    index++;
    stmt.setLong(index, object.getLength());
    index++;
    stmt.setString(index, object.getOrientation());
    index++;
    stmt.setString(index, object.getBasis());
    index++;
    stmt.setInt(index, object.getDerived() ? 1 : 0);
    index++;
    stmt.setInt(index, object.getRepresentativeGeneModel() ? 1 : 0);
    index++;
    // sets key params for required transcribes object
    index = object.getTranscribes().getPrimaryKey().setParams(stmt, index);
    // sets primary key in where clause
    index = object.getPrimaryKey().setParams(stmt, index);
    return index;
  }
}
