/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDtoProxy.vsl

package org.tair.db.genomicregion;


import com.poesys.db.dto.AbstractLazyLoadingDtoProxy;


/**
 * <p>
 * A data-access layer data-transfer object (DTO) lazy-loading proxy for the 
 * ReferenceGenome. This class is an abstract class that contains AndroMDA 
 * generated code; change nothing in this class. Instead, override any methods 
 * in the concrete subclass generated in the same package. AndroMDA will 
 * overwrite this class each time you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * SO_0001505: A collection of sequences (often chromosomes) taken as the standard
 * for a given organism and genome assembly
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractReferenceGenomeProxy extends AbstractLazyLoadingDtoProxy implements IReferenceGenome {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;

  // Lazy-loading query setter strategy nested classes for single-object associations
  


  /**
   * Read-Object setter for de-serializing nested regions collection
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see org.tair.db.genomicregion.sql.QueryRegion
   */
  private class ReadRegionsSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.tair.db.genomicregion.IRegion> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadRegionsSetter object to read the regions collection.
     */
    public ReadRegionsSetter() {
      super("org.tair.db.genomicregion", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.tair.db.genomicregion.Region.class.getName();
    }

    @Override
    protected java.util.Collection<org.tair.db.genomicregion.IRegion> getObjectCollection() {
      java.util.Collection<org.tair.db.genomicregion.IRegion> regions =  ((org.tair.db.genomicregion.ReferenceGenome)dto).getRegions();
      return regions;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.tair.db.genomicregion.ReferenceGenome)dto).regionsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.tair.db.genomicregion.IRegion> getSql() {
      return new org.tair.db.genomicregion.sql.QueryRegion();
    }

    @Override
    protected void set(java.util.Collection<org.tair.db.genomicregion.IRegion> collection) {
      ((org.tair.db.genomicregion.ReferenceGenome)dto).regions = collection;
    }
  }


  public void addRegionsRegion(org.tair.db.genomicregion.IRegion object) {
    ((ReferenceGenome)dto).addRegionsRegion(object);
  }

  /**
   * Create a ReferenceGenomeProxy. The concrete subclass must call this constructor.
   *
   * @param dto the DTO to proxy
   */
  public AbstractReferenceGenomeProxy(ReferenceGenome dto) {
    super(dto);

    // Setter arrays
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters.add(new ReadRegionsSetter());
  }

  @Override
  public boolean equals(Object obj) {
    AbstractReferenceGenomeProxy otherProxy = (AbstractReferenceGenomeProxy)obj;
    return ((ReferenceGenome)dto).equals(otherProxy.dto);
  }

  @Override
  public int hashCode() {
    return ((ReferenceGenome)dto).hashCode();
  }

  // Local properties (attributes, associations, and association classes)

  // Source: AddNaturalKeyProperties
  public java.lang.String getGenome() {
    return ((ReferenceGenome)dto).getGenome();
  }

  // Source: AddLocalAttributeProperties
  public java.sql.Timestamp getDateEntered() {
    return ((ReferenceGenome)dto).getDateEntered();
  }

  public void setDateEntered(java.sql.Timestamp dateEntered)
      throws com.poesys.db.InvalidParametersException {
    ((ReferenceGenome)dto).setDateEntered(dateEntered);
  }

  // Source: AddToOneAssociationRequiredObjectProperties
  public org.tair.db.basic.ITaxon getTaxon() {
    return ((ReferenceGenome)dto).getTaxon();
  }

  public void setTaxon(org.tair.db.basic.ITaxon taxon)
      throws com.poesys.db.InvalidParametersException {
    ((ReferenceGenome)dto).setTaxon(taxon);
  }

  // Source: AddToOneAssociationRequiredObjectProperties
  public org.tair.db.basic.ISpeciesVariant getReferenceVariant() {
    return ((ReferenceGenome)dto).getReferenceVariant();
  }

  public void setReferenceVariant(org.tair.db.basic.ISpeciesVariant referenceVariant)
      throws com.poesys.db.InvalidParametersException {
    ((ReferenceGenome)dto).setReferenceVariant(referenceVariant);
  }

  // Source: AddNaturalKeyProperties + AddToOneAssociationAttributeProperties
  public java.lang.Long getTaxonTaxonId() {
    return ((ReferenceGenome)dto).getTaxonTaxonId();
  }

  // Source: AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddToOneAssociationAttributeProperties
  public java.lang.String getAccession() {
    return ((ReferenceGenome)dto).getAccession();
  }

  // Source: AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddToOneAssociationAttributeProperties
  public java.lang.String getName() {
    return ((ReferenceGenome)dto).getName();
  }

  // Source: AddNaturalKeyProperties + AddParentKeyAttributes + AddToOneAssociationAttributeProperties
  public java.lang.Long getReferenceVariantTaxonId() {
    return ((ReferenceGenome)dto).getReferenceVariantTaxonId();
  }

  // Source: TransformToProperty + AddToManyAssociationCollectionProperties
  public java.util.Collection<org.tair.db.genomicregion.IRegion> getRegions() {
    return ((ReferenceGenome)dto).getRegions();
  }

  public void setRegions(java.util.Collection<org.tair.db.genomicregion.IRegion> regions)
      {
    ((ReferenceGenome)dto).setRegions(regions);
  }

  public void markChildrenDeleted() throws com.poesys.db.dto.DtoStatusException {
  	((ReferenceGenome)dto).markChildrenDeleted();
  }
}