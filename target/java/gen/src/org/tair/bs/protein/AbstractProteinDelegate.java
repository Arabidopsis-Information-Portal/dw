/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDelegate.vsl

package org.tair.bs.protein;


import com.poesys.bs.delegate.AbstractDataDelegate;
import com.poesys.bs.delegate.DelegateException;
import com.poesys.db.connection.IConnectionFactory.DBMS;
import com.poesys.db.dao.insert.IInsertSql;
import com.poesys.db.dao.update.IUpdateSql;
import com.poesys.db.dao.delete.IDeleteSql;
import com.poesys.db.dao.query.IKeyQuerySql;
import com.poesys.db.dao.query.IQuerySql;


/**
 * <p>
 * A business delegate that provides an application programming interface for
 * Protein objects and their dependents. You should not modify this class;
 * instead, override or add methods in the class ProteinDelegate, which
 * specializes this class.
 * </p>
 * <p>
 * An amino acid possibly related to a transcript
 * </p>
 * @see ProteinDelegate
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractProteinDelegate
    extends AbstractDataDelegate<BsProtein, org.tair.db.protein.IProtein, com.poesys.db.pk.NaturalPrimaryKey> {
  /**
   * Create an AbstractProteinDelegate object by supplying the database
   * subsystem in the database.properties file.
   * 
   * @param subsystem the database subsystem to use in database.properties
   */
  public AbstractProteinDelegate(String subsystem) {
    super(subsystem, 2147483647);
  }

  /**
   * Create an AbstractProteinDelegate object by supplying the database
   * subsystem in the database.properties file and a specific DBMS, usually
   * IConnectionFactory.DBMS.JNDI.
   * 
   * @param subsystem the database subsystem to use in database.properties
   * @param dbms the DBMS to use (usually IConnectionFactory.DBMS.JNDI)
   */
  public AbstractProteinDelegate(String subsystem, DBMS dbms) {
    super(subsystem, dbms, 2147483647);
  }

  @Override
  protected String getClassName() {
    return org.tair.db.protein.Protein.class.getName();
  }

  @Override
  protected IInsertSql<org.tair.db.protein.IProtein> getInsertSql() {
    return new org.tair.db.protein.sql.InsertProtein();
  }

  @Override
  protected IDeleteSql<org.tair.db.protein.IProtein> getDeleteSql() {
    return new org.tair.db.protein.sql.DeleteProtein();
  }

  @Override
  protected IUpdateSql<org.tair.db.protein.IProtein> getUpdateSql() {
    return new org.tair.db.protein.sql.UpdateProtein();
  }

  @Override
  protected IKeyQuerySql<org.tair.db.protein.IProtein> getQueryByKeySql() {
    return new org.tair.db.protein.sql.QueryProtein();
  }

  @Override
  protected IQuerySql<org.tair.db.protein.IProtein> getQueryListSql() {
    // Query-All method not required
    return new org.tair.db.protein.sql.QueryAllProtein();
  }

  @Override
  protected org.tair.bs.protein.BsProtein wrapData(org.tair.db.protein.IProtein dto) {
    return new org.tair.bs.protein.BsProtein(dto);
  }

  /**
   * <p>
   * Create a new Protein with data fields.
   * </p>
   * <p>
   * The Protein class has a natural key; this method creates the primary
   * key from the appropriate input properties.
   * </p>
   * 
   * @param tairObjectId 
   * @param name 
   * @param sequence 
   * @param genbankGi 
   * @param genPept 
   * @param molecularWeight 
   * @param isoelectricPoint 
   * @param length 
   * @param dateLastModified 
   * @return the new Protein object
   * @throws DelegateException when there is a problem generating the key or
   *             creating the object
   */
  public org.tair.bs.protein.BsProtein createProtein(java.lang.Long tairObjectId, java.lang.String name, java.lang.String sequence, java.lang.String genbankGi, java.lang.String genPept, java.lang.Double molecularWeight, java.lang.Double isoelectricPoint, java.lang.Integer length, java.sql.Timestamp dateLastModified)
      throws DelegateException {
    com.poesys.db.pk.NaturalPrimaryKey key = null;
    try {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.LongColumnValue("tairObjectId", tairObjectId));
      key = 
        com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.tair.db.protein.Protein");
    } catch (com.poesys.db.InvalidParametersException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    } catch (com.poesys.db.DuplicateKeyNameException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    }

    // Create a data-access DTO for direct access, no proxy required.
    org.tair.db.protein.IProtein dto =
      new org.tair.db.protein.Protein(key, tairObjectId, name, sequence, genbankGi, genPept, molecularWeight, isoelectricPoint, length, dateLastModified);

    // Create the business DTO.
    return new org.tair.bs.protein.BsProtein(dto);
  }

  /**
   * Create a new ProteinTranscript child of Protein with a composite key.
   * 
   * @param parent the parent of the child object to create
   * @param tairObjectId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param geneTairObjectId the unique identifier in TAIR for the transcript
   * @param name 
   * @return a new ProteinTranscript business layer DTO
   * @throws DelegateException when a parameter causes a problem
   */
  public org.tair.bs.protein.BsProteinTranscript createProteinTranscript(org.tair.bs.protein.BsProtein parent, java.lang.Long tairObjectId, java.lang.Long geneTairObjectId, java.lang.String name) throws DelegateException {
    // Create the key.
    com.poesys.db.pk.CompositePrimaryKey key = null;
    try {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.LongColumnValue("geneTairObjectId", geneTairObjectId));
	  com.poesys.db.pk.IPrimaryKey subKey = 
	    com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.tair.db.protein.ProteinTranscript");
      key = 
        com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parent.getPrimaryKey(), 
                                                              subKey,
                                                              "org.tair.db.protein.ProteinTranscript");
    } catch (com.poesys.db.InvalidParametersException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    } catch (com.poesys.db.DuplicateKeyNameException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    }

    // Create a composite-key child data-access ProteinTranscript DTO for direct access, no proxy required.
    org.tair.db.protein.IProteinTranscript dto =
      new org.tair.db.protein.ProteinTranscript(key, tairObjectId, geneTairObjectId, name);

    // Create the business DTO.
    return new org.tair.bs.protein.BsProteinTranscript(dto);
  }
  /**
   * Create a new Domain child of Protein with a composite key.
   * 
   * @param parent the parent of the child object to create
   * @param tairObjectId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param domainTairObjectId the unique identifier in TAIR for the protein domain
   * @param name the domain name in the originating database
   * @param database the database that contains the domain:
prosite
prints
pir
tigrfam
prodom
hamap
gene3d
smart
panther
pfam
superfam
   * @param structuralClassType One of several structural classes of protein:
All alpha proteins
All beta proteins
Alpha and beta proteins (a/b)
Alpha and beta proteins (a+b)
Multi-domain proteins (alpha and beta)
Membrane and cell surface proteins and peptides
Small proteins
Coiled coil proteins
   * @param accession the identifier in the originating database
   * @param interproAccession the Interpro accession identifier (IPRnnnnn)
   * @param interpro the Interpro domain name in full
   * @param startPosition the starting position of the domain in the amino acid sequence
   * @param endPosition the ending position of the domain in the amino acid sequence
   * @return a new Domain business layer DTO
   * @throws DelegateException when a parameter causes a problem
   */
  public org.tair.bs.protein.BsDomain createDomain(org.tair.bs.protein.BsProtein parent, java.lang.Long tairObjectId, java.lang.Long domainTairObjectId, java.lang.String name, java.lang.String database, java.lang.String structuralClassType, java.lang.String accession, java.lang.String interproAccession, java.lang.String interpro, java.lang.Integer startPosition, java.lang.Integer endPosition) throws DelegateException {
    // Create the key.
    com.poesys.db.pk.CompositePrimaryKey key = null;
    try {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.LongColumnValue("domainTairObjectId", domainTairObjectId));
	  com.poesys.db.pk.IPrimaryKey subKey = 
	    com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.tair.db.protein.Domain");
      key = 
        com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parent.getPrimaryKey(), 
                                                              subKey,
                                                              "org.tair.db.protein.Domain");
    } catch (com.poesys.db.InvalidParametersException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    } catch (com.poesys.db.DuplicateKeyNameException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    }

    // Create a composite-key child data-access Domain DTO for direct access, no proxy required.
    org.tair.db.protein.IDomain dto =
      new org.tair.db.protein.Domain(key, tairObjectId, domainTairObjectId, name, database, structuralClassType, accession, interproAccession, interpro, startPosition, endPosition);

    // Create the business DTO.
    return new org.tair.bs.protein.BsDomain(dto);
  }
  /**
   * Create a new ProteinResourceLink child of Protein with a composite key.
   * 
   * @param parent the parent of the child object to create
   * @param tairObjectId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param name the text name for the link, which usually includes the web site name and any
specific information in the context of the locus; the URL itself may be this
name if there is no other name
   * @param linkType the kind of link this is; used to place the link into a particular section of
the locus detail
   * @param icon an optional name for an icon to display for the link; icon gif must exist in
static images folder
   * @param locus the locus that owns the third-party resource link
   * @param baseUrl the base URL (http://... up to the ? arguments) for the external link
   * @param urlVariable the optional URL variable that identifies the locus to the target web site
   * @param explanation a short explanation (should fit on one line if possible) of the purpose of the
link
   * @return a new ProteinResourceLink business layer DTO
   * @throws DelegateException when a parameter causes a problem
   */
  public org.tair.bs.protein.BsProteinResourceLink createProteinResourceLink(org.tair.bs.protein.BsProtein parent, java.lang.Long tairObjectId, java.lang.String name, java.lang.String linkType, java.lang.String icon, org.tair.db.locusdetail.ILocusDetail locus, java.lang.String baseUrl, java.lang.String urlVariable, java.lang.String explanation) throws DelegateException {
    // Create the key.
    com.poesys.db.pk.CompositePrimaryKey key = null;
    try {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.StringColumnValue("name", name));
	  com.poesys.db.pk.IPrimaryKey subKey = 
	    com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.tair.db.protein.ProteinResourceLink");
      key = 
        com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parent.getPrimaryKey(), 
                                                              subKey,
                                                              "org.tair.db.protein.ProteinResourceLink");
    } catch (com.poesys.db.InvalidParametersException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    } catch (com.poesys.db.DuplicateKeyNameException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    }

    // Create a composite-key child data-access ProteinResourceLink DTO for direct access, no proxy required.
    org.tair.db.protein.IProteinResourceLink dto =
      new org.tair.db.protein.ProteinResourceLink(key, tairObjectId, name, linkType, icon, locus, baseUrl, urlVariable, explanation);

    // Create the business DTO.
    return new org.tair.bs.protein.BsProteinResourceLink(dto);
  }

  @Override
  public void truncateTable(String tableName) throws DelegateException {
    java.sql.Connection c = getConnection();
    com.poesys.db.dao.ddl.ISql sql = null;
    com.poesys.db.dao.ddl.IExecuteSql executive = null;

    // First truncate any child tables.
    sql = new com.poesys.db.dao.ddl.TruncateTableSql("ProteinTranscript");
    executive = new com.poesys.db.dao.ddl.ExecuteSql(sql);
    try {
      executive.execute(c);
    } catch (java.sql.SQLException e) {
      throw new DelegateException(e.getMessage() + ": " + "ProteinTranscript", e);
    }

    sql = new com.poesys.db.dao.ddl.TruncateTableSql("Domain");
    executive = new com.poesys.db.dao.ddl.ExecuteSql(sql);
    try {
      executive.execute(c);
    } catch (java.sql.SQLException e) {
      throw new DelegateException(e.getMessage() + ": " + "Domain", e);
    }

    sql = new com.poesys.db.dao.ddl.TruncateTableSql("ProteinResourceLink");
    executive = new com.poesys.db.dao.ddl.ExecuteSql(sql);
    try {
      executive.execute(c);
    } catch (java.sql.SQLException e) {
      throw new DelegateException(e.getMessage() + ": " + "ProteinResourceLink", e);
    }

    // Now truncate the current table.
    sql = new com.poesys.db.dao.ddl.TruncateTableSql(tableName);
    executive = new com.poesys.db.dao.ddl.ExecuteSql(sql);
    try {
      executive.execute(c);
    } catch (java.sql.SQLException e) {
      throw new DelegateException(e.getMessage() + ": " + "Protein", e);
    }
  }
}
