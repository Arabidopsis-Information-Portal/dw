/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDelegate.vsl

package org.tair.bs.community;


import com.poesys.bs.delegate.AbstractReadOnlyDataDelegate;
import com.poesys.bs.delegate.DelegateException;
import com.poesys.db.connection.IConnectionFactory.DBMS;
import com.poesys.db.dao.query.IKeyQuerySql;
import com.poesys.db.dao.query.IQuerySql;


/**
 * <p>
 * A business delegate that provides an application programming interface for
 * Community objects and their dependents. You should not modify this class;
 * instead, override or add methods in the class CommunityDelegate, which
 * specializes this class.
 * </p>
 * <p>
 * A member of the community
 * </p>
 * @see CommunityDelegate
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractCommunityDelegate
    extends AbstractReadOnlyDataDelegate<BsCommunity, org.tair.db.community.ICommunity, com.poesys.db.pk.SequencePrimaryKey> {
  /**
   * Create an AbstractCommunityDelegate object by supplying the database
   * subsystem in the database.properties file.
   * 
   * @param subsystem the database subsystem to use in database.properties
   */
  public AbstractCommunityDelegate(String subsystem) {
    super(subsystem, 2147483647);
  }

  /**
   * Create an AbstractCommunityDelegate object by supplying the database
   * subsystem in the database.properties file and a specific DBMS, usually
   * IConnectionFactory.DBMS.JNDI.
   * 
   * @param subsystem the database subsystem to use in database.properties
   * @param dbms the DBMS to use (usually IConnectionFactory.DBMS.JNDI)
   */
  public AbstractCommunityDelegate(String subsystem, DBMS dbms) {
    super(subsystem, dbms, 2147483647);
  }

  @Override
  protected String getClassName() {
    return org.tair.db.community.Community.class.getName();
  }

  @Override
  protected IKeyQuerySql<org.tair.db.community.ICommunity> getQueryByKeySql() {
    return new org.tair.db.community.sql.QueryCommunity();
  }

  @Override
  protected IQuerySql<org.tair.db.community.ICommunity> getQueryListSql() {
    // Query-All method not required
    return new org.tair.db.community.sql.QueryAllCommunity();
  }

  @Override
  protected org.tair.bs.community.BsCommunity wrapData(org.tair.db.community.ICommunity dto) {
    return new org.tair.bs.community.BsCommunity(dto);
  }

  /**
   * <p>
   * Create a new Community with data fields.
   * </p>
   * <p>
   * The Community class has a sequence key; this method generates the
   * sequence for later insertion into the database.
   * </p>
   * 
   * @param communityId primary key attribute
   * @param communityType the kind of community member this is: person or organization
   * @param email the email address of the community member
   * @param memberStatus the current status of the community member: new, active, inactive.
A new member is one who has registered but not been activated.
An active member has been activated.
An inactive member has been inactivated.
   * @param countryId foreign key used by setter to query associated object
   * @return the new Community object
   * @throws DelegateException when there is a problem generating the key or
   *             creating the object
   */
  public org.tair.bs.community.BsCommunity createCommunity(java.math.BigInteger communityId, java.lang.String communityType, java.lang.String email, java.lang.String memberStatus, java.math.BigInteger countryId)
      throws DelegateException {
      com.poesys.db.pk.SequencePrimaryKey key = null;

    // Generate a new Community id if the input key is null.
    if (communityId == null) {
      java.sql.Connection connection = null;
      try {
        connection = getConnection();
        if (connection == null) {
          throw new DelegateException("Could not get database connection to generate sequence");
        }
        
        if (dbms.equals(DBMS.MYSQL)) {
          key =
            com.poesys.db.pk.PrimaryKeyFactory.createMySqlSequenceKey(connection,
                                                                      "CommunitySeq",
                                                                      "communityId",
                                                                      "org.tair.db.community.Community");
        } else {
          // Create key with sequence CommunitySeq
          key =
            com.poesys.db.pk.PrimaryKeyFactory.createOracleSequenceKey(connection,
                                                                       "CommunitySeq",
                                                                       "communityId",
                                                                       "org.tair.db.community.Community");
        }
        // Get the sequence number for use as an attribute value.
        communityId = key.getValue();
      } catch (com.poesys.db.InvalidParametersException e) {
        Object[] args = e.getParameters().toArray();
        String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
        throw new DelegateException(message, e);
      } catch (com.poesys.db.NoPrimaryKeyException e) {
        Object[] args = e.getParameters().toArray();
        String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
        throw new DelegateException(message, e);
      } catch (java.sql.SQLException e) {
        throw new DelegateException(e.getMessage(), e);
      } finally {
        // Done with this connection, close it and return it to the pool.
        if (connection != null) {
          try {
            connection.close();
          } catch (java.sql.SQLException e) {
            throw new DelegateException(e.getMessage(), e);
          }
        }
      }
    } else {
      key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey("communityId", communityId, "org.tair.db.community.Community");
    }

    // Create a data-access DTO proxy (supports lazy loading).
    org.tair.db.community.ICommunity dto =
      new org.tair.db.community.CommunityProxy(new org.tair.db.community.Community(key, communityId, communityType, email, memberStatus, countryId));

    // Create the business DTO.
    return new org.tair.bs.community.BsCommunity(dto);
  }

  /**
   * Create a new CommunityAlias child of Community with a composite key.
   * 
   * @param parent the parent of the child object to create
   * @param communityId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param alias an alternate name for the community member
   * @return a new CommunityAlias business layer DTO
   * @throws DelegateException when a parameter causes a problem
   */
  public org.tair.bs.community.BsCommunityAlias createCommunityAlias(org.tair.bs.community.BsCommunity parent, java.math.BigInteger communityId, java.lang.String alias) throws DelegateException {
    // Create the key.
    com.poesys.db.pk.CompositePrimaryKey key = null;
    try {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.StringColumnValue("alias", alias));
	  com.poesys.db.pk.IPrimaryKey subKey = 
	    com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.tair.db.community.CommunityAlias");
      key = 
        com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parent.getPrimaryKey(), 
                                                              subKey,
                                                              "org.tair.db.community.CommunityAlias");
    } catch (com.poesys.db.InvalidParametersException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    } catch (com.poesys.db.DuplicateKeyNameException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    }

    // Create a composite-key child data-access CommunityAlias DTO proxy (supports lazy loading).
    org.tair.db.community.ICommunityAlias dto =
      new org.tair.db.community.CommunityAliasProxy(new org.tair.db.community.CommunityAlias(key, communityId, alias));

    // Create the business DTO.
    return new org.tair.bs.community.BsCommunityAlias(dto);
  }
  /**
   * Create a new CommunityKeyword child of Community with a composite key.
   * 
   * @param parent the parent of the child object to create
   * @param communityId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param keyword the search keyword that applies to the community member
   * @param keywordType the kind of keyword for the community member
organism
community_interest
   * @return a new CommunityKeyword business layer DTO
   * @throws DelegateException when a parameter causes a problem
   */
  public org.tair.bs.community.BsCommunityKeyword createCommunityKeyword(org.tair.bs.community.BsCommunity parent, java.math.BigInteger communityId, java.lang.String keyword, java.lang.String keywordType) throws DelegateException {
    // Create the key.
    com.poesys.db.pk.CompositePrimaryKey key = null;
    try {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.StringColumnValue("keyword", keyword));
	  com.poesys.db.pk.IPrimaryKey subKey = 
	    com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.tair.db.community.CommunityKeyword");
      key = 
        com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parent.getPrimaryKey(), 
                                                              subKey,
                                                              "org.tair.db.community.CommunityKeyword");
    } catch (com.poesys.db.InvalidParametersException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    } catch (com.poesys.db.DuplicateKeyNameException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    }

    // Create a composite-key child data-access CommunityKeyword DTO proxy (supports lazy loading).
    org.tair.db.community.ICommunityKeyword dto =
      new org.tair.db.community.CommunityKeywordProxy(new org.tair.db.community.CommunityKeyword(key, communityId, keyword, keywordType));

    // Create the business DTO.
    return new org.tair.bs.community.BsCommunityKeyword(dto);
  }
  /**
   * Create a new CommunityReference child of Community with a composite key.
   * 
   * @param parent the parent of the child object to create
   * @param communityId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param tairObjectId the unique TAIR identifier for the reference; used to link to the reference page
   * @param title the title of the reference
   * @param source the publication source of the reference
   * @param publicationYear the year of publication of the reference
   * @return a new CommunityReference business layer DTO
   * @throws DelegateException when a parameter causes a problem
   */
  public org.tair.bs.community.BsCommunityReference createCommunityReference(org.tair.bs.community.BsCommunity parent, java.math.BigInteger communityId, java.lang.Long tairObjectId, java.lang.String title, java.lang.String source, java.lang.Integer publicationYear) throws DelegateException {
    // Create the key.
    com.poesys.db.pk.CompositePrimaryKey key = null;
    try {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.LongColumnValue("tairObjectId", tairObjectId));
	  com.poesys.db.pk.IPrimaryKey subKey = 
	    com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.tair.db.community.CommunityReference");
      key = 
        com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parent.getPrimaryKey(), 
                                                              subKey,
                                                              "org.tair.db.community.CommunityReference");
    } catch (com.poesys.db.InvalidParametersException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    } catch (com.poesys.db.DuplicateKeyNameException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    }

    // Create a composite-key child data-access CommunityReference DTO proxy (supports lazy loading).
    org.tair.db.community.ICommunityReference dto =
      new org.tair.db.community.CommunityReferenceProxy(new org.tair.db.community.CommunityReference(key, communityId, tairObjectId, title, source, publicationYear));

    // Create the business DTO.
    return new org.tair.bs.community.BsCommunityReference(dto);
  }
  /**
   * Create a new CommunityAttribution child of Community with a composite key.
   * 
   * @param parent the parent of the child object to create
   * @param communityId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param attributionType the nature of the attribution, such as "submitted_by" or "available_from"; first
part of the ordering part of the primary sub-key
   * @param name the name of the attributed object, such as the AGI number or the germplasm name;
if there is no name, this should contain some kind of descriptive text or
identifier that allows identification of the object;
second part of the ordering part of the primary sub-key
   * @param tairObjectId the unique TAIR identifier for the object being attributed to a community
member; used to link to the object page
   * @param attributionDate the date of the attribution
   * @param attributionComment an optional text comment on the attribution
   * @return a new CommunityAttribution business layer DTO
   * @throws DelegateException when a parameter causes a problem
   */
  public org.tair.bs.community.BsCommunityAttribution createCommunityAttribution(org.tair.bs.community.BsCommunity parent, java.math.BigInteger communityId, java.lang.String attributionType, java.lang.String name, java.lang.Long tairObjectId, java.sql.Timestamp attributionDate, java.lang.String attributionComment) throws DelegateException {
    // Create the key.
    com.poesys.db.pk.CompositePrimaryKey key = null;
    try {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.StringColumnValue("attributionType", attributionType));
      list.add(new com.poesys.db.col.StringColumnValue("name", name));
      list.add(new com.poesys.db.col.LongColumnValue("tairObjectId", tairObjectId));
	  com.poesys.db.pk.IPrimaryKey subKey = 
	    com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.tair.db.community.CommunityAttribution");
      key = 
        com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parent.getPrimaryKey(), 
                                                              subKey,
                                                              "org.tair.db.community.CommunityAttribution");
    } catch (com.poesys.db.InvalidParametersException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    } catch (com.poesys.db.DuplicateKeyNameException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    }

    // Create a composite-key child data-access CommunityAttribution DTO proxy (supports lazy loading).
    org.tair.db.community.ICommunityAttribution dto =
      new org.tair.db.community.CommunityAttributionProxy(new org.tair.db.community.CommunityAttribution(key, communityId, attributionType, name, tairObjectId, attributionDate, attributionComment));

    // Create the business DTO.
    return new org.tair.bs.community.BsCommunityAttribution(dto);
  }
}
