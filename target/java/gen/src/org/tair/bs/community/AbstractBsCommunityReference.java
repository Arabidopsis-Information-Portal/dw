/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractBsDto.vsl


package org.tair.bs.community;


import com.poesys.bs.delegate.DelegateException;
import com.poesys.bs.dto.IDto;
import com.poesys.db.dto.DtoStatusException;
import com.poesys.db.pk.IPrimaryKey;
import com.poesys.bs.dto.AbstractDto;


import org.tair.db.community.ICommunityReference;
import org.tair.db.community.CommunityReferenceProxy;
import org.tair.db.community.CommunityReference;


/**
 * <p>
 * A business layer data-transfer object (DTO) for the CommunityReference. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * A reference of the community member
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>CompositeKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: false
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractBsCommunityReference 
    extends AbstractDto<org.tair.db.community.ICommunityReference> {

  /**
   * Create a BsCommunityReference object from a CommunityReference object.
   * 
   * @param dto the data-access layer CommunityReference DTO
   * @throws DelegateException when there is a problem creating the CommunityReference
   */
  public AbstractBsCommunityReference(ICommunityReference dto) throws DelegateException {
    super(dto);
  }

  /**
   * Create a CommunityReference from new data.
   *
   * @param key the primary key of the CommunityReference
   * @param communityId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param tairObjectId the unique TAIR identifier for the reference; used to link to the reference page
   * @param title the title of the reference
   * @param source the publication source of the reference
   * @param publicationYear the year of publication of the reference
   */
  public AbstractBsCommunityReference(IPrimaryKey key, java.math.BigInteger communityId, java.lang.Long tairObjectId, java.lang.String title, java.lang.String source, java.lang.Integer publicationYear) {
    super(new CommunityReferenceProxy(new CommunityReference(key, communityId, tairObjectId, title, source, publicationYear)));
  }

  @SuppressWarnings("unchecked")
  @Override
  public boolean equals(Object arg0) {
    // Unchecked cast here
    IDto<ICommunityReference> other = (IDto<ICommunityReference>)arg0;
    return dto.equals(other.toDto());
  }

  @Override
  public int hashCode() {
    return dto.hashCode();
  }

  public int compareTo(IDto<ICommunityReference> o) {
    return dto.compareTo(o.toDto());
  }

  public void markChildrenDeleted() throws DtoStatusException {
    dto.markChildrenDeleted();
  }
  
  public IPrimaryKey getPrimaryKey() {
    return dto.getPrimaryKey();
  }

  // Data member properties

  /**
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   * <p>
   * Added by AddGeneratedKeyProperties + AddParentKeyAttributes as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object CommunityReference</li>
   * </ul>
   * </p>
   * @return a java.math.BigInteger communityId
   */
  public java.math.BigInteger getCommunityId() {
    return dto.getCommunityId();
  }

  /**
   * <p>
   * the unique TAIR identifier for the reference; used to link to the reference page
   * </p>
   * <p>
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object CommunityReference</li>
   * </ul>
   * </p>
   * @return a java.lang.Long tairObjectId
   */
  public java.lang.Long getTairObjectId() {
    return dto.getTairObjectId();
  }

  /**
   * <p>
   * the title of the reference
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object CommunityReference</li>
   * </ul>
   * </p>
   * @return a java.lang.String title
   */
  public java.lang.String getTitle() {
    return dto.getTitle();
  }

  /**
   * <p>
   * the publication source of the reference
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object CommunityReference</li>
   * </ul>
   * </p>
   * @return a java.lang.String source
   */
  public java.lang.String getSource() {
    return dto.getSource();
  }

  /**
   * <p>
   * the year of publication of the reference
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object CommunityReference</li>
   * </ul>
   * </p>
   * @return a java.lang.Integer publicationYear
   */
  public java.lang.Integer getPublicationYear() {
    return dto.getPublicationYear();
  }

  /**
   * <p>
   * the community member that authored the reference
   * </p>
   * <p>
   * Added by AddToOneAssociationRequiredObjectProperties as data member
   * </p>
   * <p>
   * This property loads lazily on demand the first time you call this method,
   * not when you instantiate the BsCommunityReference object.
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object CommunityReference</li>
   * </ul>
   * </p>
   * @return a org.tair.bs.community.BsCommunity member
   * @throws java.sql.SQLException when the method can't get a SQL connection to 
   *                               load the property lazily
   */
  public org.tair.bs.community.BsCommunity getMember() throws java.sql.SQLException {
    // Return 4
    return new org.tair.bs.community.BsCommunity(dto.getMember());
  }
}