/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractBsDto.vsl


package org.tair.bs.genomicregion;


import com.poesys.bs.delegate.DelegateException;
import com.poesys.bs.dto.IDto;
import com.poesys.db.dto.DtoStatusException;
import com.poesys.db.pk.IPrimaryKey;
import com.poesys.bs.dto.AbstractDto;


import org.tair.db.genomicregion.IReferenceGenome;
import org.tair.db.genomicregion.ReferenceGenomeProxy;
import org.tair.db.genomicregion.ReferenceGenome;


/**
 * <p>
 * A business layer data-transfer object (DTO) for the ReferenceGenome. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * SO_0001505: A collection of sequences (often chromosomes) taken as the standard
 * for a given organism and genome assembly
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>NaturalKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractBsReferenceGenome 
    extends AbstractDto<org.tair.db.genomicregion.IReferenceGenome> {

  /**
   * A Collection builder helper class for building a business-layer Collection 
   * of BsRegion objects from a Collection regions of data-access-layer 
   * org.tair.db.genomicregion.IRegion objects
   */
  private class BsRegionsCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<org.tair.db.genomicregion.IRegion, org.tair.bs.genomicregion.BsRegion> {
    @Override
    public org.tair.bs.genomicregion.BsRegion get(org.tair.db.genomicregion.IRegion dto) {
      return new org.tair.bs.genomicregion.BsRegion(dto);
    }
  }

  /**
   * A Collection builder helper class for building a data-access-layer Collection 
   * of Region objects from an input Collection regions of 
   * business-layer BsRegion objects
   */
  private class RegionsCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<org.tair.bs.genomicregion.BsRegion, org.tair.db.genomicregion.IRegion> {
    @Override
    public org.tair.db.genomicregion.IRegion get(org.tair.bs.genomicregion.BsRegion dto) {
      return dto.toDto();
    }
  }

  /**
   * Create a BsReferenceGenome object from a ReferenceGenome object.
   * 
   * @param dto the data-access layer ReferenceGenome DTO
   * @throws DelegateException when there is a problem creating the ReferenceGenome
   */
  public AbstractBsReferenceGenome(IReferenceGenome dto) throws DelegateException {
    super(dto);
  }

  /**
   * Create a ReferenceGenome from new data.
   *
   * @param key the primary key of the ReferenceGenome
   * @param genome the unique name for the reference genome, such as AGI or LYRATA
   * @param dateEntered the date on which the map was entered into the source database
   * @param taxonTaxonId foreign key used by setter to query associated object
   * @param accession foreign key used by setter to query associated object
   * @param name foreign key used by setter to query associated object
   * @param referenceVariantTaxonId foreign key used by setter to query associated object
   */
  public AbstractBsReferenceGenome(IPrimaryKey key, java.lang.String genome, java.sql.Timestamp dateEntered, java.lang.Long taxonTaxonId, java.lang.String accession, java.lang.String name, java.lang.Long referenceVariantTaxonId) {
    super(new ReferenceGenomeProxy(new ReferenceGenome(key, genome, dateEntered, taxonTaxonId, accession, name, referenceVariantTaxonId)));
  }

  @SuppressWarnings("unchecked")
  @Override
  public boolean equals(Object arg0) {
    // Unchecked cast here
    IDto<IReferenceGenome> other = (IDto<IReferenceGenome>)arg0;
    return dto.equals(other.toDto());
  }

  @Override
  public int hashCode() {
    return dto.hashCode();
  }

  public int compareTo(IDto<IReferenceGenome> o) {
    return dto.compareTo(o.toDto());
  }

  public void markChildrenDeleted() throws DtoStatusException {
    dto.markChildrenDeleted();
  }
  
  public IPrimaryKey getPrimaryKey() {
    return dto.getPrimaryKey();
  }

  // Data member properties

  /**
   * <p>
   * the unique name for the reference genome, such as AGI or LYRATA
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object ReferenceGenome</li>
   * </ul>
   * </p>
   * @return a java.lang.String genome
   */
  public java.lang.String getGenome() {
    return dto.getGenome();
  }

  /**
   * <p>
   * the date on which the map was entered into the source database
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object ReferenceGenome</li>
   * </ul>
   * </p>
   * @return a java.sql.Timestamp dateEntered
   */
  public java.sql.Timestamp getDateEntered() {
    return dto.getDateEntered();
  }

  /**
   * <p>
   * Set the dateEntered.
   * </p>
   * <p>
   * the date on which the map was entered into the source database
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object ReferenceGenome</li>
   * </ul>
   * </p>
   * @param dateEntered the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *                 required but the input parameter dateEntered is null
   */
  public void setDateEntered(java.sql.Timestamp dateEntered) 
      throws com.poesys.db.dto.DtoStatusException , com.poesys.db.InvalidParametersException {
    dto.setDateEntered(dateEntered);
  }

  /**
   * <p>
   * the taxon or species of the genome
   * </p>
   * <p>
   * Added by AddToOneAssociationRequiredObjectProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object ReferenceGenome</li>
   * </ul>
   * </p>
   * @return a org.tair.bs.basic.BsTaxon taxon
   */
  public org.tair.bs.basic.BsTaxon getTaxon() {
    // Return 4
    return new org.tair.bs.basic.BsTaxon(dto.getTaxon());
  }

  /**
   * <p>
   * Set the taxon.
   * </p>
   * <p>
   * the taxon or species of the genome
   * </p>
   * <p>
   * Added by AddToOneAssociationRequiredObjectProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object ReferenceGenome</li>
   * </ul>
   * </p>
   * @param taxon the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *                 required but the input parameter taxon is null
   */
  public void setTaxon(org.tair.bs.basic.BsTaxon taxon) 
      throws com.poesys.db.dto.DtoStatusException , com.poesys.db.InvalidParametersException {
    dto.setTaxon(taxon.toDto());
  }

  /**
   * <p>
   * the species variant that contributed the genetic material for the genome
   * sequence
   * </p>
   * <p>
   * Added by AddToOneAssociationRequiredObjectProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object ReferenceGenome</li>
   * </ul>
   * </p>
   * @return a org.tair.bs.basic.BsSpeciesVariant referenceVariant
   */
  public org.tair.bs.basic.BsSpeciesVariant getReferenceVariant() {
    // Return 4
    return new org.tair.bs.basic.BsSpeciesVariant(dto.getReferenceVariant());
  }

  /**
   * <p>
   * Set the referenceVariant.
   * </p>
   * <p>
   * the species variant that contributed the genetic material for the genome
   * sequence
   * </p>
   * <p>
   * Added by AddToOneAssociationRequiredObjectProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object ReferenceGenome</li>
   * </ul>
   * </p>
   * @param referenceVariant the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *                 required but the input parameter referenceVariant is null
   */
  public void setReferenceVariant(org.tair.bs.basic.BsSpeciesVariant referenceVariant) 
      throws com.poesys.db.dto.DtoStatusException , com.poesys.db.InvalidParametersException {
    dto.setReferenceVariant(referenceVariant.toDto());
  }

  /**
   * <p>
   * Foreign key used by setter to query associated object
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties + AddToOneAssociationAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object ReferenceGenome</li>
   * </ul>
   * </p>
   * @return a java.lang.Long taxonTaxonId
   */
  public java.lang.Long getTaxonTaxonId() {
    return dto.getTaxonTaxonId();
  }

  /**
   * <p>
   * Foreign key used by setter to query associated object
   * </p>
   * <p>
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddToOneAssociationAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object ReferenceGenome</li>
   * </ul>
   * </p>
   * @return a java.lang.String accession
   */
  public java.lang.String getAccession() {
    return dto.getAccession();
  }

  /**
   * <p>
   * Foreign key used by setter to query associated object
   * </p>
   * <p>
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddToOneAssociationAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object ReferenceGenome</li>
   * </ul>
   * </p>
   * @return a java.lang.String name
   */
  public java.lang.String getName() {
    return dto.getName();
  }

  /**
   * <p>
   * Foreign key used by setter to query associated object
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties + AddParentKeyAttributes + AddToOneAssociationAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object ReferenceGenome</li>
   * </ul>
   * </p>
   * @return a java.lang.Long referenceVariantTaxonId
   */
  public java.lang.Long getReferenceVariantTaxonId() {
    return dto.getReferenceVariantTaxonId();
  }

  /**
   * 
   * <p>
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object ReferenceGenome</li>
   * </ul>
   * </p>
   * @return a org.tair.bs.genomicregion.BsRegion regions
   */
  public java.util.Collection<org.tair.bs.genomicregion.BsRegion> getRegions() {
    BsRegionsCollectionBuilder builder = new BsRegionsCollectionBuilder();
    return builder.getCollection(dto.getRegions());
  }

  /**
   * <p>
   * Set the regions.
   * </p>
   * 
   * <p>
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object ReferenceGenome</li>
   * </ul>
   * </p>
   * @param regions the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   */
  public void setRegions(java.util.Collection<org.tair.bs.genomicregion.BsRegion> regions) 
      throws com.poesys.db.dto.DtoStatusException{
    RegionsCollectionBuilder builder = new RegionsCollectionBuilder();
      dto.setRegions(builder.getCollection(regions));
  }

  /**
   * Add a Region object to the regions collection.
   *
   * @param object the object to add to the collection
   */
  public void addRegionsRegion(org.tair.bs.genomicregion.BsRegion object) {
    dto.addRegionsRegion(object.toDto());
  }
}