/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDelegate.vsl

package org.tair.bs.genomicregion;


import com.poesys.bs.delegate.AbstractDataDelegate;
import com.poesys.bs.delegate.DelegateException;
import com.poesys.db.connection.IConnectionFactory.DBMS;
import com.poesys.db.dao.insert.IInsertSql;
import com.poesys.db.dao.update.IUpdateSql;
import com.poesys.db.dao.delete.IDeleteSql;
import com.poesys.db.dao.query.IKeyQuerySql;
import com.poesys.db.dao.query.IQuerySql;


/**
 * <p>
 * A business delegate that provides an application programming interface for
 * Transcript objects and their dependents. You should not modify this class;
 * instead, override or add methods in the class TranscriptDelegate, which
 * specializes this class.
 * </p>
 * <p>
 * SO:0000673: An RNA synthesized on a DNA or RNA template by an RNA polymerase.
 * </p>
 * @see TranscriptDelegate
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractTranscriptDelegate
    extends AbstractDataDelegate<BsTranscript, org.tair.db.genomicregion.ITranscript, com.poesys.db.pk.NaturalPrimaryKey> {
  /**
   * Create an AbstractTranscriptDelegate object by supplying the database
   * subsystem in the database.properties file.
   * 
   * @param subsystem the database subsystem to use in database.properties
   */
  public AbstractTranscriptDelegate(String subsystem) {
    super(subsystem, 2147483647);
  }

  /**
   * Create an AbstractTranscriptDelegate object by supplying the database
   * subsystem in the database.properties file and a specific DBMS, usually
   * IConnectionFactory.DBMS.JNDI.
   * 
   * @param subsystem the database subsystem to use in database.properties
   * @param dbms the DBMS to use (usually IConnectionFactory.DBMS.JNDI)
   */
  public AbstractTranscriptDelegate(String subsystem, DBMS dbms) {
    super(subsystem, dbms, 2147483647);
  }

  @Override
  protected String getClassName() {
    return org.tair.db.genomicregion.Transcript.class.getName();
  }

  @Override
  protected IInsertSql<org.tair.db.genomicregion.ITranscript> getInsertSql() {
    return new org.tair.db.genomicregion.sql.InsertTranscript();
  }

  @Override
  protected IDeleteSql<org.tair.db.genomicregion.ITranscript> getDeleteSql() {
    return new org.tair.db.genomicregion.sql.DeleteTranscript();
  }

  @Override
  protected IUpdateSql<org.tair.db.genomicregion.ITranscript> getUpdateSql() {
    return new org.tair.db.genomicregion.sql.UpdateTranscript();
  }

  @Override
  protected IKeyQuerySql<org.tair.db.genomicregion.ITranscript> getQueryByKeySql() {
    return new org.tair.db.genomicregion.sql.QueryTranscript();
  }

  @Override
  protected IQuerySql<org.tair.db.genomicregion.ITranscript> getQueryListSql() {
    // Query-All method not required
    return new org.tair.db.genomicregion.sql.QueryAllTranscript();
  }

  @Override
  protected org.tair.bs.genomicregion.BsTranscript wrapData(org.tair.db.genomicregion.ITranscript dto) {
    return new org.tair.bs.genomicregion.BsTranscript(dto);
  }

  /**
   * <p>
   * Create a new Transcript with data fields.
   * </p>
   * <p>
   * The Transcript class has no key of its own but inherits from a superclass
   * that has a NaturalKey. When you create an instance of this
   * class, the delegate creates a key of that type in the superclass.
   * </p>
   * 
   * @param tairObjectId the unique identifier in the TAIR database for the region (locus, gene,
chromosome, contig)
   * @param name the name of the genomic region, such as the chromosome name (1, M), the
locus/gene name (AT1G01010), the transcript name (AT1G01010.1), or the contig
name (MI421-MI421); may or may not be unique within a genome
   * @param dateEntered the date on which the region was created in the source database
   * @param parentRegionTairObjectId foreign key used by setter to query associated object
   * @param genome foreign key used by setter to query associated object
   * @param sequence the complete DNA sequence for the transcript
   * @param seqTairObjectId the unique identifier for the cDNA
   * @param genbankAccession the unique identifier at GenBank for the cDNA sequence
   * @param primarySymbol the primary symbolic name for the transcript
   * @param primarySymbolFullName the full name for the primary symbolic name for the transcript (may be null)
   * @param startPosition the start of the transcript on the top level region (chromosome or contig)
   * @param endPosition the end of the transcript on the top-level parent region (chromosome or contig)
   * @param length the length of the transcript genomic region in base pairs (bp)
   * @param orientation the direction of the transcript genomic region in the DNA: forward or reverse;
   * @param basis the basis for assigning the transcript to the map:
BAC_end_sequencing
recombination
gene_annotation
fingerprint
hybridization
unknown
sequence_match
fingerprint_and_hybridization
   * @param derived whether the transcript  is derived ab initio or experimentally known in vivo
   * @param representativeGeneModel Is this transcript the representative alternatively spliced transcript for the
gene?
   * @param transcribesTairObjectId foreign key used by setter to query associated object
   * @return the new Transcript object
   * @throws DelegateException when there is a problem generating the key or
   *             creating the object
   */
  public org.tair.bs.genomicregion.BsTranscript createTranscript(java.lang.Long tairObjectId, java.lang.String name, java.sql.Timestamp dateEntered, java.lang.Long parentRegionTairObjectId, java.lang.String genome, java.lang.String sequence, java.lang.Long seqTairObjectId, java.lang.String genbankAccession, java.lang.String primarySymbol, java.lang.String primarySymbolFullName, java.lang.Long startPosition, java.lang.Long endPosition, java.lang.Long length, java.lang.String orientation, java.lang.String basis, java.lang.Boolean derived, java.lang.Boolean representativeGeneModel, java.lang.Long transcribesTairObjectId)
      throws DelegateException {
    com.poesys.db.pk.NaturalPrimaryKey key = null;
    try {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.LongColumnValue("tairObjectIdTairObjectId", tairObjectId));
      key = 
        com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.tair.db.genomicregion.Transcript");
    } catch (com.poesys.db.InvalidParametersException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    } catch (com.poesys.db.DuplicateKeyNameException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    }

    // Create a data-access DTO for direct access, no proxy required.
    org.tair.db.genomicregion.ITranscript dto =
      new org.tair.db.genomicregion.Transcript(key, tairObjectId, name, dateEntered, parentRegionTairObjectId, genome, sequence, seqTairObjectId, genbankAccession, primarySymbol, primarySymbolFullName, startPosition, endPosition, length, orientation, basis, derived, representativeGeneModel, transcribesTairObjectId);

    // Create the business DTO.
    return new org.tair.bs.genomicregion.BsTranscript(dto);
  }

  /**
   * Create a new Est child of Transcript with a composite key.
   * 
   * @param parent the parent of the child object to create
   * @param tairObjectId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param seqTairObjectId the unique TAIR identifier for the EST sequence
   * @param name the sequence name
   * @param sequence the DNA associated with the EST
   * @param genbankAccession the unique identifier at GenBank for the cDNA sequence
   * @param length the length of the cDNA sequence, unit is bp (base pairs)
   * @param startPosition the starting position on the chromosome in unit bp (base pairs)
   * @param endPosition the ending position on the chromosome in unit bp (base pairs)
   * @param cloneName the name of the clone from which the EST derives
   * @param cloneId the unique TAIR identifier for the clone from which the EST derives
   * @param dateEntered the date on which the protein record was created in the source database
   * @return a new Est business layer DTO
   * @throws DelegateException when a parameter causes a problem
   */
  public org.tair.bs.genomicregion.BsEst createEst(org.tair.bs.genomicregion.BsTranscript parent, java.lang.Long tairObjectId, java.lang.Long seqTairObjectId, java.lang.String name, java.lang.String sequence, java.lang.String genbankAccession, java.lang.Long length, java.lang.Long startPosition, java.lang.Long endPosition, java.lang.String cloneName, java.lang.Long cloneId, java.sql.Timestamp dateEntered) throws DelegateException {
    // Create the key.
    com.poesys.db.pk.CompositePrimaryKey key = null;
    try {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.LongColumnValue("seqTairObjectId", seqTairObjectId));
	  com.poesys.db.pk.IPrimaryKey subKey = 
	    com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.tair.db.genomicregion.Est");
      key = 
        com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parent.getPrimaryKey(), 
                                                              subKey,
                                                              "org.tair.db.genomicregion.Est");
    } catch (com.poesys.db.InvalidParametersException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    } catch (com.poesys.db.DuplicateKeyNameException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    }

    // Create a composite-key child data-access Est DTO for direct access, no proxy required.
    org.tair.db.genomicregion.IEst dto =
      new org.tair.db.genomicregion.Est(key, tairObjectId, seqTairObjectId, name, sequence, genbankAccession, length, startPosition, endPosition, cloneName, cloneId, dateEntered);

    // Create the business DTO.
    return new org.tair.bs.genomicregion.BsEst(dto);
  }
  /**
   * Create a new Polypeptide child of Transcript with a composite key.
   * 
   * @param parent the parent of the child object to create
   * @param tairObjectId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param aaSequenceId the unique TAIR amino acid sequence identifier
   * @param genbankDefinition the protein definition from GenBank
   * @param experimental whether the protein sequence was experimentally determined in vivo
   * @param description text describing the protein
   * @param genbankGi the GenBank GI sequence number associated with the protein
   * @param PirAccession the unique identifier in Protein Information Resource (PIR)
   * @param pl the isoelectric point number for the protein
   * @param molecularWeight the molecular weight of the protein molecule
   * @param ecNumber the Enzyme Commission number for the protein
   * @param tremblId the identifier at TREMBL for the protein
   * @param swissProtId the identifier at SwissProt for the protein
   * @param uniProtId the UniProt identifier for the protein
   * @param dateEntered the date on which the protein record was created in the source database
   * @return a new Polypeptide business layer DTO
   * @throws DelegateException when a parameter causes a problem
   */
  public org.tair.bs.genomicregion.BsPolypeptide createPolypeptide(org.tair.bs.genomicregion.BsTranscript parent, java.lang.Long tairObjectId, java.lang.Long aaSequenceId, java.lang.String genbankDefinition, java.lang.Boolean experimental, java.lang.String description, java.lang.String genbankGi, java.lang.String PirAccession, java.lang.Double pl, java.lang.Double molecularWeight, java.lang.String ecNumber, java.lang.String tremblId, java.lang.String swissProtId, java.lang.String uniProtId, java.sql.Timestamp dateEntered) throws DelegateException {
    // Create the key.
    com.poesys.db.pk.CompositePrimaryKey key = null;
    try {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.LongColumnValue("aaSequenceId", aaSequenceId));
	  com.poesys.db.pk.IPrimaryKey subKey = 
	    com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.tair.db.genomicregion.Polypeptide");
      key = 
        com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parent.getPrimaryKey(), 
                                                              subKey,
                                                              "org.tair.db.genomicregion.Polypeptide");
    } catch (com.poesys.db.InvalidParametersException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    } catch (com.poesys.db.DuplicateKeyNameException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    }

    // Create a composite-key child data-access Polypeptide DTO for direct access, no proxy required.
    org.tair.db.genomicregion.IPolypeptide dto =
      new org.tair.db.genomicregion.Polypeptide(key, tairObjectId, aaSequenceId, genbankDefinition, experimental, description, genbankGi, PirAccession, pl, molecularWeight, ecNumber, tremblId, swissProtId, uniProtId, dateEntered);

    // Create the business DTO.
    return new org.tair.bs.genomicregion.BsPolypeptide(dto);
  }
  /**
   * Create a new ExperimentalCdna child of Transcript with a composite key.
   * 
   * @param parent the parent of the child object to create
   * @param tairObjectId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param seqTairObjectId the unique TAIR identifier for the cDNA sequence
   * @param name the sequence name
   * @param sequence the DNA sequence for the cDNA
   * @param genbankAccession the unique identifier at GenBank for the cDNA sequence
   * @param vectorType the kind of vector associated with the cDNA:
BAC
BiBAC
P1
TAC
YAC
cosmid
lambda
plasmid
unknown
   * @param fullLengthCds whether this cDNA is a "full-length" cDNA that contains the entire coding region
of the gene
   * @param length the length of the cDNA sequence, unit is bp (base pairs)
   * @param startPosition the starting position on the chromosome in unit bp (base pairs)
   * @param endPosition the ending position on the chromosome in unit bp (base pairs)
   * @param dateEntered the date on which the protein record was created in the source database
   * @return a new ExperimentalCdna business layer DTO
   * @throws DelegateException when a parameter causes a problem
   */
  public org.tair.bs.genomicregion.BsExperimentalCdna createExperimentalCdna(org.tair.bs.genomicregion.BsTranscript parent, java.lang.Long tairObjectId, java.lang.Long seqTairObjectId, java.lang.String name, java.lang.String sequence, java.lang.String genbankAccession, java.lang.String vectorType, java.lang.Boolean fullLengthCds, java.lang.Long length, java.lang.Long startPosition, java.lang.Long endPosition, java.sql.Timestamp dateEntered) throws DelegateException {
    // Create the key.
    com.poesys.db.pk.CompositePrimaryKey key = null;
    try {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.LongColumnValue("seqTairObjectId", seqTairObjectId));
	  com.poesys.db.pk.IPrimaryKey subKey = 
	    com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.tair.db.genomicregion.ExperimentalCdna");
      key = 
        com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parent.getPrimaryKey(), 
                                                              subKey,
                                                              "org.tair.db.genomicregion.ExperimentalCdna");
    } catch (com.poesys.db.InvalidParametersException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    } catch (com.poesys.db.DuplicateKeyNameException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    }

    // Create a composite-key child data-access ExperimentalCdna DTO for direct access, no proxy required.
    org.tair.db.genomicregion.IExperimentalCdna dto =
      new org.tair.db.genomicregion.ExperimentalCdna(key, tairObjectId, seqTairObjectId, name, sequence, genbankAccession, vectorType, fullLengthCds, length, startPosition, endPosition, dateEntered);

    // Create the business DTO.
    return new org.tair.bs.genomicregion.BsExperimentalCdna(dto);
  }

  @Override
  public void insert(java.util.List<BsTranscript> list) throws DelegateException {
    java.sql.Connection c = getConnection();
    
    // Create superclass inserters.
    
    // Region
    final com.poesys.db.dao.IDaoFactory<org.tair.db.genomicregion.IRegion> regionFactory =
      manager.getFactory("org.tair.db.genomicregion.Region", "org.tair.db.genomicregion", 2147483647);
    // Key type: NaturalKey, Inherited Key type: None
    com.poesys.db.dao.insert.IInsertBatch<org.tair.db.genomicregion.IRegion> regionInserter =
      regionFactory.getInsertBatch(new org.tair.db.genomicregion.sql.InsertRegion());
    java.util.Collection<org.tair.db.genomicregion.IRegion> regionDtos = convertDtoList(list);
    
    // Transcript (uses standard class factory from AbstractDataDelegate) None NaturalKey
    com.poesys.db.dao.insert.IInsertBatch<org.tair.db.genomicregion.ITranscript> transcriptInserter =
      factory.getInsertBatch(getInsertSql());
    java.util.Collection<org.tair.db.genomicregion.ITranscript> transcriptDtos = convertDtoList(list);

    try {
      // Insert the superclass objects from the root down.
      regionInserter.insert(c, regionDtos, regionDtos.size() / 2);
      // Undo the status change (EXISTS goes back to NEW) to allow next class to insert.
      undoStatus(regionDtos);
      // Insert the object of the current class.
      transcriptInserter.insert(c, transcriptDtos, transcriptDtos.size() / 2);
    } catch (com.poesys.db.ConstraintViolationException e) {
      rollBack(c, e.getMessage(), e);
    } catch (java.sql.SQLException e) {
      rollBack(c, e.getMessage(), e);
    } catch (com.poesys.db.BatchException e) {
      // Don't roll back the whole transaction; the DBMS rolls back the
      // individual inserts that failed, but the rest should be committed.
      String message = com.poesys.db.Message.getMessage(e.getMessage(), null);
      throw new DelegateException(message, e);
    } catch (com.poesys.db.dto.DtoStatusException e) {
      rollBack(c, e.getMessage(), e);
    } finally {
      commit(c);
      close(c);
      finalizeStatus(transcriptDtos, com.poesys.db.dto.IDbDto.Status.EXISTING);
    }
  }

  @Override
  public void process(java.util.List<BsTranscript> list) throws DelegateException {
    java.sql.Connection c = getConnection();

    // Create the 3 DAOs for inserting, updating, and deleting.
    com.poesys.db.dao.insert.IInsertBatch<org.tair.db.genomicregion.ITranscript> inserter = 
      factory.getInsertBatch(getInsertSql());
    com.poesys.db.dao.update.IUpdateBatch<org.tair.db.genomicregion.ITranscript> updater = 
      factory.getUpdateBatch(getUpdateSql());
    com.poesys.db.dao.delete.IDeleteBatch<org.tair.db.genomicregion.ITranscript> deleter = 
      factory.getDeleteBatch(getDeleteSql());

    java.util.Collection<org.tair.db.genomicregion.ITranscript> dtos = convertDtoList(list);

    // Create the DAOs for inserting the superclasses.
    // Region
    final com.poesys.db.dao.IDaoFactory<org.tair.db.genomicregion.IRegion> regionFactory =
      manager.getFactory("org.tair.db.genomicregion.Region", "org.tair.db.genomicregion.Region", 2147483647);
    com.poesys.db.dao.insert.IInsertBatch<org.tair.db.genomicregion.IRegion> regionInserter =
      regionFactory.getInsertBatch(new org.tair.db.genomicregion.sql.InsertRegion());
    java.util.Collection<org.tair.db.genomicregion.IRegion> regionDtos = convertDtoList(list);
    

    // Delete, insert, and update the objects. Each DAO will process only those
    // objects that have the appropriate status for the operation.
    try {
      if (deleter != null) {
        deleter.delete(c, dtos, dtos.size() / 2);
      }

      // Insert the superclass objects from the root down.
      if (regionInserter != null) {
        regionInserter.insert(c, regionDtos, regionDtos.size() / 2);
        // Undo the status change (EXISTS goes back to NEW) to allow next class to insert.
        undoStatus(regionDtos);
      }
      
      // Insert the leaf object.
      if (inserter != null) {
        inserter.insert(c, dtos, dtos.size() / 2);
      }
      
      // Update the object.
      if (updater != null) {
        updater.update(c, dtos, dtos.size() / 2);
      }
    } catch (com.poesys.db.ConstraintViolationException e) {
      rollBack(c, e.getMessage(), e);
    } catch (java.sql.SQLException e) {
      rollBack(c, e.getMessage(), e);
    } catch (com.poesys.db.BatchException e) {
      // Don't roll back the whole transaction; the DBMS rolls back the
      // individual operations that failed, but the rest should be committed.
      String message = com.poesys.db.Message.getMessage(e.getMessage(), null);
      throw new DelegateException(message, e);
    } catch (com.poesys.db.dto.DtoStatusException e) {
      String message = com.poesys.db.Message.getMessage(e.getMessage(), null);
      rollBack(c, message, e);
    } finally {
      commit(c);
      close(c);
      finalizeStatus(dtos, com.poesys.db.dto.IDbDto.Status.EXISTING);
      finalizeStatus(dtos, com.poesys.db.dto.IDbDto.Status.DELETED);
    }
  }

  @Override
  public void truncateTable(String tableName) throws DelegateException {
    java.sql.Connection c = getConnection();
    com.poesys.db.dao.ddl.ISql sql = null;
    com.poesys.db.dao.ddl.IExecuteSql executive = null;

    // First truncate any child tables.
    sql = new com.poesys.db.dao.ddl.TruncateTableSql("Est");
    executive = new com.poesys.db.dao.ddl.ExecuteSql(sql);
    try {
      executive.execute(c);
    } catch (java.sql.SQLException e) {
      throw new DelegateException(e.getMessage() + ": " + "Est", e);
    }

    sql = new com.poesys.db.dao.ddl.TruncateTableSql("Polypeptide");
    executive = new com.poesys.db.dao.ddl.ExecuteSql(sql);
    try {
      executive.execute(c);
    } catch (java.sql.SQLException e) {
      throw new DelegateException(e.getMessage() + ": " + "Polypeptide", e);
    }

    sql = new com.poesys.db.dao.ddl.TruncateTableSql("ExperimentalCdna");
    executive = new com.poesys.db.dao.ddl.ExecuteSql(sql);
    try {
      executive.execute(c);
    } catch (java.sql.SQLException e) {
      throw new DelegateException(e.getMessage() + ": " + "ExperimentalCdna", e);
    }

    // Now truncate the current table.
    sql = new com.poesys.db.dao.ddl.TruncateTableSql(tableName);
    executive = new com.poesys.db.dao.ddl.ExecuteSql(sql);
    try {
      executive.execute(c);
    } catch (java.sql.SQLException e) {
      throw new DelegateException(e.getMessage() + ": " + "Transcript", e);
    }
  }
}
