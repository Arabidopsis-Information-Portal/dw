/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDelegate.vsl

package org.tair.bs.genomicregion;


import com.poesys.bs.delegate.AbstractDataDelegate;
import com.poesys.bs.delegate.DelegateException;
import com.poesys.db.connection.IConnectionFactory.DBMS;
import com.poesys.db.dao.insert.IInsertSql;
import com.poesys.db.dao.update.IUpdateSql;
import com.poesys.db.dao.delete.IDeleteSql;
import com.poesys.db.dao.query.IKeyQuerySql;
import com.poesys.db.dao.query.IQuerySql;


/**
 * <p>
 * A business delegate that provides an application programming interface for
 * ReferenceGenome objects and their dependents. You should not modify this class;
 * instead, override or add methods in the class ReferenceGenomeDelegate, which
 * specializes this class.
 * </p>
 * <p>
 * SO_0001505: A collection of sequences (often chromosomes) taken as the standard
 * for a given organism and genome assembly
 * </p>
 * @see ReferenceGenomeDelegate
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractReferenceGenomeDelegate
    extends AbstractDataDelegate<BsReferenceGenome, org.tair.db.genomicregion.IReferenceGenome, com.poesys.db.pk.NaturalPrimaryKey> {
  /**
   * Create an AbstractReferenceGenomeDelegate object by supplying the database
   * subsystem in the database.properties file.
   * 
   * @param subsystem the database subsystem to use in database.properties
   */
  public AbstractReferenceGenomeDelegate(String subsystem) {
    super(subsystem, 2147483647);
  }

  /**
   * Create an AbstractReferenceGenomeDelegate object by supplying the database
   * subsystem in the database.properties file and a specific DBMS, usually
   * IConnectionFactory.DBMS.JNDI.
   * 
   * @param subsystem the database subsystem to use in database.properties
   * @param dbms the DBMS to use (usually IConnectionFactory.DBMS.JNDI)
   */
  public AbstractReferenceGenomeDelegate(String subsystem, DBMS dbms) {
    super(subsystem, dbms, 2147483647);
  }

  @Override
  protected String getClassName() {
    return org.tair.db.genomicregion.ReferenceGenome.class.getName();
  }

  @Override
  protected IInsertSql<org.tair.db.genomicregion.IReferenceGenome> getInsertSql() {
    return new org.tair.db.genomicregion.sql.InsertReferenceGenome();
  }

  @Override
  protected IDeleteSql<org.tair.db.genomicregion.IReferenceGenome> getDeleteSql() {
    return new org.tair.db.genomicregion.sql.DeleteReferenceGenome();
  }

  @Override
  protected IUpdateSql<org.tair.db.genomicregion.IReferenceGenome> getUpdateSql() {
    return new org.tair.db.genomicregion.sql.UpdateReferenceGenome();
  }

  @Override
  protected IKeyQuerySql<org.tair.db.genomicregion.IReferenceGenome> getQueryByKeySql() {
    return new org.tair.db.genomicregion.sql.QueryReferenceGenome();
  }

  @Override
  protected IQuerySql<org.tair.db.genomicregion.IReferenceGenome> getQueryListSql() {
    // Query-All method not required
    return new org.tair.db.genomicregion.sql.QueryAllReferenceGenome();
  }

  @Override
  protected org.tair.bs.genomicregion.BsReferenceGenome wrapData(org.tair.db.genomicregion.IReferenceGenome dto) {
    return new org.tair.bs.genomicregion.BsReferenceGenome(dto);
  }

  /**
   * <p>
   * Create a new ReferenceGenome with data fields.
   * </p>
   * <p>
   * The ReferenceGenome class has a natural key; this method creates the primary
   * key from the appropriate input properties.
   * </p>
   * 
   * @param genome the unique name for the reference genome, such as AGI or LYRATA
   * @param dateEntered the date on which the map was entered into the source database
   * @param taxonTaxonId foreign key used by setter to query associated object
   * @param accession foreign key used by setter to query associated object
   * @param name foreign key used by setter to query associated object
   * @param referenceVariantTaxonId foreign key used by setter to query associated object
   * @return the new ReferenceGenome object
   * @throws DelegateException when there is a problem generating the key or
   *             creating the object
   */
  public org.tair.bs.genomicregion.BsReferenceGenome createReferenceGenome(java.lang.String genome, java.sql.Timestamp dateEntered, java.lang.Long taxonTaxonId, java.lang.String accession, java.lang.String name, java.lang.Long referenceVariantTaxonId)
      throws DelegateException {
    com.poesys.db.pk.NaturalPrimaryKey key = null;
    try {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.StringColumnValue("genome", genome));
      key = 
        com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.tair.db.genomicregion.ReferenceGenome");
    } catch (com.poesys.db.InvalidParametersException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    } catch (com.poesys.db.DuplicateKeyNameException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    }

    // Create a data-access DTO for direct access, no proxy required.
    org.tair.db.genomicregion.IReferenceGenome dto =
      new org.tair.db.genomicregion.ReferenceGenome(key, genome, dateEntered, taxonTaxonId, accession, name, referenceVariantTaxonId);

    // Create the business DTO.
    return new org.tair.bs.genomicregion.BsReferenceGenome(dto);
  }

}
