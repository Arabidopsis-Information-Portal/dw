/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractBsDto.vsl


package org.tair.bs.basic;


import com.poesys.bs.delegate.DelegateException;
import com.poesys.bs.dto.IDto;
import com.poesys.db.dto.DtoStatusException;
import com.poesys.db.pk.IPrimaryKey;
import com.poesys.bs.dto.AbstractDto;


import org.tair.db.basic.ITaxon;
import org.tair.db.basic.TaxonProxy;
import org.tair.db.basic.Taxon;


/**
 * <p>
 * A business layer data-transfer object (DTO) for the Taxon. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * The species identification for a set of loci
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>NaturalKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: false
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractBsTaxon 
    extends AbstractDto<org.tair.db.basic.ITaxon> {

  /**
   * A Collection builder helper class for building a business-layer Collection 
   * of BsSpeciesVariant objects from a Collection variants of data-access-layer 
   * org.tair.db.basic.ISpeciesVariant objects
   */
  private class BsVariantsCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<org.tair.db.basic.ISpeciesVariant, org.tair.bs.basic.BsSpeciesVariant> {
    @Override
    public org.tair.bs.basic.BsSpeciesVariant get(org.tair.db.basic.ISpeciesVariant dto) {
      return new org.tair.bs.basic.BsSpeciesVariant(dto);
    }
  }

  /**
   * A Collection builder helper class for building a data-access-layer Collection 
   * of SpeciesVariant objects from an input Collection variants of 
   * business-layer BsSpeciesVariant objects
   */
  private class VariantsCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<org.tair.bs.basic.BsSpeciesVariant, org.tair.db.basic.ISpeciesVariant> {
    @Override
    public org.tair.db.basic.ISpeciesVariant get(org.tair.bs.basic.BsSpeciesVariant dto) {
      return dto.toDto();
    }
  }

  /**
   * Create a BsTaxon object from a Taxon object.
   * 
   * @param dto the data-access layer Taxon DTO
   * @throws DelegateException when there is a problem creating the Taxon
   */
  public AbstractBsTaxon(ITaxon dto) throws DelegateException {
    super(dto);
  }

  /**
   * Create a Taxon from new data.
   *
   * @param key the primary key of the Taxon
   * @param taxonId a unique identifier for the species taxon
   * @param genus the scientific genus name (collection of related species)
   * @param species the scientific species name within the genus
   * @param common the common botanical or zoological name for the species
   */
  public AbstractBsTaxon(IPrimaryKey key, java.lang.Long taxonId, java.lang.String genus, java.lang.String species, java.lang.String common) {
    super(new TaxonProxy(new Taxon(key, taxonId, genus, species, common)));
  }

  @SuppressWarnings("unchecked")
  @Override
  public boolean equals(Object arg0) {
    // Unchecked cast here
    IDto<ITaxon> other = (IDto<ITaxon>)arg0;
    return dto.equals(other.toDto());
  }

  @Override
  public int hashCode() {
    return dto.hashCode();
  }

  public int compareTo(IDto<ITaxon> o) {
    return dto.compareTo(o.toDto());
  }

  public void markChildrenDeleted() throws DtoStatusException {
    dto.markChildrenDeleted();
  }
  
  public IPrimaryKey getPrimaryKey() {
    return dto.getPrimaryKey();
  }

  // Data member properties

  /**
   * <p>
   * a unique identifier for the species taxon
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object Taxon</li>
   * </ul>
   * </p>
   * @return a java.lang.Long taxonId
   */
  public java.lang.Long getTaxonId() {
    return dto.getTaxonId();
  }

  /**
   * <p>
   * the scientific genus name (collection of related species)
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object Taxon</li>
   * </ul>
   * </p>
   * @return a java.lang.String genus
   */
  public java.lang.String getGenus() {
    return dto.getGenus();
  }

  /**
   * <p>
   * the scientific species name within the genus
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object Taxon</li>
   * </ul>
   * </p>
   * @return a java.lang.String species
   */
  public java.lang.String getSpecies() {
    return dto.getSpecies();
  }

  /**
   * <p>
   * the common botanical or zoological name for the species
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object Taxon</li>
   * </ul>
   * </p>
   * @return a java.lang.String common
   */
  public java.lang.String getCommon() {
    return dto.getCommon();
  }

  /**
   * <p>
   * the set of genomic variant individuals that provide the genetic material for
   * sequencing a genome for a taxon
   * </p>
   * <p>
   * Added by AddToManyChildCollectionProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object Taxon</li>
   * </ul>
   * </p>
   * @return a org.tair.bs.basic.BsSpeciesVariant variants
   */
  public java.util.Collection<org.tair.bs.basic.BsSpeciesVariant> getVariants() {
    BsVariantsCollectionBuilder builder = new BsVariantsCollectionBuilder();
    return builder.getCollection(dto.getVariants());
  }
}