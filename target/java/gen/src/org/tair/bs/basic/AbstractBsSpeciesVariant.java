/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractBsDto.vsl


package org.tair.bs.basic;


import com.poesys.bs.delegate.DelegateException;
import com.poesys.bs.dto.IDto;
import com.poesys.db.dto.DtoStatusException;
import com.poesys.db.pk.IPrimaryKey;
import com.poesys.bs.dto.AbstractDto;


import org.tair.db.basic.ISpeciesVariant;
import org.tair.db.basic.SpeciesVariantProxy;
import org.tair.db.basic.SpeciesVariant;


/**
 * <p>
 * A business layer data-transfer object (DTO) for the SpeciesVariant. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * 
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>CompositeKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractBsSpeciesVariant 
    extends AbstractDto<org.tair.db.basic.ISpeciesVariant> {

  /**
   * Create a BsSpeciesVariant object from a SpeciesVariant object.
   * 
   * @param dto the data-access layer SpeciesVariant DTO
   * @throws DelegateException when there is a problem creating the SpeciesVariant
   */
  public AbstractBsSpeciesVariant(ISpeciesVariant dto) throws DelegateException {
    super(dto);
  }

  /**
   * Create a SpeciesVariant from new data.
   *
   * @param key the primary key of the SpeciesVariant
   * @param taxonId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param name the name of the variant ecotype or species variant; first part of the primary
key
   * @param accession the accession identifier for this particular variant (second part of the primary
key); nulls in the original database translate into zero.
   * @param reference whether this is the reference species variant/ecotype for the taxon
   */
  public AbstractBsSpeciesVariant(IPrimaryKey key, java.lang.Long taxonId, java.lang.String name, java.lang.String accession, java.lang.Boolean reference) {
    super(new SpeciesVariantProxy(new SpeciesVariant(key, taxonId, name, accession, reference)));
  }

  @SuppressWarnings("unchecked")
  @Override
  public boolean equals(Object arg0) {
    // Unchecked cast here
    IDto<ISpeciesVariant> other = (IDto<ISpeciesVariant>)arg0;
    return dto.equals(other.toDto());
  }

  @Override
  public int hashCode() {
    return dto.hashCode();
  }

  public int compareTo(IDto<ISpeciesVariant> o) {
    return dto.compareTo(o.toDto());
  }

  public void markChildrenDeleted() throws DtoStatusException {
    dto.markChildrenDeleted();
  }
  
  public IPrimaryKey getPrimaryKey() {
    return dto.getPrimaryKey();
  }

  // Data member properties

  /**
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties + AddParentKeyAttributes as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object SpeciesVariant</li>
   * </ul>
   * </p>
   * @return a java.lang.Long taxonId
   */
  public java.lang.Long getTaxonId() {
    return dto.getTaxonId();
  }

  /**
   * <p>
   * the name of the variant ecotype or species variant; first part of the primary
   * key
   * </p>
   * <p>
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object SpeciesVariant</li>
   * </ul>
   * </p>
   * @return a java.lang.String name
   */
  public java.lang.String getName() {
    return dto.getName();
  }

  /**
   * <p>
   * the accession identifier for this particular variant (second part of the primary
   * key); nulls in the original database translate into zero.
   * </p>
   * <p>
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object SpeciesVariant</li>
   * </ul>
   * </p>
   * @return a java.lang.String accession
   */
  public java.lang.String getAccession() {
    return dto.getAccession();
  }

  /**
   * <p>
   * whether this is the reference species variant/ecotype for the taxon
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object SpeciesVariant</li>
   * </ul>
   * </p>
   * @return a java.lang.Boolean reference
   */
  public java.lang.Boolean getReference() {
    return dto.getReference();
  }

  /**
   * <p>
   * Set the reference.
   * </p>
   * <p>
   * whether this is the reference species variant/ecotype for the taxon
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object SpeciesVariant</li>
   * </ul>
   * </p>
   * @param reference the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *                 required but the input parameter reference is null
   */
  public void setReference(java.lang.Boolean reference) 
      throws com.poesys.db.dto.DtoStatusException , com.poesys.db.InvalidParametersException {
    dto.setReference(reference);
  }

  /**
   * <p>
   * the taxon or species to which the variant belongs
   * </p>
   * <p>
   * Added by AddToOneAssociationRequiredObjectProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object SpeciesVariant</li>
   * </ul>
   * </p>
   * @return a org.tair.bs.basic.BsTaxon taxon
   */
  public org.tair.bs.basic.BsTaxon getTaxon() {
    // Return 4
    return new org.tair.bs.basic.BsTaxon(dto.getTaxon());
  }

  /**
   * <p>
   * Set the taxon.
   * </p>
   * <p>
   * the taxon or species to which the variant belongs
   * </p>
   * <p>
   * Added by AddToOneAssociationRequiredObjectProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object SpeciesVariant</li>
   * </ul>
   * </p>
   * @param taxon the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *                 required but the input parameter taxon is null
   */
  public void setTaxon(org.tair.bs.basic.BsTaxon taxon) 
      throws com.poesys.db.dto.DtoStatusException , com.poesys.db.InvalidParametersException {
    dto.setTaxon(taxon.toDto());
  }
}