/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractBsDto.vsl


package org.tair.bs.locusdetail;


import com.poesys.bs.delegate.DelegateException;
import com.poesys.bs.dto.IDto;
import com.poesys.db.dto.DtoStatusException;
import com.poesys.db.pk.IPrimaryKey;
import com.poesys.bs.dto.AbstractDto;


import org.tair.db.locusdetail.ILocusNaturalVariation;
import org.tair.db.locusdetail.LocusNaturalVariationProxy;
import org.tair.db.locusdetail.LocusNaturalVariation;


/**
 * <p>
 * A business layer data-transfer object (DTO) for the LocusNaturalVariation. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * a naturally-occurring polymorphism between two ecotypes; induced polymorphisms
 * are differences within a single ecotype, whereas natural variation polymorphisms
 * differ between ecotypes
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: false
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractBsLocusNaturalVariation 
    extends AbstractDto<org.tair.db.locusdetail.ILocusNaturalVariation> {

  /**
   * A Collection builder helper class for building a business-layer Collection 
   * of BsLocusGeneModel objects from a Collection lociLocus of data-access-layer 
   * org.tair.db.locusdetail.ILocusGeneModel objects
   */
  private class BsLociLocusCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<org.tair.db.locusdetail.ILocusGeneModel, org.tair.bs.locusdetail.BsLocusGeneModel> {
    @Override
    public org.tair.bs.locusdetail.BsLocusGeneModel get(org.tair.db.locusdetail.ILocusGeneModel dto) {
      return new org.tair.bs.locusdetail.BsLocusGeneModel(dto);
    }
  }

  /**
   * A Collection builder helper class for building a data-access-layer Collection 
   * of LocusGeneModel objects from an input Collection lociLocus of 
   * business-layer BsLocusGeneModel objects
   */
  private class LociLocusCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<org.tair.bs.locusdetail.BsLocusGeneModel, org.tair.db.locusdetail.ILocusGeneModel> {
    @Override
    public org.tair.db.locusdetail.ILocusGeneModel get(org.tair.bs.locusdetail.BsLocusGeneModel dto) {
      return dto.toDto();
    }
  }

  /**
   * A Collection builder helper class for building a business-layer Collection 
   * of BsPolymorphismSite objects from a Collection polymorphismSite of data-access-layer 
   * org.tair.db.locusdetail.IPolymorphismSite objects
   */
  private class BsPolymorphismSiteCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<org.tair.db.locusdetail.IPolymorphismSite, org.tair.bs.locusdetail.BsPolymorphismSite> {
    @Override
    public org.tair.bs.locusdetail.BsPolymorphismSite get(org.tair.db.locusdetail.IPolymorphismSite dto) {
      return new org.tair.bs.locusdetail.BsPolymorphismSite(dto);
    }
  }

  /**
   * A Collection builder helper class for building a data-access-layer Collection 
   * of PolymorphismSite objects from an input Collection polymorphismSite of 
   * business-layer BsPolymorphismSite objects
   */
  private class PolymorphismSiteCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<org.tair.bs.locusdetail.BsPolymorphismSite, org.tair.db.locusdetail.IPolymorphismSite> {
    @Override
    public org.tair.db.locusdetail.IPolymorphismSite get(org.tair.bs.locusdetail.BsPolymorphismSite dto) {
      return dto.toDto();
    }
  }

  /**
   * A Collection builder helper class for building a business-layer Collection 
   * of BsLocusNaturalVariationEcotype objects from a Collection ecotypes of data-access-layer 
   * org.tair.db.locusdetail.ILocusNaturalVariationEcotype objects
   */
  private class BsEcotypesCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<org.tair.db.locusdetail.ILocusNaturalVariationEcotype, org.tair.bs.locusdetail.BsLocusNaturalVariationEcotype> {
    @Override
    public org.tair.bs.locusdetail.BsLocusNaturalVariationEcotype get(org.tair.db.locusdetail.ILocusNaturalVariationEcotype dto) {
      return new org.tair.bs.locusdetail.BsLocusNaturalVariationEcotype(dto);
    }
  }

  /**
   * A Collection builder helper class for building a data-access-layer Collection 
   * of LocusNaturalVariationEcotype objects from an input Collection ecotypes of 
   * business-layer BsLocusNaturalVariationEcotype objects
   */
  private class EcotypesCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<org.tair.bs.locusdetail.BsLocusNaturalVariationEcotype, org.tair.db.locusdetail.ILocusNaturalVariationEcotype> {
    @Override
    public org.tair.db.locusdetail.ILocusNaturalVariationEcotype get(org.tair.bs.locusdetail.BsLocusNaturalVariationEcotype dto) {
      return dto.toDto();
    }
  }

  /**
   * Create a BsLocusNaturalVariation object from a LocusNaturalVariation object.
   * 
   * @param dto the data-access layer LocusNaturalVariation DTO
   * @throws DelegateException when there is a problem creating the LocusNaturalVariation
   */
  public AbstractBsLocusNaturalVariation(ILocusNaturalVariation dto) throws DelegateException {
    super(dto);
  }

  /**
   * Create a LocusNaturalVariation from new data.
   *
   * @param key the primary key of the LocusNaturalVariation
   * @param locusTairObjectId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param polymorphismName the name of the polymorphism
   * @param polymorphismTairObjectId the TAIR object id for the polymorphism, used in URL links to the polymorphism
   * @param polymorphismType the kind of difference (insertion, substitution, deletion)
   * @param length the length of the polymorphic region in base pairs (bp)
   * @param start the starting position on the AGI map of the polymorphism
   * @param end the end position of the polymorphic region in the AGI map
   * @param detail a text representation of the structural details of the polymorphic difference
between the ecotypes (for example, a SNP with G->A)
   * @param accession foreign key used by setter to query associated object
   * @param name foreign key used by setter to query associated object
   * @param taxonId foreign key used by setter to query associated object
   */
  public AbstractBsLocusNaturalVariation(IPrimaryKey key, java.lang.Long locusTairObjectId, java.lang.String polymorphismName, java.lang.Long polymorphismTairObjectId, java.lang.String polymorphismType, java.lang.Long length, java.lang.Long start, java.lang.Long end, java.lang.String detail, java.lang.String accession, java.lang.String name, java.lang.Long taxonId) {
    super(new LocusNaturalVariationProxy(new LocusNaturalVariation(key, locusTairObjectId, polymorphismName, polymorphismTairObjectId, polymorphismType, length, start, end, detail, accession, name, taxonId)));
  }

  @SuppressWarnings("unchecked")
  @Override
  public boolean equals(Object arg0) {
    // Unchecked cast here
    IDto<ILocusNaturalVariation> other = (IDto<ILocusNaturalVariation>)arg0;
    return dto.equals(other.toDto());
  }

  @Override
  public int hashCode() {
    return dto.hashCode();
  }

  public int compareTo(IDto<ILocusNaturalVariation> o) {
    return dto.compareTo(o.toDto());
  }

  public void markChildrenDeleted() throws DtoStatusException {
    dto.markChildrenDeleted();
  }
  
  public IPrimaryKey getPrimaryKey() {
    return dto.getPrimaryKey();
  }

  // Inherited properties

  /**
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties + AddParentKeyAttributes + AddInheritedKeyProperties through inheritance
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is inherited from a superclass</li>
   * </ul>
   * </p>
   * @return a java.lang.Long locusTairObjectId
   */

  public java.lang.Long getLocusTairObjectId() {
    return dto.getLocusTairObjectId();
  }
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * the name of the polymorphism
   * </p>
   * <p>
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddInheritedKeyProperties through inheritance
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is inherited from a superclass</li>
   * </ul>
   * </p>
   * @return a java.lang.String polymorphismName
   */

  public java.lang.String getPolymorphismName() {
    return dto.getPolymorphismName();
  }
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * the locus within which the polymorphism appears
   * </p>
   * <p>
   * Added by addAssociationObjects + AddInheritedAssociationObjectProperties through inheritance
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is inherited from a superclass</li>
   * </ul>
   * </p>
   * @return a org.tair.db.locusdetail.ILocusDetail locusLocus
   */
  public org.tair.bs.locusdetail.BsLocusDetail getLocusLocus() {
    // Return 2
    return new org.tair.bs.locusdetail.BsLocusDetail(dto.getLocusLocus());
  }
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * the set of loci that have sites to which a polymorphism maps
   * </p>
   * <p>
   * Added by AddInheritedToManyAssociationProperties through inheritance
   * </p>
   * <p>
   * This property loads lazily on demand rather than when you first query the 
   * ILocusNaturalVariation object.
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is inherited from a superclass</li>
   * </ul>
   * </p>
   * @return a Collection of ILocusGeneModel lociLocus
   * @throws java.sql.SQLException when the method can't get a SQL connection to 
   *                               load the property lazily
   */
  public java.util.Collection<org.tair.bs.locusdetail.BsLocusGeneModel> getLociLocus() throws java.sql.SQLException {
    BsLociLocusCollectionBuilder builder = new BsLociLocusCollectionBuilder();
    return builder.getCollection(dto.getLociLocus());
  }
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   * <p>
   * Added by AddInheritedAssociationClassCollectionProperties through inheritance
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is inherited from a superclass</li>
   * </ul>
   * </p>
   * @return a Collection of IPolymorphismSite polymorphismSite
   */
  public java.util.Collection<org.tair.bs.locusdetail.BsPolymorphismSite> getPolymorphismSite() {
    BsPolymorphismSiteCollectionBuilder builder = new BsPolymorphismSiteCollectionBuilder();
    return builder.getCollection(dto.getPolymorphismSite());
  }
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: true

  /**
   * <p>
   * the TAIR object id for the polymorphism, used in URL links to the polymorphism
   * </p>
   * <p>
   * Added by TransformToProperty + AddInheritedAttributeProperties through inheritance
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is inherited from a superclass</li>
   * </ul>
   * </p>
   * @return a java.lang.Long polymorphismTairObjectId
   */

  public java.lang.Long getPolymorphismTairObjectId() {
    return dto.getPolymorphismTairObjectId();
  }
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * the kind of difference (insertion, substitution, deletion)
   * </p>
   * <p>
   * Added by TransformToProperty + AddInheritedAttributeProperties through inheritance
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is inherited from a superclass</li>
   * </ul>
   * </p>
   * @return a java.lang.String polymorphismType
   */

  public java.lang.String getPolymorphismType() {
    return dto.getPolymorphismType();
  }
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * the length of the polymorphic region in base pairs (bp)
   * </p>
   * <p>
   * Added by TransformToProperty + AddInheritedAttributeProperties through inheritance
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is inherited from a superclass</li>
   * </ul>
   * </p>
   * @return a java.lang.Long length
   */

  public java.lang.Long getLength() {
    return dto.getLength();
  }
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * the starting position on the AGI map of the polymorphism
   * </p>
   * <p>
   * Added by TransformToProperty + AddInheritedAttributeProperties through inheritance
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is inherited from a superclass</li>
   * </ul>
   * </p>
   * @return a java.lang.Long start
   */

  public java.lang.Long getStart() {
    return dto.getStart();
  }
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * the end position of the polymorphic region in the AGI map
   * </p>
   * <p>
   * Added by TransformToProperty + AddInheritedAttributeProperties through inheritance
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is inherited from a superclass</li>
   * </ul>
   * </p>
   * @return a java.lang.Long end
   */

  public java.lang.Long getEnd() {
    return dto.getEnd();
  }
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: false
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  // Data member properties

  /**
   * <p>
   * a text representation of the structural details of the polymorphic difference
   * between the ecotypes (for example, a SNP with G->A)
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusNaturalVariation</li>
   * </ul>
   * </p>
   * @return a java.lang.String detail
   */
  public java.lang.String getDetail() {
    return dto.getDetail();
  }

  /**
   * <p>
   * the ecotype (species variant) that serves as the reference for the polymorphism;
   * the ecotype that contains the sequence that the polymorphism alters
   * </p>
   * <p>
   * Added by AddToOneAssociationRequiredObjectProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusNaturalVariation</li>
   * </ul>
   * </p>
   * @return a org.tair.bs.basic.BsSpeciesVariant referenceEcotypeReferenceEcotype
   */
  public org.tair.bs.basic.BsSpeciesVariant getReferenceEcotypeReferenceEcotype() {
    // Return 4
    return new org.tair.bs.basic.BsSpeciesVariant(dto.getReferenceEcotypeReferenceEcotype());
  }

  /**
   * <p>
   * Foreign key used by setter to query associated object
   * </p>
   * <p>
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddToOneAssociationAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusNaturalVariation</li>
   * </ul>
   * </p>
   * @return a java.lang.String accession
   */
  public java.lang.String getAccession() {
    return dto.getAccession();
  }

  /**
   * <p>
   * Foreign key used by setter to query associated object
   * </p>
   * <p>
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddToOneAssociationAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusNaturalVariation</li>
   * </ul>
   * </p>
   * @return a java.lang.String name
   */
  public java.lang.String getName() {
    return dto.getName();
  }

  /**
   * <p>
   * Foreign key used by setter to query associated object
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties + AddParentKeyAttributes + AddToOneAssociationAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusNaturalVariation</li>
   * </ul>
   * </p>
   * @return a java.lang.Long taxonId
   */
  public java.lang.Long getTaxonId() {
    return dto.getTaxonId();
  }

  /**
   * <p>
   * the collection of ecotypes that contain the natural variation polymorphism
   * </p>
   * <p>
   * Added by AddToManyChildCollectionProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusNaturalVariation</li>
   * </ul>
   * </p>
   * @return a org.tair.bs.locusdetail.BsLocusNaturalVariationEcotype ecotypes
   */
  public java.util.Collection<org.tair.bs.locusdetail.BsLocusNaturalVariationEcotype> getEcotypes() {
    BsEcotypesCollectionBuilder builder = new BsEcotypesCollectionBuilder();
    return builder.getCollection(dto.getEcotypes());
  }
}