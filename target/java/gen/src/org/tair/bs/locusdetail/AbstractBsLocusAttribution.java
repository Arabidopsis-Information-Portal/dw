/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractBsDto.vsl


package org.tair.bs.locusdetail;


import com.poesys.bs.delegate.DelegateException;
import com.poesys.bs.dto.IDto;
import com.poesys.db.dto.DtoStatusException;
import com.poesys.db.pk.IPrimaryKey;
import com.poesys.bs.dto.AbstractDto;


import org.tair.db.locusdetail.ILocusAttribution;
import org.tair.db.locusdetail.LocusAttributionProxy;
import org.tair.db.locusdetail.LocusAttribution;


/**
 * <p>
 * A business layer data-transfer object (DTO) for the LocusAttribution. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * The community member to which the locus is attributed
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>CompositeKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: false
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractBsLocusAttribution 
    extends AbstractDto<org.tair.db.locusdetail.ILocusAttribution> {

  /**
   * Create a BsLocusAttribution object from a LocusAttribution object.
   * 
   * @param dto the data-access layer LocusAttribution DTO
   * @throws DelegateException when there is a problem creating the LocusAttribution
   */
  public AbstractBsLocusAttribution(ILocusAttribution dto) throws DelegateException {
    super(dto);
  }

  /**
   * Create a LocusAttribution from new data.
   *
   * @param key the primary key of the LocusAttribution
   * @param locusTairObjectId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param locusAttributionNo composite subkey attribute that uniquely identifies child combined with parent key
   * @param attributionType the kind of attribution this is
   * @param linkType "person" or "org" depending on whether the community member is a person or an
organization
   * @param communityId the TAIR community ID for the attribution; used in links
   * @param name the community member's name
   * @param attributionDate the date on which the locus was attributed to the community member
   */
  public AbstractBsLocusAttribution(IPrimaryKey key, java.lang.Long locusTairObjectId, java.math.BigInteger locusAttributionNo, java.lang.String attributionType, java.lang.String linkType, java.lang.Long communityId, java.lang.String name, java.sql.Timestamp attributionDate) {
    super(new LocusAttributionProxy(new LocusAttribution(key, locusTairObjectId, locusAttributionNo, attributionType, linkType, communityId, name, attributionDate)));
  }

  @SuppressWarnings("unchecked")
  @Override
  public boolean equals(Object arg0) {
    // Unchecked cast here
    IDto<ILocusAttribution> other = (IDto<ILocusAttribution>)arg0;
    return dto.equals(other.toDto());
  }

  @Override
  public int hashCode() {
    return dto.hashCode();
  }

  public int compareTo(IDto<ILocusAttribution> o) {
    return dto.compareTo(o.toDto());
  }

  public void markChildrenDeleted() throws DtoStatusException {
    dto.markChildrenDeleted();
  }
  
  public IPrimaryKey getPrimaryKey() {
    return dto.getPrimaryKey();
  }

  // Data member properties

  /**
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties + AddParentKeyAttributes as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusAttribution</li>
   * </ul>
   * </p>
   * @return a java.lang.Long locusTairObjectId
   */
  public java.lang.Long getLocusTairObjectId() {
    return dto.getLocusTairObjectId();
  }

  /**
   * <p>
   * Composite subkey attribute that uniquely identifies child combined with parent key
   * </p>
   * <p>
   * Added by AddOrderedSubKeyProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object LocusAttribution</li>
   * </ul>
   * </p>
   * @return a java.math.BigInteger locusAttributionNo
   */
  public java.math.BigInteger getLocusAttributionNo() {
    return dto.getLocusAttributionNo();
  }

  /**
   * <p>
   * the kind of attribution this is
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusAttribution</li>
   * </ul>
   * </p>
   * @return a java.lang.String attributionType
   */
  public java.lang.String getAttributionType() {
    return dto.getAttributionType();
  }

  /**
   * <p>
   * "person" or "org" depending on whether the community member is a person or an
   * organization
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusAttribution</li>
   * </ul>
   * </p>
   * @return a java.lang.String linkType
   */
  public java.lang.String getLinkType() {
    return dto.getLinkType();
  }

  /**
   * <p>
   * the TAIR community ID for the attribution; used in links
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusAttribution</li>
   * </ul>
   * </p>
   * @return a java.lang.Long communityId
   */
  public java.lang.Long getCommunityId() {
    return dto.getCommunityId();
  }

  /**
   * <p>
   * the community member's name
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusAttribution</li>
   * </ul>
   * </p>
   * @return a java.lang.String name
   */
  public java.lang.String getName() {
    return dto.getName();
  }

  /**
   * <p>
   * the date on which the locus was attributed to the community member
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusAttribution</li>
   * </ul>
   * </p>
   * @return a java.sql.Timestamp attributionDate
   */
  public java.sql.Timestamp getAttributionDate() {
    return dto.getAttributionDate();
  }

  /**
   * <p>
   * the locus attributed to a community member
   * </p>
   * <p>
   * Added by AddToOneAssociationRequiredObjectProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusAttribution</li>
   * </ul>
   * </p>
   * @return a org.tair.bs.locusdetail.BsLocusDetail locus
   */
  public org.tair.bs.locusdetail.BsLocusDetail getLocus() {
    // Return 4
    return new org.tair.bs.locusdetail.BsLocusDetail(dto.getLocus());
  }
}