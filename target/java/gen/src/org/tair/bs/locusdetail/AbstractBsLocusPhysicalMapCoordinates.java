/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractBsDto.vsl


package org.tair.bs.locusdetail;


import com.poesys.bs.delegate.DelegateException;
import com.poesys.bs.dto.IDto;
import com.poesys.db.dto.DtoStatusException;
import com.poesys.db.pk.IPrimaryKey;
import com.poesys.bs.dto.AbstractDto;


import org.tair.db.locusdetail.ILocusPhysicalMapCoordinates;
import org.tair.db.locusdetail.LocusPhysicalMapCoordinatesProxy;
import org.tair.db.locusdetail.LocusPhysicalMapCoordinates;


/**
 * <p>
 * A business layer data-transfer object (DTO) for the LocusPhysicalMapCoordinates. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * The map coordinates for the parent locus on a chromosome
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>CompositeKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: false
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractBsLocusPhysicalMapCoordinates 
    extends AbstractDto<org.tair.db.locusdetail.ILocusPhysicalMapCoordinates> {

  /**
   * Create a BsLocusPhysicalMapCoordinates object from a LocusPhysicalMapCoordinates object.
   * 
   * @param dto the data-access layer LocusPhysicalMapCoordinates DTO
   * @throws DelegateException when there is a problem creating the LocusPhysicalMapCoordinates
   */
  public AbstractBsLocusPhysicalMapCoordinates(ILocusPhysicalMapCoordinates dto) throws DelegateException {
    super(dto);
  }

  /**
   * Create a LocusPhysicalMapCoordinates from new data.
   *
   * @param key the primary key of the LocusPhysicalMapCoordinates
   * @param locusTairObjectId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param mapId the unique identifier for the map, also uniquely identifies the map coordinates
object within the parent TAIR object; used in the URL that displays the map
   * @param mapName the name of the map
   * @param mapType the kind of map: "nucleotide sequence" (nuc_sequence) and "annotation unit"
(assembly_unit)
   * @param chromosome the name of the map chromosome on which the locus appears
   * @param startPosition starting position on the map
   * @param endPosition ending position on the map
   * @param units the unit of length (bp, kb)
   * @param orientation the orientation of the locus on the map, reverse or forward; may be unknown
   */
  public AbstractBsLocusPhysicalMapCoordinates(IPrimaryKey key, java.lang.Long locusTairObjectId, java.lang.Long mapId, java.lang.String mapName, java.lang.String mapType, java.lang.String chromosome, java.lang.Double startPosition, java.lang.Double endPosition, java.lang.String units, java.lang.String orientation) {
    super(new LocusPhysicalMapCoordinatesProxy(new LocusPhysicalMapCoordinates(key, locusTairObjectId, mapId, mapName, mapType, chromosome, startPosition, endPosition, units, orientation)));
  }

  @SuppressWarnings("unchecked")
  @Override
  public boolean equals(Object arg0) {
    // Unchecked cast here
    IDto<ILocusPhysicalMapCoordinates> other = (IDto<ILocusPhysicalMapCoordinates>)arg0;
    return dto.equals(other.toDto());
  }

  @Override
  public int hashCode() {
    return dto.hashCode();
  }

  public int compareTo(IDto<ILocusPhysicalMapCoordinates> o) {
    return dto.compareTo(o.toDto());
  }

  public void markChildrenDeleted() throws DtoStatusException {
    dto.markChildrenDeleted();
  }
  
  public IPrimaryKey getPrimaryKey() {
    return dto.getPrimaryKey();
  }

  // Data member properties

  /**
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties + AddParentKeyAttributes as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusPhysicalMapCoordinates</li>
   * </ul>
   * </p>
   * @return a java.lang.Long locusTairObjectId
   */
  public java.lang.Long getLocusTairObjectId() {
    return dto.getLocusTairObjectId();
  }

  /**
   * <p>
   * the unique identifier for the map, also uniquely identifies the map coordinates
   * object within the parent TAIR object; used in the URL that displays the map
   * </p>
   * <p>
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusPhysicalMapCoordinates</li>
   * </ul>
   * </p>
   * @return a java.lang.Long mapId
   */
  public java.lang.Long getMapId() {
    return dto.getMapId();
  }

  /**
   * <p>
   * the name of the map
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusPhysicalMapCoordinates</li>
   * </ul>
   * </p>
   * @return a java.lang.String mapName
   */
  public java.lang.String getMapName() {
    return dto.getMapName();
  }

  /**
   * <p>
   * the kind of map: "nucleotide sequence" (nuc_sequence) and "annotation unit"
   * (assembly_unit)
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusPhysicalMapCoordinates</li>
   * </ul>
   * </p>
   * @return a java.lang.String mapType
   */
  public java.lang.String getMapType() {
    return dto.getMapType();
  }

  /**
   * <p>
   * the name of the map chromosome on which the locus appears
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusPhysicalMapCoordinates</li>
   * </ul>
   * </p>
   * @return a java.lang.String chromosome
   */
  public java.lang.String getChromosome() {
    return dto.getChromosome();
  }

  /**
   * <p>
   * starting position on the map
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusPhysicalMapCoordinates</li>
   * </ul>
   * </p>
   * @return a java.lang.Double startPosition
   */
  public java.lang.Double getStartPosition() {
    return dto.getStartPosition();
  }

  /**
   * <p>
   * ending position on the map
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusPhysicalMapCoordinates</li>
   * </ul>
   * </p>
   * @return a java.lang.Double endPosition
   */
  public java.lang.Double getEndPosition() {
    return dto.getEndPosition();
  }

  /**
   * <p>
   * the unit of length (bp, kb)
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusPhysicalMapCoordinates</li>
   * </ul>
   * </p>
   * @return a java.lang.String units
   */
  public java.lang.String getUnits() {
    return dto.getUnits();
  }

  /**
   * <p>
   * the orientation of the locus on the map, reverse or forward; may be unknown
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusPhysicalMapCoordinates</li>
   * </ul>
   * </p>
   * @return a java.lang.String orientation
   */
  public java.lang.String getOrientation() {
    return dto.getOrientation();
  }

  /**
   * <p>
   * the locus that owns the map locations
   * </p>
   * <p>
   * Added by AddToOneAssociationRequiredObjectProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusPhysicalMapCoordinates</li>
   * </ul>
   * </p>
   * @return a org.tair.bs.locusdetail.BsLocusDetail locus
   */
  public org.tair.bs.locusdetail.BsLocusDetail getLocus() {
    // Return 4
    return new org.tair.bs.locusdetail.BsLocusDetail(dto.getLocus());
  }
}