/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractSubsystemDelegateFactory.vsl

package org.tair.bs.locusdetail;


/**
 * <p>
 * A set of factory methods for the instantiable business delegates in the 
 * Locusdetail subsystem. This class is abstract and has a single concrete 
 * subclass, LocusdetailDelegateFactory, that you can modify to override
 * the default behavior in the abstract class or implement an as-yet 
 * unimplemented delegate factory. You can, for example, override all the
 * factory methods with a different connection strategy.
 * </p>
 * <p>
 * The subsystem that contains all the details relating to the loci
 * </p>
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractLocusdetailDelegateFactory {
  /** 
   * The fully qualified name of the Locusdetail subsystem properties file,
   * not including the locale information. This comes from the UML subsystem
   * as the package name concatenated to the subsystem name (the fully qualified
   * subsystem name). The actual file is then in the package with the subsystem 
   * name concatenated to the locale name followed by the .properties extension.
   * For example, the subsystem locusdetail in the org.tair.db 
   * package has the property file org.tair.db.locusdetail_en_US.properties
   * for the default locale english (US).
   */
  private static final String PROPERTY_FILE = "org.tair.db.locusdetail";
    
  /** Resource bundle for subsystem property file */
  private static final java.util.ResourceBundle rb =
    java.util.ResourceBundle.getBundle(PROPERTY_FILE);

  /** Initialize the subsystem name from the property file. */
  private static final String subsystem = rb.getString("subsystem");
  
  /** Initialize the distributed( memcached)  DAO manager for the subsystem. */
  protected static final com.poesys.db.dao.IDaoManager manager = 
    com.poesys.db.dao.DaoManagerFactory.initMemcachedManager(subsystem);
    
  /**
   * Get the LocusDetailDelegate. The file Locusdetail.properties supplies the
   * database subsystem for the delegate to use. The method enables caching and
   * constructs the Delegate with the subsystem from the property file. The
   * database and password are set from the database properties file entries
   * for the subsystem.
   * 
   * @return the delegate
   */
  public static LocusDetailDelegate getLocusDetailDelegate() {
    return new LocusDetailDelegate(subsystem);
  }
  
  /**
   * Get the LocusDetailDelegate. The file Locusdetail.properties supplies the
   * database subsystem for the delegate to use. The method enables caching and
   * constructs the Delegate with the subsystem from the property file. The
   * system uses the JNDI name to determine the data source.
   * 
   * @return the delegate
   */
  public static LocusDetailDelegate getJndiLocusDetailDelegate() {
    return new LocusDetailDelegate(subsystem, 
                                   com.poesys.db.connection.IConnectionFactory.DBMS.JNDI);
  }
  /**
   * Get the AnnotationDelegate. The file Locusdetail.properties supplies the
   * database subsystem for the delegate to use. The method enables caching and
   * constructs the Delegate with the subsystem from the property file. The
   * database and password are set from the database properties file entries
   * for the subsystem.
   * 
   * @return the delegate
   */
  public static AnnotationDelegate getAnnotationDelegate() {
    return new AnnotationDelegate(subsystem);
  }
  
  /**
   * Get the AnnotationDelegate. The file Locusdetail.properties supplies the
   * database subsystem for the delegate to use. The method enables caching and
   * constructs the Delegate with the subsystem from the property file. The
   * system uses the JNDI name to determine the data source.
   * 
   * @return the delegate
   */
  public static AnnotationDelegate getJndiAnnotationDelegate() {
    return new AnnotationDelegate(subsystem, 
                                   com.poesys.db.connection.IConnectionFactory.DBMS.JNDI);
  }
  /**
   * Get the ConferenceAbstractDelegate. The file Locusdetail.properties supplies the
   * database subsystem for the delegate to use. The method enables caching and
   * constructs the Delegate with the subsystem from the property file. The
   * database and password are set from the database properties file entries
   * for the subsystem.
   * 
   * @return the delegate
   */
  public static ConferenceAbstractDelegate getConferenceAbstractDelegate() {
    return new ConferenceAbstractDelegate(subsystem);
  }
  
  /**
   * Get the ConferenceAbstractDelegate. The file Locusdetail.properties supplies the
   * database subsystem for the delegate to use. The method enables caching and
   * constructs the Delegate with the subsystem from the property file. The
   * system uses the JNDI name to determine the data source.
   * 
   * @return the delegate
   */
  public static ConferenceAbstractDelegate getJndiConferenceAbstractDelegate() {
    return new ConferenceAbstractDelegate(subsystem, 
                                   com.poesys.db.connection.IConnectionFactory.DBMS.JNDI);
  }
  /**
   * Get the LocusInducedPolymorphismDelegate. The file Locusdetail.properties supplies the
   * database subsystem for the delegate to use. The method enables caching and
   * constructs the Delegate with the subsystem from the property file. The
   * database and password are set from the database properties file entries
   * for the subsystem.
   * 
   * @return the delegate
   */
  public static LocusInducedPolymorphismDelegate getLocusInducedPolymorphismDelegate() {
    return new LocusInducedPolymorphismDelegate(subsystem);
  }
  
  /**
   * Get the LocusInducedPolymorphismDelegate. The file Locusdetail.properties supplies the
   * database subsystem for the delegate to use. The method enables caching and
   * constructs the Delegate with the subsystem from the property file. The
   * system uses the JNDI name to determine the data source.
   * 
   * @return the delegate
   */
  public static LocusInducedPolymorphismDelegate getJndiLocusInducedPolymorphismDelegate() {
    return new LocusInducedPolymorphismDelegate(subsystem, 
                                   com.poesys.db.connection.IConnectionFactory.DBMS.JNDI);
  }
  /**
   * Get the DomainDelegate. The file Locusdetail.properties supplies the
   * database subsystem for the delegate to use. The method enables caching and
   * constructs the Delegate with the subsystem from the property file. The
   * database and password are set from the database properties file entries
   * for the subsystem.
   * 
   * @return the delegate
   */
  public static DomainDelegate getDomainDelegate() {
    return new DomainDelegate(subsystem);
  }
  
  /**
   * Get the DomainDelegate. The file Locusdetail.properties supplies the
   * database subsystem for the delegate to use. The method enables caching and
   * constructs the Delegate with the subsystem from the property file. The
   * system uses the JNDI name to determine the data source.
   * 
   * @return the delegate
   */
  public static DomainDelegate getJndiDomainDelegate() {
    return new DomainDelegate(subsystem, 
                                   com.poesys.db.connection.IConnectionFactory.DBMS.JNDI);
  }
  /**
   * Get the JournalArticleDelegate. The file Locusdetail.properties supplies the
   * database subsystem for the delegate to use. The method enables caching and
   * constructs the Delegate with the subsystem from the property file. The
   * database and password are set from the database properties file entries
   * for the subsystem.
   * 
   * @return the delegate
   */
  public static JournalArticleDelegate getJournalArticleDelegate() {
    return new JournalArticleDelegate(subsystem);
  }
  
  /**
   * Get the JournalArticleDelegate. The file Locusdetail.properties supplies the
   * database subsystem for the delegate to use. The method enables caching and
   * constructs the Delegate with the subsystem from the property file. The
   * system uses the JNDI name to determine the data source.
   * 
   * @return the delegate
   */
  public static JournalArticleDelegate getJndiJournalArticleDelegate() {
    return new JournalArticleDelegate(subsystem, 
                                   com.poesys.db.connection.IConnectionFactory.DBMS.JNDI);
  }
  /**
   * Get the LocusNaturalVariationDelegate. The file Locusdetail.properties supplies the
   * database subsystem for the delegate to use. The method enables caching and
   * constructs the Delegate with the subsystem from the property file. The
   * database and password are set from the database properties file entries
   * for the subsystem.
   * 
   * @return the delegate
   */
  public static LocusNaturalVariationDelegate getLocusNaturalVariationDelegate() {
    return new LocusNaturalVariationDelegate(subsystem);
  }
  
  /**
   * Get the LocusNaturalVariationDelegate. The file Locusdetail.properties supplies the
   * database subsystem for the delegate to use. The method enables caching and
   * constructs the Delegate with the subsystem from the property file. The
   * system uses the JNDI name to determine the data source.
   * 
   * @return the delegate
   */
  public static LocusNaturalVariationDelegate getJndiLocusNaturalVariationDelegate() {
    return new LocusNaturalVariationDelegate(subsystem, 
                                   com.poesys.db.connection.IConnectionFactory.DBMS.JNDI);
  }
}