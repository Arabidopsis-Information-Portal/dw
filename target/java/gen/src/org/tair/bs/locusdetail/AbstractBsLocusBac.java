/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractBsDto.vsl


package org.tair.bs.locusdetail;


import com.poesys.bs.delegate.DelegateException;
import com.poesys.bs.dto.IDto;
import com.poesys.db.dto.DtoStatusException;
import com.poesys.db.pk.IPrimaryKey;
import com.poesys.bs.dto.AbstractDto;


import org.tair.db.locusdetail.ILocusBac;
import org.tair.db.locusdetail.LocusBacProxy;
import org.tair.db.locusdetail.LocusBac;


/**
 * <p>
 * A business layer data-transfer object (DTO) for the LocusBac. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * A bacterially activated chromosome on which a locus appears; an artificially
 * created chromosome in which biologists clone medium-sized segments of foreign
 * DNA into bacteria, enabling amplification or the making of many copies of the
 * DNA. Note that if the length or start or end is null (not available), this might
 * not be the correct BAC for the gene model.
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>CompositeKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: false
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractBsLocusBac 
    extends AbstractDto<org.tair.db.locusdetail.ILocusBac> {

  /**
   * Create a BsLocusBac object from a LocusBac object.
   * 
   * @param dto the data-access layer LocusBac DTO
   * @throws DelegateException when there is a problem creating the LocusBac
   */
  public AbstractBsLocusBac(ILocusBac dto) throws DelegateException {
    super(dto);
  }

  /**
   * Create a LocusBac from new data.
   *
   * @param key the primary key of the LocusBac
   * @param locusTairObjectId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param bacTairObjectId the unique TAIR object identifier for the BAC (assembly unit)
   * @param name the BAC name; usually the same as the clone name
   * @param icAccession the unique identifier at any of the major international genomics data centers
for the BAC sequence
   * @param length the length of the BAC sequence, unit is bp (base pairs)
   * @param start the starting position on the chromosome in unit bp (base pairs)
   * @param end the ending position on the chromosome in unit bp (base pairs)
   * @param cloneTairObjectId the TAIR object identifier for the clone of the BAC; used to connect to the TAIR
clone
   */
  public AbstractBsLocusBac(IPrimaryKey key, java.lang.Long locusTairObjectId, java.lang.Long bacTairObjectId, java.lang.String name, java.lang.String icAccession, java.lang.Long length, java.lang.Long start, java.lang.Long end, java.lang.Long cloneTairObjectId) {
    super(new LocusBacProxy(new LocusBac(key, locusTairObjectId, bacTairObjectId, name, icAccession, length, start, end, cloneTairObjectId)));
  }

  @SuppressWarnings("unchecked")
  @Override
  public boolean equals(Object arg0) {
    // Unchecked cast here
    IDto<ILocusBac> other = (IDto<ILocusBac>)arg0;
    return dto.equals(other.toDto());
  }

  @Override
  public int hashCode() {
    return dto.hashCode();
  }

  public int compareTo(IDto<ILocusBac> o) {
    return dto.compareTo(o.toDto());
  }

  public void markChildrenDeleted() throws DtoStatusException {
    dto.markChildrenDeleted();
  }
  
  public IPrimaryKey getPrimaryKey() {
    return dto.getPrimaryKey();
  }

  // Data member properties

  /**
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties + AddParentKeyAttributes as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusBac</li>
   * </ul>
   * </p>
   * @return a java.lang.Long locusTairObjectId
   */
  public java.lang.Long getLocusTairObjectId() {
    return dto.getLocusTairObjectId();
  }

  /**
   * <p>
   * the unique TAIR object identifier for the BAC (assembly unit)
   * </p>
   * <p>
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusBac</li>
   * </ul>
   * </p>
   * @return a java.lang.Long bacTairObjectId
   */
  public java.lang.Long getBacTairObjectId() {
    return dto.getBacTairObjectId();
  }

  /**
   * <p>
   * the BAC name; usually the same as the clone name
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusBac</li>
   * </ul>
   * </p>
   * @return a java.lang.String name
   */
  public java.lang.String getName() {
    return dto.getName();
  }

  /**
   * <p>
   * the unique identifier at any of the major international genomics data centers
   * for the BAC sequence
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusBac</li>
   * </ul>
   * </p>
   * @return a java.lang.String icAccession
   */
  public java.lang.String getIcAccession() {
    return dto.getIcAccession();
  }

  /**
   * <p>
   * the length of the BAC sequence, unit is bp (base pairs)
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusBac</li>
   * </ul>
   * </p>
   * @return a java.lang.Long length
   */
  public java.lang.Long getLength() {
    return dto.getLength();
  }

  /**
   * <p>
   * the starting position on the chromosome in unit bp (base pairs)
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusBac</li>
   * </ul>
   * </p>
   * @return a java.lang.Long start
   */
  public java.lang.Long getStart() {
    return dto.getStart();
  }

  /**
   * <p>
   * the ending position on the chromosome in unit bp (base pairs)
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusBac</li>
   * </ul>
   * </p>
   * @return a java.lang.Long end
   */
  public java.lang.Long getEnd() {
    return dto.getEnd();
  }

  /**
   * <p>
   * the TAIR object identifier for the clone of the BAC; used to connect to the TAIR
   * clone
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusBac</li>
   * </ul>
   * </p>
   * @return a java.lang.Long cloneTairObjectId
   */
  public java.lang.Long getCloneTairObjectId() {
    return dto.getCloneTairObjectId();
  }

  /**
   * 
   * <p>
   * Added by AddToOneAssociationRequiredObjectProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusBac</li>
   * </ul>
   * </p>
   * @return a org.tair.bs.locusdetail.BsLocusDetail locus
   */
  public org.tair.bs.locusdetail.BsLocusDetail getLocus() {
    // Return 4
    return new org.tair.bs.locusdetail.BsLocusDetail(dto.getLocus());
  }
}