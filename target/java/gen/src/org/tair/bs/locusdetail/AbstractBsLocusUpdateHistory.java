/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractBsDto.vsl


package org.tair.bs.locusdetail;


import com.poesys.bs.delegate.DelegateException;
import com.poesys.bs.dto.IDto;
import com.poesys.db.dto.DtoStatusException;
import com.poesys.db.pk.IPrimaryKey;
import com.poesys.bs.dto.AbstractDto;


import org.tair.db.locusdetail.ILocusUpdateHistory;
import org.tair.db.locusdetail.LocusUpdateHistoryProxy;
import org.tair.db.locusdetail.LocusUpdateHistory;


/**
 * <p>
 * A business layer data-transfer object (DTO) for the LocusUpdateHistory. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * The update history records that show the history of the parent locus
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>CompositeKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: false
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractBsLocusUpdateHistory 
    extends AbstractDto<org.tair.db.locusdetail.ILocusUpdateHistory> {

  /**
   * Create a BsLocusUpdateHistory object from a LocusUpdateHistory object.
   * 
   * @param dto the data-access layer LocusUpdateHistory DTO
   * @throws DelegateException when there is a problem creating the LocusUpdateHistory
   */
  public AbstractBsLocusUpdateHistory(ILocusUpdateHistory dto) throws DelegateException {
    super(dto);
  }

  /**
   * Create a LocusUpdateHistory from new data.
   *
   * @param key the primary key of the LocusUpdateHistory
   * @param locusTairObjectId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param updateType the type of update involved (obsoleted, added, replaces, split and added,
obsolete and replaced by, updated, replaced, restored, or blank)
   * @param updateDate the date and time of the update
   * @param affectedTairObjectId the TAIR object id for the object affected by the update of the locus
   * @param affectedTairObjectType the kind of TAIR object affected by the update of the locus
   * @param affectedTairObjectName the name of the TAIR object affected by the update of the locus; corresponds to
the name of the object identified by the affected TAIR object id
   */
  public AbstractBsLocusUpdateHistory(IPrimaryKey key, java.lang.Long locusTairObjectId, java.lang.String updateType, java.sql.Timestamp updateDate, java.lang.Long affectedTairObjectId, java.lang.String affectedTairObjectType, java.lang.String affectedTairObjectName) {
    super(new LocusUpdateHistoryProxy(new LocusUpdateHistory(key, locusTairObjectId, updateType, updateDate, affectedTairObjectId, affectedTairObjectType, affectedTairObjectName)));
  }

  @SuppressWarnings("unchecked")
  @Override
  public boolean equals(Object arg0) {
    // Unchecked cast here
    IDto<ILocusUpdateHistory> other = (IDto<ILocusUpdateHistory>)arg0;
    return dto.equals(other.toDto());
  }

  @Override
  public int hashCode() {
    return dto.hashCode();
  }

  public int compareTo(IDto<ILocusUpdateHistory> o) {
    return dto.compareTo(o.toDto());
  }

  public void markChildrenDeleted() throws DtoStatusException {
    dto.markChildrenDeleted();
  }
  
  public IPrimaryKey getPrimaryKey() {
    return dto.getPrimaryKey();
  }

  // Data member properties

  /**
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties + AddParentKeyAttributes as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusUpdateHistory</li>
   * </ul>
   * </p>
   * @return a java.lang.Long locusTairObjectId
   */
  public java.lang.Long getLocusTairObjectId() {
    return dto.getLocusTairObjectId();
  }

  /**
   * <p>
   * the type of update involved (obsoleted, added, replaces, split and added,
   * obsolete and replaced by, updated, replaced, restored, or blank)
   * </p>
   * <p>
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusUpdateHistory</li>
   * </ul>
   * </p>
   * @return a java.lang.String updateType
   */
  public java.lang.String getUpdateType() {
    return dto.getUpdateType();
  }

  /**
   * <p>
   * the date and time of the update
   * </p>
   * <p>
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusUpdateHistory</li>
   * </ul>
   * </p>
   * @return a java.sql.Timestamp updateDate
   */
  public java.sql.Timestamp getUpdateDate() {
    return dto.getUpdateDate();
  }

  /**
   * <p>
   * the TAIR object id for the object affected by the update of the locus
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusUpdateHistory</li>
   * </ul>
   * </p>
   * @return a java.lang.Long affectedTairObjectId
   */
  public java.lang.Long getAffectedTairObjectId() {
    return dto.getAffectedTairObjectId();
  }

  /**
   * <p>
   * the kind of TAIR object affected by the update of the locus
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusUpdateHistory</li>
   * </ul>
   * </p>
   * @return a java.lang.String affectedTairObjectType
   */
  public java.lang.String getAffectedTairObjectType() {
    return dto.getAffectedTairObjectType();
  }

  /**
   * <p>
   * the name of the TAIR object affected by the update of the locus; corresponds to
   * the name of the object identified by the affected TAIR object id
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusUpdateHistory</li>
   * </ul>
   * </p>
   * @return a java.lang.String affectedTairObjectName
   */
  public java.lang.String getAffectedTairObjectName() {
    return dto.getAffectedTairObjectName();
  }

  /**
   * <p>
   * the locus to which the update history applies
   * </p>
   * <p>
   * Added by AddToOneAssociationRequiredObjectProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusUpdateHistory</li>
   * </ul>
   * </p>
   * @return a org.tair.bs.locusdetail.BsLocusDetail locus
   */
  public org.tair.bs.locusdetail.BsLocusDetail getLocus() {
    // Return 4
    return new org.tair.bs.locusdetail.BsLocusDetail(dto.getLocus());
  }
}