/**
 * Copyright 2011 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractBsDto.vsl


package org.tair.bs.locusdetail;


import com.poesys.bs.delegate.DelegateException;
import com.poesys.bs.dto.IDto;
import com.poesys.db.dto.DtoStatusException;
import com.poesys.db.pk.IPrimaryKey;
import com.poesys.bs.dto.AbstractDto;


import org.tair.db.locusdetail.IVariant;
import org.tair.db.locusdetail.VariantProxy;
import org.tair.db.locusdetail.Variant;


/**
 * <p>
 * A business layer data-transfer object (DTO) for the Variant. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * an ecotype that is a natural species variant of the reference ecotype
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>CompositeKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: false
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractBsVariant 
    extends AbstractDto<org.tair.db.locusdetail.IVariant> {

  /**
   * Create a BsVariant object from a Variant object.
   * 
   * @param dto the data-access layer Variant DTO
   * @throws DelegateException when there is a problem creating the Variant
   */
  public AbstractBsVariant(IVariant dto) throws DelegateException {
    super(dto);
  }

  /**
   * Create a Variant from new data.
   *
   * @param key the primary key of the Variant
   * @param locusTairObjectId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param polymorphismName composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param ecotype the name of the variant ecotype or species variant
   */
  public AbstractBsVariant(IPrimaryKey key, java.lang.Long locusTairObjectId, java.lang.String polymorphismName, java.lang.String ecotype) {
    super(new VariantProxy(new Variant(key, locusTairObjectId, polymorphismName, ecotype)));
  }

  @SuppressWarnings("unchecked")
  @Override
  public boolean equals(Object arg0) {
    // Unchecked cast here
    IDto<IVariant> other = (IDto<IVariant>)arg0;
    return dto.equals(other.toDto());
  }

  @Override
  public int hashCode() {
    return dto.hashCode();
  }

  public int compareTo(IDto<IVariant> o) {
    return dto.compareTo(o.toDto());
  }

  public void markChildrenDeleted() throws DtoStatusException {
    dto.markChildrenDeleted();
  }
  
  public IPrimaryKey getPrimaryKey() {
    return dto.getPrimaryKey();
  }

  // Data member properties

  /**
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties + AddParentKeyAttributes + AddInheritedKeyProperties + AddParentKeyAttributes as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object Variant</li>
   * </ul>
   * </p>
   * @return a java.lang.Long locusTairObjectId
   */
  public java.lang.Long getLocusTairObjectId() {
    return dto.getLocusTairObjectId();
  }

  /**
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   * <p>
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddInheritedKeyProperties + AddParentKeyAttributes as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object Variant</li>
   * </ul>
   * </p>
   * @return a java.lang.String polymorphismName
   */
  public java.lang.String getPolymorphismName() {
    return dto.getPolymorphismName();
  }

  /**
   * <p>
   * the name of the variant ecotype or species variant
   * </p>
   * <p>
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object Variant</li>
   * </ul>
   * </p>
   * @return a java.lang.String ecotype
   */
  public java.lang.String getEcotype() {
    return dto.getEcotype();
  }

  /**
   * <p>
   * the polymorphism for which this ecotype acts as a natural variant
   * </p>
   * <p>
   * Added by AddToOneAssociationRequiredObjectProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object Variant</li>
   * </ul>
   * </p>
   * @return a org.tair.bs.locusdetail.BsLocusNaturalVariation polymorphism
   */
  public org.tair.bs.locusdetail.BsLocusNaturalVariation getPolymorphism() {
    // Return 4
    return new org.tair.bs.locusdetail.BsLocusNaturalVariation(dto.getPolymorphism());
  }
}