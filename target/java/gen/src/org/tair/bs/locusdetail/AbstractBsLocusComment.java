/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractBsDto.vsl


package org.tair.bs.locusdetail;


import com.poesys.bs.delegate.DelegateException;
import com.poesys.bs.dto.IDto;
import com.poesys.db.dto.DtoStatusException;
import com.poesys.db.pk.IPrimaryKey;
import com.poesys.bs.dto.AbstractDto;


import org.tair.db.locusdetail.ILocusComment;
import org.tair.db.locusdetail.LocusCommentProxy;
import org.tair.db.locusdetail.LocusComment;


/**
 * <p>
 * A business layer data-transfer object (DTO) for the LocusComment. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * A comment on the locus entered by a community member
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>CompositeKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: false
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractBsLocusComment 
    extends AbstractDto<org.tair.db.locusdetail.ILocusComment> {

  /**
   * Create a BsLocusComment object from a LocusComment object.
   * 
   * @param dto the data-access layer LocusComment DTO
   * @throws DelegateException when there is a problem creating the LocusComment
   */
  public AbstractBsLocusComment(ILocusComment dto) throws DelegateException {
    super(dto);
  }

  /**
   * Create a LocusComment from new data.
   *
   * @param key the primary key of the LocusComment
   * @param locusTairObjectId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param locusCommentNo composite subkey attribute that uniquely identifies child combined with parent key
   * @param name the name of the TAIR community member
   * @param communityId the TAIR community id for the person making the comment (used in links)
   * @param commentText the text of the comment entered by the community member truncated to 100
characters
   * @param dateEntered the date on which the community member entered the comment
   */
  public AbstractBsLocusComment(IPrimaryKey key, java.lang.Long locusTairObjectId, java.math.BigInteger locusCommentNo, java.lang.String name, java.lang.Long communityId, java.lang.String commentText, java.sql.Timestamp dateEntered) {
    super(new LocusCommentProxy(new LocusComment(key, locusTairObjectId, locusCommentNo, name, communityId, commentText, dateEntered)));
  }

  @SuppressWarnings("unchecked")
  @Override
  public boolean equals(Object arg0) {
    // Unchecked cast here
    IDto<ILocusComment> other = (IDto<ILocusComment>)arg0;
    return dto.equals(other.toDto());
  }

  @Override
  public int hashCode() {
    return dto.hashCode();
  }

  public int compareTo(IDto<ILocusComment> o) {
    return dto.compareTo(o.toDto());
  }

  public void markChildrenDeleted() throws DtoStatusException {
    dto.markChildrenDeleted();
  }
  
  public IPrimaryKey getPrimaryKey() {
    return dto.getPrimaryKey();
  }

  // Data member properties

  /**
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties + AddParentKeyAttributes as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusComment</li>
   * </ul>
   * </p>
   * @return a java.lang.Long locusTairObjectId
   */
  public java.lang.Long getLocusTairObjectId() {
    return dto.getLocusTairObjectId();
  }

  /**
   * <p>
   * Composite subkey attribute that uniquely identifies child combined with parent key
   * </p>
   * <p>
   * Added by AddOrderedSubKeyProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object LocusComment</li>
   * </ul>
   * </p>
   * @return a java.math.BigInteger locusCommentNo
   */
  public java.math.BigInteger getLocusCommentNo() {
    return dto.getLocusCommentNo();
  }

  /**
   * <p>
   * the name of the TAIR community member
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusComment</li>
   * </ul>
   * </p>
   * @return a java.lang.String name
   */
  public java.lang.String getName() {
    return dto.getName();
  }

  /**
   * <p>
   * the TAIR community id for the person making the comment (used in links)
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusComment</li>
   * </ul>
   * </p>
   * @return a java.lang.Long communityId
   */
  public java.lang.Long getCommunityId() {
    return dto.getCommunityId();
  }

  /**
   * <p>
   * the text of the comment entered by the community member truncated to 100
   * characters
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusComment</li>
   * </ul>
   * </p>
   * @return a java.lang.String commentText
   */
  public java.lang.String getCommentText() {
    return dto.getCommentText();
  }

  /**
   * <p>
   * the date on which the community member entered the comment
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusComment</li>
   * </ul>
   * </p>
   * @return a java.sql.Timestamp dateEntered
   */
  public java.sql.Timestamp getDateEntered() {
    return dto.getDateEntered();
  }

  /**
   * <p>
   * the locus to which the comment refers
   * </p>
   * <p>
   * Added by AddToOneAssociationRequiredObjectProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusComment</li>
   * </ul>
   * </p>
   * @return a org.tair.bs.locusdetail.BsLocusDetail locus
   */
  public org.tair.bs.locusdetail.BsLocusDetail getLocus() {
    // Return 4
    return new org.tair.bs.locusdetail.BsLocusDetail(dto.getLocus());
  }
}