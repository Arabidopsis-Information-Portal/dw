/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDelegate.vsl

package org.tair.bs.locusdetail;


import com.poesys.bs.delegate.AbstractReadOnlyDataDelegate;
import com.poesys.bs.delegate.DelegateException;
import com.poesys.db.connection.IConnectionFactory.DBMS;
import com.poesys.db.dao.query.IKeyQuerySql;
import com.poesys.db.dao.query.IQuerySql;


/**
 * <p>
 * A business delegate that provides an application programming interface for
 * Domain objects and their dependents. You should not modify this class;
 * instead, override or add methods in the class DomainDelegate, which
 * specializes this class.
 * </p>
 * <p>
 * A named protein domain
 * </p>
 * @see DomainDelegate
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractDomainDelegate
    extends AbstractReadOnlyDataDelegate<BsDomain, org.tair.db.locusdetail.IDomain, com.poesys.db.pk.NaturalPrimaryKey> {
  /**
   * Create an AbstractDomainDelegate object by supplying the database
   * subsystem in the database.properties file.
   * 
   * @param subsystem the database subsystem to use in database.properties
   */
  public AbstractDomainDelegate(String subsystem) {
    super(subsystem, 2147483647);
  }

  /**
   * Create an AbstractDomainDelegate object by supplying the database
   * subsystem in the database.properties file and a specific DBMS, usually
   * IConnectionFactory.DBMS.JNDI.
   * 
   * @param subsystem the database subsystem to use in database.properties
   * @param dbms the DBMS to use (usually IConnectionFactory.DBMS.JNDI)
   */
  public AbstractDomainDelegate(String subsystem, DBMS dbms) {
    super(subsystem, dbms, 2147483647);
  }

  @Override
  protected String getClassName() {
    return org.tair.db.locusdetail.Domain.class.getName();
  }

  @Override
  protected IKeyQuerySql<org.tair.db.locusdetail.IDomain> getQueryByKeySql() {
    return new org.tair.db.locusdetail.sql.QueryDomain();
  }

  @Override
  protected IQuerySql<org.tair.db.locusdetail.IDomain> getQueryListSql() {
    // Query-All method not required
    return new org.tair.db.locusdetail.sql.QueryAllDomain();
  }

  @Override
  protected org.tair.bs.locusdetail.BsDomain wrapData(org.tair.db.locusdetail.IDomain dto) {
    return new org.tair.bs.locusdetail.BsDomain(dto);
  }

  /**
   * <p>
   * Create a new Domain with data fields.
   * </p>
   * <p>
   * The Domain class has a natural key; this method creates the primary
   * key from the appropriate input properties.
   * </p>
   * 
   * @param accession a unique identifier for the protein domain, usually InterPro
   * @param accessionUrl a URL that links to a site containing information about the id
   * @param domain the name of the protein domain
   * @param domainUrl a URL that links to a page displaying information about the named domain
   * @param database the database that contains the domain
   * @param databaseUrl the URL that links to the external database that contains the domain
   * @param structuralClassType the structural class of the domain
   * @param classUrl a URL link to a page displaying information about the structural class type of
the protein domain
   * @return the new Domain object
   * @throws DelegateException when there is a problem generating the key or
   *             creating the object
   */
  public org.tair.bs.locusdetail.BsDomain createDomain(java.lang.String accession, java.lang.String accessionUrl, java.lang.String domain, java.lang.String domainUrl, java.lang.String database, java.lang.String databaseUrl, java.lang.String structuralClassType, java.lang.String classUrl)
      throws DelegateException {
    com.poesys.db.pk.NaturalPrimaryKey key = null;
    try {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.StringColumnValue("accession", accession));
      key = 
        com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.tair.db.locusdetail.Domain");
    } catch (com.poesys.db.InvalidParametersException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    } catch (com.poesys.db.DuplicateKeyNameException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    }

    // Create a data-access DTO proxy (supports lazy loading).
    org.tair.db.locusdetail.IDomain dto =
      new org.tair.db.locusdetail.DomainProxy(new org.tair.db.locusdetail.Domain(key, accession, accessionUrl, domain, domainUrl, database, databaseUrl, structuralClassType, classUrl));

    // Create the business DTO.
    return new org.tair.bs.locusdetail.BsDomain(dto);
  }

  /**
   * Create a new ProteinModelDomain association class child of Domain with 
   * an association key. This class links the input objects.
   * 
   * @param domainsObject associated Domain object (part of the key)
   * @param modelsObject associated ProteinModel object (part of the key)
   * @param accession Attribute that is part of the association key
   * @param geneModelName Attribute that is part of the association key
   * @param locusTairObjectId Attribute that is part of the association key
   * @param sequenceTairObjectId Attribute that is part of the association key
   * @param start the starting position of the domain instance within the protein model; also part
of the primary key, so a protein may have multiple instances of a given domain
as long as the instances have a different start position
   * @param end the ending position of the domain instance within the protein model
   * @return a new ProteinModelDomain business layer DTO
   * @throws DelegateException when a parameter causes a problem
   */
  public org.tair.bs.locusdetail.BsProteinModelDomain createProteinModelDomain(org.tair.bs.locusdetail.BsDomain domainsObject, org.tair.bs.locusdetail.BsProteinModel modelsObject, java.lang.String accession, java.lang.String geneModelName, java.lang.Long locusTairObjectId, java.lang.Long sequenceTairObjectId, java.lang.Integer start, java.lang.Integer end) throws DelegateException {
    // Create the key.
    com.poesys.db.pk.AssociationPrimaryKey key = null;
    try {
      java.util.ArrayList<com.poesys.db.pk.IPrimaryKey> list =
        new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
      list.add(domainsObject.getPrimaryKey());
      list.add(modelsObject.getPrimaryKey());
      key = 
        com.poesys.db.pk.PrimaryKeyFactory.createAssociationKey(list, "org.tair.db.locusdetail.ProteinModelDomain");
    } catch (com.poesys.db.InvalidParametersException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    } catch (com.poesys.db.DuplicateKeyNameException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    }

    // Create an association-key child data-access ProteinModelDomain DTO for direct access, no proxy required.
    org.tair.db.locusdetail.IProteinModelDomain dto =
      new org.tair.db.locusdetail.ProteinModelDomain(key, domainsObject.toDto(), modelsObject.toDto(), accession, geneModelName, locusTairObjectId, sequenceTairObjectId, start, end);

    // Create the business DTO.
    return new org.tair.bs.locusdetail.BsProteinModelDomain(dto);
  }
}
