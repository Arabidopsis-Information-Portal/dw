/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDelegate.vsl

package org.tair.bs.locusdetail;


import com.poesys.bs.delegate.AbstractReadOnlyDataDelegate;
import com.poesys.bs.delegate.DelegateException;
import com.poesys.db.connection.IConnectionFactory.DBMS;
import com.poesys.db.dao.query.IKeyQuerySql;
import com.poesys.db.dao.query.IQuerySql;


/**
 * <p>
 * A business delegate that provides an application programming interface for
 * Annotation objects and their dependents. You should not modify this class;
 * instead, override or add methods in the class AnnotationDelegate, which
 * specializes this class.
 * </p>
 * <p>
 * A unique combination of category, relationship type, keyword, evidence code,
 * evidence description, evidence-with, and reference that constitutes a functional
 * annotation of a genomic object such as a locus or gene model
 * </p>
 * @see AnnotationDelegate
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractAnnotationDelegate
    extends AbstractReadOnlyDataDelegate<BsAnnotation, org.tair.db.locusdetail.IAnnotation, com.poesys.db.pk.NaturalPrimaryKey> {
  /**
   * Create an AbstractAnnotationDelegate object by supplying the database
   * subsystem in the database.properties file.
   * 
   * @param subsystem the database subsystem to use in database.properties
   */
  public AbstractAnnotationDelegate(String subsystem) {
    super(subsystem, 2147483647);
  }

  /**
   * Create an AbstractAnnotationDelegate object by supplying the database
   * subsystem in the database.properties file and a specific DBMS, usually
   * IConnectionFactory.DBMS.JNDI.
   * 
   * @param subsystem the database subsystem to use in database.properties
   * @param dbms the DBMS to use (usually IConnectionFactory.DBMS.JNDI)
   */
  public AbstractAnnotationDelegate(String subsystem, DBMS dbms) {
    super(subsystem, dbms, 2147483647);
  }

  @Override
  protected String getClassName() {
    return org.tair.db.locusdetail.Annotation.class.getName();
  }

  @Override
  protected IKeyQuerySql<org.tair.db.locusdetail.IAnnotation> getQueryByKeySql() {
    return new org.tair.db.locusdetail.sql.QueryAnnotation();
  }

  @Override
  protected IQuerySql<org.tair.db.locusdetail.IAnnotation> getQueryListSql() {
    // Query-All method not required
    return new org.tair.db.locusdetail.sql.QueryAllAnnotation();
  }

  @Override
  protected org.tair.bs.locusdetail.BsAnnotation wrapData(org.tair.db.locusdetail.IAnnotation dto) {
    return new org.tair.bs.locusdetail.BsAnnotation(dto);
  }

  /**
   * <p>
   * Create a new Annotation with data fields.
   * </p>
   * <p>
   * The Annotation class has a natural key; this method creates the primary
   * key from the appropriate input properties.
   * </p>
   * 
   * @param category The kind of keyword (GO Biological Process, GO Cellular Component, GO Molecular
Function, Interaction, Expression, Growth and Developmental Stages, Plant
Structure)
   * @param relationshipType The kind of relationship between a locus and a keyword (such as involved in,
located in, functions in, has, not expressed during, or expressed in)
   * @param keyword the keyword associated with the locus (such as nucleus, glucose mediated
signaling pathway, or dry seed stage)
   * @param evidenceCode the standard three-letter code that indicates the kind of evidence association
with the annotation, such as IEA (inferred from electronic annotation) or IDA
(inferred from direct assay).
   * @param evidenceWith information associated with the evidence, such as an affected protein or gene
   * @param reference the reference (publication, communication, etc.) from which the annotation
comes; this is a textual version of the reference used for display
   * @param keywordId the unique identifier for the keyword; used in the URL that links to the keyword
   * @param ontologyId the unique identifier from the ontology for the keyword, such as GO:123456
   * @param evidenceDescription a textual description of the specific evidentiary technique used to provide
evidence for the annotation to the object
   * @param evidenceId unique identifier for the evidence code/description combination ("evidence");
used in the URL that displays the full page for the evidence
   * @param referenceId the unique reference identifier; used in a URL to link to the reference
information
   * @param annotatedBy the community member responsible for the annotation
   * @return the new Annotation object
   * @throws DelegateException when there is a problem generating the key or
   *             creating the object
   */
  public org.tair.bs.locusdetail.BsAnnotation createAnnotation(java.lang.String category, java.lang.String relationshipType, java.lang.String keyword, java.lang.String evidenceCode, java.lang.String evidenceWith, java.lang.String reference, java.lang.Long keywordId, java.lang.String ontologyId, java.lang.String evidenceDescription, java.lang.Long evidenceId, java.lang.Long referenceId, java.lang.String annotatedBy)
      throws DelegateException {
    com.poesys.db.pk.NaturalPrimaryKey key = null;
    try {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.StringColumnValue("category", category));
      list.add(new com.poesys.db.col.StringColumnValue("evidenceCode", evidenceCode));
      list.add(new com.poesys.db.col.StringColumnValue("evidenceWith", evidenceWith));
      list.add(new com.poesys.db.col.StringColumnValue("keyword", keyword));
      list.add(new com.poesys.db.col.StringColumnValue("reference", reference));
      list.add(new com.poesys.db.col.StringColumnValue("relationshipType", relationshipType));
      key = 
        com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.tair.db.locusdetail.Annotation");
    } catch (com.poesys.db.InvalidParametersException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    } catch (com.poesys.db.DuplicateKeyNameException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    }

    // Create a data-access DTO proxy (supports lazy loading).
    org.tair.db.locusdetail.IAnnotation dto =
      new org.tair.db.locusdetail.AnnotationProxy(new org.tair.db.locusdetail.Annotation(key, category, relationshipType, keyword, evidenceCode, evidenceWith, reference, keywordId, ontologyId, evidenceDescription, evidenceId, referenceId, annotatedBy));

    // Create the business DTO.
    return new org.tair.bs.locusdetail.BsAnnotation(dto);
  }

  /**
   * Create a new LocusGeneModelAnnotation association class child of Annotation with 
   * an association key. This class links the input objects.
   * 
   * @param annotationsObject associated Annotation object (part of the key)
   * @param geneModelsObject associated LocusGeneModel object (part of the key)
   * @param category Attribute that is part of the association key
   * @param evidenceCode Attribute that is part of the association key
   * @param evidenceWith Attribute that is part of the association key
   * @param geneModelName Attribute that is part of the association key
   * @param keyword Attribute that is part of the association key
   * @param locusTairObjectId Attribute that is part of the association key
   * @param reference Attribute that is part of the association key
   * @param relationshipType Attribute that is part of the association key
   * @return a new LocusGeneModelAnnotation business layer DTO
   * @throws DelegateException when a parameter causes a problem
   */
  public org.tair.bs.locusdetail.BsLocusGeneModelAnnotation createLocusGeneModelAnnotation(org.tair.bs.locusdetail.BsAnnotation annotationsObject, org.tair.bs.locusdetail.BsLocusGeneModel geneModelsObject, java.lang.String category, java.lang.String evidenceCode, java.lang.String evidenceWith, java.lang.String geneModelName, java.lang.String keyword, java.lang.Long locusTairObjectId, java.lang.String reference, java.lang.String relationshipType) throws DelegateException {
    // Create the key.
    com.poesys.db.pk.AssociationPrimaryKey key = null;
    try {
      java.util.ArrayList<com.poesys.db.pk.IPrimaryKey> list =
        new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
      list.add(annotationsObject.getPrimaryKey());
      list.add(geneModelsObject.getPrimaryKey());
      key = 
        com.poesys.db.pk.PrimaryKeyFactory.createAssociationKey(list, "org.tair.db.locusdetail.LocusGeneModelAnnotation");
    } catch (com.poesys.db.InvalidParametersException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    } catch (com.poesys.db.DuplicateKeyNameException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    }

    // Create an association-key child data-access LocusGeneModelAnnotation DTO for direct access, no proxy required.
    org.tair.db.locusdetail.ILocusGeneModelAnnotation dto =
      new org.tair.db.locusdetail.LocusGeneModelAnnotation(key, annotationsObject.toDto(), geneModelsObject.toDto(), category, evidenceCode, evidenceWith, geneModelName, keyword, locusTairObjectId, reference, relationshipType);

    // Create the business DTO.
    return new org.tair.bs.locusdetail.BsLocusGeneModelAnnotation(dto);
  }
  /**
   * Create a new LocusAnnotation association class child of Annotation with 
   * an association key. This class links the input objects.
   * 
   * @param annotationsObject associated Annotation object (part of the key)
   * @param lociObject associated LocusDetail object (part of the key)
   * @param category Attribute that is part of the association key
   * @param evidenceCode Attribute that is part of the association key
   * @param evidenceWith Attribute that is part of the association key
   * @param keyword Attribute that is part of the association key
   * @param locusTairObjectId Attribute that is part of the association key
   * @param reference Attribute that is part of the association key
   * @param relationshipType Attribute that is part of the association key
   * @return a new LocusAnnotation business layer DTO
   * @throws DelegateException when a parameter causes a problem
   */
  public org.tair.bs.locusdetail.BsLocusAnnotation createLocusAnnotation(org.tair.bs.locusdetail.BsAnnotation annotationsObject, org.tair.bs.locusdetail.BsLocusDetail lociObject, java.lang.String category, java.lang.String evidenceCode, java.lang.String evidenceWith, java.lang.String keyword, java.lang.Long locusTairObjectId, java.lang.String reference, java.lang.String relationshipType) throws DelegateException {
    // Create the key.
    com.poesys.db.pk.AssociationPrimaryKey key = null;
    try {
      java.util.ArrayList<com.poesys.db.pk.IPrimaryKey> list =
        new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
      list.add(annotationsObject.getPrimaryKey());
      list.add(lociObject.getPrimaryKey());
      key = 
        com.poesys.db.pk.PrimaryKeyFactory.createAssociationKey(list, "org.tair.db.locusdetail.LocusAnnotation");
    } catch (com.poesys.db.InvalidParametersException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    } catch (com.poesys.db.DuplicateKeyNameException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    }

    // Create an association-key child data-access LocusAnnotation DTO for direct access, no proxy required.
    org.tair.db.locusdetail.ILocusAnnotation dto =
      new org.tair.db.locusdetail.LocusAnnotation(key, annotationsObject.toDto(), lociObject.toDto(), category, evidenceCode, evidenceWith, keyword, locusTairObjectId, reference, relationshipType);

    // Create the business DTO.
    return new org.tair.bs.locusdetail.BsLocusAnnotation(dto);
  }
}
