/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractBsDto.vsl


package org.tair.bs.locusdetail;


import com.poesys.bs.delegate.DelegateException;
import com.poesys.bs.dto.IDto;
import com.poesys.db.dto.DtoStatusException;
import com.poesys.db.pk.IPrimaryKey;
import com.poesys.bs.dto.AbstractDto;


import org.tair.db.locusdetail.ILocusAnnotation;
import org.tair.db.locusdetail.LocusAnnotationProxy;
import org.tair.db.locusdetail.LocusAnnotation;


/**
 * <p>
 * A business layer data-transfer object (DTO) for the LocusAnnotation. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * The link between a locus and an annotation; one annotation can annotate multiple
 * loci, and one locus may have multiple annotations
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>AssociationKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: false
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractBsLocusAnnotation 
    extends AbstractDto<org.tair.db.locusdetail.ILocusAnnotation> {

  /**
   * Create a BsLocusAnnotation object from a LocusAnnotation object.
   * 
   * @param dto the data-access layer LocusAnnotation DTO
   * @throws DelegateException when there is a problem creating the LocusAnnotation
   */
  public AbstractBsLocusAnnotation(ILocusAnnotation dto) throws DelegateException {
    super(dto);
  }

  /**
   * Create a LocusAnnotation from new data.
   *
   * @param key the primary key of the LocusAnnotation
   * @param annotationsObject associated Annotation object
   * @param lociObject associated LocusDetail object
   * @param category Attribute that is part of the association key
   * @param evidenceCode Attribute that is part of the association key
   * @param evidenceWith Attribute that is part of the association key
   * @param keyword Attribute that is part of the association key
   * @param locusTairObjectId Attribute that is part of the association key
   * @param reference Attribute that is part of the association key
   * @param relationshipType Attribute that is part of the association key
   */
  public AbstractBsLocusAnnotation(IPrimaryKey key, org.tair.db.locusdetail.IAnnotation annotationsObject, org.tair.db.locusdetail.ILocusDetail lociObject, java.lang.String category, java.lang.String evidenceCode, java.lang.String evidenceWith, java.lang.String keyword, java.lang.Long locusTairObjectId, java.lang.String reference, java.lang.String relationshipType) {
    super(new LocusAnnotationProxy(new LocusAnnotation(key, annotationsObject, lociObject, category, evidenceCode, evidenceWith, keyword, locusTairObjectId, reference, relationshipType)));
  }

  @SuppressWarnings("unchecked")
  @Override
  public boolean equals(Object arg0) {
    // Unchecked cast here
    IDto<ILocusAnnotation> other = (IDto<ILocusAnnotation>)arg0;
    return dto.equals(other.toDto());
  }

  @Override
  public int hashCode() {
    return dto.hashCode();
  }

  public int compareTo(IDto<ILocusAnnotation> o) {
    return dto.compareTo(o.toDto());
  }

  public void markChildrenDeleted() throws DtoStatusException {
    dto.markChildrenDeleted();
  }
  
  public IPrimaryKey getPrimaryKey() {
    return dto.getPrimaryKey();
  }

  // Data member properties

  /**
   * <p>
   * Associated object
   * </p>
   * <p>
   * Added by AddAssociationKeyObjectProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusAnnotation</li>
   * </ul>
   * </p>
   * @return a org.tair.bs.locusdetail.BsAnnotation annotation
   */
  public org.tair.bs.locusdetail.BsAnnotation getAnnotation() {
    // Return 4
    return new org.tair.bs.locusdetail.BsAnnotation(dto.getAnnotation());
  }

  /**
   * <p>
   * Associated object
   * </p>
   * <p>
   * Added by AddAssociationKeyObjectProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusAnnotation</li>
   * </ul>
   * </p>
   * @return a org.tair.bs.locusdetail.BsLocusDetail locus
   */
  public org.tair.bs.locusdetail.BsLocusDetail getLocus() {
    // Return 4
    return new org.tair.bs.locusdetail.BsLocusDetail(dto.getLocus());
  }

  /**
   * <p>
   * Attribute that is part of the association key
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties + AddAssociationKeyAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusAnnotation</li>
   * </ul>
   * </p>
   * @return a java.lang.String category
   */
  public java.lang.String getCategory() {
    return dto.getCategory();
  }

  /**
   * <p>
   * Attribute that is part of the association key
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties + AddAssociationKeyAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusAnnotation</li>
   * </ul>
   * </p>
   * @return a java.lang.String evidenceCode
   */
  public java.lang.String getEvidenceCode() {
    return dto.getEvidenceCode();
  }

  /**
   * <p>
   * Attribute that is part of the association key
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties + AddAssociationKeyAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusAnnotation</li>
   * </ul>
   * </p>
   * @return a java.lang.String evidenceWith
   */
  public java.lang.String getEvidenceWith() {
    return dto.getEvidenceWith();
  }

  /**
   * <p>
   * Attribute that is part of the association key
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties + AddAssociationKeyAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusAnnotation</li>
   * </ul>
   * </p>
   * @return a java.lang.String keyword
   */
  public java.lang.String getKeyword() {
    return dto.getKeyword();
  }

  /**
   * <p>
   * Attribute that is part of the association key
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties + AddAssociationKeyAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusAnnotation</li>
   * </ul>
   * </p>
   * @return a java.lang.Long locusTairObjectId
   */
  public java.lang.Long getLocusTairObjectId() {
    return dto.getLocusTairObjectId();
  }

  /**
   * <p>
   * Attribute that is part of the association key
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties + AddAssociationKeyAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusAnnotation</li>
   * </ul>
   * </p>
   * @return a java.lang.String reference
   */
  public java.lang.String getReference() {
    return dto.getReference();
  }

  /**
   * <p>
   * Attribute that is part of the association key
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties + AddAssociationKeyAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusAnnotation</li>
   * </ul>
   * </p>
   * @return a java.lang.String relationshipType
   */
  public java.lang.String getRelationshipType() {
    return dto.getRelationshipType();
  }
}