/**
 * Copyright 2012 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractBsDto.vsl


package org.tair.bs.locusdetail;


import com.poesys.bs.delegate.DelegateException;
import com.poesys.bs.dto.IDto;
import com.poesys.db.dto.DtoStatusException;
import com.poesys.db.pk.IPrimaryKey;
import com.poesys.bs.dto.AbstractDto;


import org.tair.db.locusdetail.IReferencedLocus;
import org.tair.db.locusdetail.ReferencedLocusProxy;
import org.tair.db.locusdetail.ReferencedLocus;


/**
 * <p>
 * A business layer data-transfer object (DTO) for the ReferencedLocus. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * A locus to which the reference refers; this object lists all the loci to which a
 * reference refers, excluding the parent locus; this is separate from LocusDetail
 * to permit query optimization and lazy loading of the loci
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>CompositeKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: false
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractBsReferencedLocus 
    extends AbstractDto<org.tair.db.locusdetail.IReferencedLocus> {

  /**
   * Create a BsReferencedLocus object from a ReferencedLocus object.
   * 
   * @param dto the data-access layer ReferencedLocus DTO
   * @throws DelegateException when there is a problem creating the ReferencedLocus
   */
  public AbstractBsReferencedLocus(IReferencedLocus dto) throws DelegateException {
    super(dto);
  }

  /**
   * Create a ReferencedLocus from new data.
   *
   * @param key the primary key of the ReferencedLocus
   * @param locusTairObjectId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param referenceTairObjectId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param refLocusame the unique name for the locus
   * @param refLocusTairObjectId the unique TAIR object identifier for the locus
   * @param primarySymbol the primary symbol for the locus
   * @param primarySymbolFullName the optional full name for the primary symbol for the locus
   */
  public AbstractBsReferencedLocus(IPrimaryKey key, java.lang.Long locusTairObjectId, java.lang.Long referenceTairObjectId, java.lang.String refLocusame, java.lang.Long refLocusTairObjectId, java.lang.String primarySymbol, java.lang.String primarySymbolFullName) {
    super(new ReferencedLocusProxy(new ReferencedLocus(key, locusTairObjectId, referenceTairObjectId, refLocusame, refLocusTairObjectId, primarySymbol, primarySymbolFullName)));
  }

  @SuppressWarnings("unchecked")
  @Override
  public boolean equals(Object arg0) {
    // Unchecked cast here
    IDto<IReferencedLocus> other = (IDto<IReferencedLocus>)arg0;
    return dto.equals(other.toDto());
  }

  @Override
  public int hashCode() {
    return dto.hashCode();
  }

  public int compareTo(IDto<IReferencedLocus> o) {
    return dto.compareTo(o.toDto());
  }

  public void markChildrenDeleted() throws DtoStatusException {
    dto.markChildrenDeleted();
  }
  
  public IPrimaryKey getPrimaryKey() {
    return dto.getPrimaryKey();
  }

  // Data member properties

  /**
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties + AddParentKeyAttributes + AddParentKeyAttributes as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object ReferencedLocus</li>
   * </ul>
   * </p>
   * @return a java.lang.Long locusTairObjectId
   */
  public java.lang.Long getLocusTairObjectId() {
    return dto.getLocusTairObjectId();
  }

  /**
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   * <p>
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddParentKeyAttributes as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object ReferencedLocus</li>
   * </ul>
   * </p>
   * @return a java.lang.Long referenceTairObjectId
   */
  public java.lang.Long getReferenceTairObjectId() {
    return dto.getReferenceTairObjectId();
  }

  /**
   * <p>
   * the unique name for the locus
   * </p>
   * <p>
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object ReferencedLocus</li>
   * </ul>
   * </p>
   * @return a java.lang.String refLocusame
   */
  public java.lang.String getRefLocusame() {
    return dto.getRefLocusame();
  }

  /**
   * <p>
   * the unique TAIR object identifier for the locus
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object ReferencedLocus</li>
   * </ul>
   * </p>
   * @return a java.lang.Long refLocusTairObjectId
   */
  public java.lang.Long getRefLocusTairObjectId() {
    return dto.getRefLocusTairObjectId();
  }

  /**
   * <p>
   * the primary symbol for the locus
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object ReferencedLocus</li>
   * </ul>
   * </p>
   * @return a java.lang.String primarySymbol
   */
  public java.lang.String getPrimarySymbol() {
    return dto.getPrimarySymbol();
  }

  /**
   * <p>
   * the optional full name for the primary symbol for the locus
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object ReferencedLocus</li>
   * </ul>
   * </p>
   * @return a java.lang.String primarySymbolFullName
   */
  public java.lang.String getPrimarySymbolFullName() {
    return dto.getPrimarySymbolFullName();
  }

  /**
   * <p>
   * the reference that refers to the locus
   * </p>
   * <p>
   * Added by AddToOneAssociationRequiredObjectProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object ReferencedLocus</li>
   * </ul>
   * </p>
   * @return a org.tair.bs.locusdetail.BsReference reference
   */
  public org.tair.bs.locusdetail.BsReference getReference() {
    // Return 4
    return new org.tair.bs.locusdetail.BsReference(dto.getReference());
  }
}