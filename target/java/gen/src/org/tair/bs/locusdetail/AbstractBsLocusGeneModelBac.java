/**
 * Copyright 2011 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractBsDto.vsl


package org.tair.bs.locusdetail;


import com.poesys.bs.delegate.DelegateException;
import com.poesys.bs.dto.IDto;
import com.poesys.db.dto.DtoStatusException;
import com.poesys.db.pk.IPrimaryKey;
import com.poesys.bs.dto.AbstractDto;


import org.tair.db.locusdetail.ILocusGeneModelBac;
import org.tair.db.locusdetail.LocusGeneModelBacProxy;
import org.tair.db.locusdetail.LocusGeneModelBac;


/**
 * <p>
 * A business layer data-transfer object (DTO) for the LocusGeneModelBac. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * A bacterially activated chromosome on which a locus gene model appears; an
 * artificially created chromosome in which biologists clone medium-sized segments
 * of foreign DNA into bacteria, enabling amplification or the making of many
 * copies of the DNA. Note that if the length or start or end is null (not
 * available), this might not be the correct BAC for the gene model
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>CompositeKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: false
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractBsLocusGeneModelBac 
    extends AbstractDto<org.tair.db.locusdetail.ILocusGeneModelBac> {

  /**
   * Create a BsLocusGeneModelBac object from a LocusGeneModelBac object.
   * 
   * @param dto the data-access layer LocusGeneModelBac DTO
   * @throws DelegateException when there is a problem creating the LocusGeneModelBac
   */
  public AbstractBsLocusGeneModelBac(ILocusGeneModelBac dto) throws DelegateException {
    super(dto);
  }

  /**
   * Create a LocusGeneModelBac from new data.
   *
   * @param key the primary key of the LocusGeneModelBac
   * @param geneModelName composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param locusTairObjectId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param sequenceId the unique identifier for the cDNA
   * @param sequenceName the sequence name
   * @param genbankAccession the unique identifier at GenBank for the cDNA sequence
   * @param length the length of the cDNA sequence, unit is bp (base pairs)
   * @param start the starting position on the chromosome in unit bp (base pairs)
   * @param end the ending position on the chromosome in unit bp (base pairs)
   * @param cloneStockNumber the unique identifying stock name for the clone from which the BAC derives
   * @param orderingStatus the stock ordering status according to ABRC:
available
not_available
not_yet_received
no_longer_distributed
not_distributed
available_soon
   */
  public AbstractBsLocusGeneModelBac(IPrimaryKey key, java.lang.String geneModelName, java.lang.Long locusTairObjectId, java.lang.Long sequenceId, java.lang.String sequenceName, java.lang.String genbankAccession, java.lang.Long length, java.lang.Long start, java.lang.Long end, java.lang.String cloneStockNumber, java.lang.String orderingStatus) {
    super(new LocusGeneModelBacProxy(new LocusGeneModelBac(key, geneModelName, locusTairObjectId, sequenceId, sequenceName, genbankAccession, length, start, end, cloneStockNumber, orderingStatus)));
  }

  @SuppressWarnings("unchecked")
  @Override
  public boolean equals(Object arg0) {
    // Unchecked cast here
    IDto<ILocusGeneModelBac> other = (IDto<ILocusGeneModelBac>)arg0;
    return dto.equals(other.toDto());
  }

  @Override
  public int hashCode() {
    return dto.hashCode();
  }

  public int compareTo(IDto<ILocusGeneModelBac> o) {
    return dto.compareTo(o.toDto());
  }

  public void markChildrenDeleted() throws DtoStatusException {
    dto.markChildrenDeleted();
  }
  
  public IPrimaryKey getPrimaryKey() {
    return dto.getPrimaryKey();
  }

  // Data member properties

  /**
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   * <p>
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddParentKeyAttributes as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusGeneModelBac</li>
   * </ul>
   * </p>
   * @return a java.lang.String geneModelName
   */
  public java.lang.String getGeneModelName() {
    return dto.getGeneModelName();
  }

  /**
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties + AddParentKeyAttributes + AddParentKeyAttributes as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusGeneModelBac</li>
   * </ul>
   * </p>
   * @return a java.lang.Long locusTairObjectId
   */
  public java.lang.Long getLocusTairObjectId() {
    return dto.getLocusTairObjectId();
  }

  /**
   * <p>
   * the unique identifier for the cDNA
   * </p>
   * <p>
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusGeneModelBac</li>
   * </ul>
   * </p>
   * @return a java.lang.Long sequenceId
   */
  public java.lang.Long getSequenceId() {
    return dto.getSequenceId();
  }

  /**
   * <p>
   * the sequence name
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusGeneModelBac</li>
   * </ul>
   * </p>
   * @return a java.lang.String sequenceName
   */
  public java.lang.String getSequenceName() {
    return dto.getSequenceName();
  }

  /**
   * <p>
   * the unique identifier at GenBank for the cDNA sequence
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusGeneModelBac</li>
   * </ul>
   * </p>
   * @return a java.lang.String genbankAccession
   */
  public java.lang.String getGenbankAccession() {
    return dto.getGenbankAccession();
  }

  /**
   * <p>
   * the length of the cDNA sequence, unit is bp (base pairs)
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusGeneModelBac</li>
   * </ul>
   * </p>
   * @return a java.lang.Long length
   */
  public java.lang.Long getLength() {
    return dto.getLength();
  }

  /**
   * <p>
   * the starting position on the chromosome in unit bp (base pairs)
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusGeneModelBac</li>
   * </ul>
   * </p>
   * @return a java.lang.Long start
   */
  public java.lang.Long getStart() {
    return dto.getStart();
  }

  /**
   * <p>
   * the ending position on the chromosome in unit bp (base pairs)
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusGeneModelBac</li>
   * </ul>
   * </p>
   * @return a java.lang.Long end
   */
  public java.lang.Long getEnd() {
    return dto.getEnd();
  }

  /**
   * <p>
   * the unique identifying stock name for the clone from which the BAC derives
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusGeneModelBac</li>
   * </ul>
   * </p>
   * @return a java.lang.String cloneStockNumber
   */
  public java.lang.String getCloneStockNumber() {
    return dto.getCloneStockNumber();
  }

  /**
   * <p>
   * the stock ordering status according to ABRC:
   * </p>
   * <p>
   * available
   * </p>
   * <p>
   * not_available
   * </p>
   * <p>
   * not_yet_received
   * </p>
   * <p>
   * no_longer_distributed
   * </p>
   * <p>
   * not_distributed
   * </p>
   * <p>
   * available_soon
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusGeneModelBac</li>
   * </ul>
   * </p>
   * @return a java.lang.String orderingStatus
   */
  public java.lang.String getOrderingStatus() {
    return dto.getOrderingStatus();
  }

  /**
   * <p>
   * the gene model to which the BAC belongs
   * </p>
   * <p>
   * Added by AddToOneAssociationRequiredObjectProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object LocusGeneModelBac</li>
   * </ul>
   * </p>
   * @return a org.tair.bs.locusdetail.BsLocusGeneModel geneModel
   */
  public org.tair.bs.locusdetail.BsLocusGeneModel getGeneModel() {
    // Return 4
    return new org.tair.bs.locusdetail.BsLocusGeneModel(dto.getGeneModel());
  }
}